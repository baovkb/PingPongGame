/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdbool.h>
#include "usbd_cdc_if.h"
#include "stm32f429i_discovery_lcd.h"
#include "stm32f429i_discovery_gyroscope.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define GYRO_SENSITIVITY 0.00875
uint8_t RxBuff[APP_RX_DATA_SIZE];

typedef struct {
	float x;
	float y;
	float z;
} Gyro_xyz;

uint32_t start_time = 0;
uint32_t end_time = 0;
uint16_t score = 0;

osMailQId(myMQID);  // Mail queue ID
osMessageQId(message_q_id);
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
osThreadId Gyro_TaskHandle;
osThreadId USB_TaskHandle;
osThreadId LCD_TaskHandle;
osThreadId Led_TaskHandle;
/* USER CODE BEGIN PV */
uint8_t RxBuff[APP_RX_DATA_SIZE];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
void Start_Gyro_Task(void const * argument);
void Start_USB_Task(void const * argument);
void Start_LCD_Task(void const * argument);
void Start_Led_Task(void const * argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
  BSP_LCD_SelectLayer(1);
  BSP_LCD_DisplayOn();//turn on LCD
  BSP_LCD_Clear(LCD_COLOR_BLACK);
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color

  BSP_GYRO_Init();
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMailQDef(myMQ, 5, Gyro_xyz);  // Declare mail queue
  myMQID = osMailCreate(osMailQ(myMQ), NULL);

  osMessageQDef(message_q, 5, bool);
  message_q_id = osMessageCreate(osMessageQ(message_q), NULL);
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Gyro_Task */
  osThreadDef(Gyro_Task, Start_Gyro_Task, osPriorityNormal, 0, 256);
  Gyro_TaskHandle = osThreadCreate(osThread(Gyro_Task), NULL);

  /* definition and creation of USB_Task */
  osThreadDef(USB_Task, Start_USB_Task, osPriorityNormal, 0, 128);
  USB_TaskHandle = osThreadCreate(osThread(USB_Task), NULL);

  /* definition and creation of LCD_Task */
  osThreadDef(LCD_Task, Start_LCD_Task, osPriorityNormal, 0, 128);
  LCD_TaskHandle = osThreadCreate(osThread(LCD_Task), NULL);

  /* definition and creation of Led_Task */
  osThreadDef(Led_Task, Start_Led_Task, osPriorityNormal, 0, 128);
  Led_TaskHandle = osThreadCreate(osThread(Led_Task), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void calcGyroAngle(Gyro_xyz *xyz) {
	float gyro_data[3] = {0};
	uint8_t dt = 50;

	start_time = HAL_GetTick();
	BSP_GYRO_GetXYZ(gyro_data);
	do {
			end_time = HAL_GetTick();
			HAL_Delay(2);
	}while(end_time - start_time < dt);

	xyz->x += gyro_data[0] * GYRO_SENSITIVITY * (dt / 1000.0);
	xyz->y += gyro_data[1] * GYRO_SENSITIVITY * (dt / 1000.0);
	xyz->z += gyro_data[2] * GYRO_SENSITIVITY * (dt / 1000.0);

}

void init_Gyro_data(Gyro_xyz *xyz){
	xyz->x = 0;
	xyz->y = 0;
	xyz->z = 0;
}

void assign_gyro_data(Gyro_xyz *src, Gyro_xyz *des){
	des->x = src->x;
	des->y = src->y;
	des->z = src->z;
}

/* USER CODE END 4 */

/* USER CODE BEGIN Header_Start_Gyro_Task */
/**
  * @brief  Function implementing the Gyro_Task thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Gyro_Task */
void Start_Gyro_Task(void const * argument)
{
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 5 */
  Gyro_xyz gyro_data;
  Gyro_xyz low_gyro_data;
  Gyro_xyz high_gyro_data;
  bool signLCD = 0;
  init_Gyro_data(&gyro_data);
  init_Gyro_data(&low_gyro_data);
  init_Gyro_data(&high_gyro_data);
  /* Infinite loop */
  for(;;)
  {
	calcGyroAngle(&gyro_data);
	if (gyro_data.x < -4){ //ha bong
		//get lowest gyro_data.x
		do
		{
			assign_gyro_data(&gyro_data, &low_gyro_data);
			calcGyroAngle(&gyro_data);
		}while(gyro_data.x <= low_gyro_data.x);
		score++;

		osSignalSet(Led_TaskHandle, 0x1);
		signLCD = 0;
		osMessagePut(message_q_id, signLCD, osWaitForever);

		while (gyro_data.x < 4)
		{
			calcGyroAngle(&gyro_data);
		}

		do
		{
			assign_gyro_data(&gyro_data, &high_gyro_data);
			calcGyroAngle(&gyro_data);
		}while(gyro_data.x >= high_gyro_data.x);

		//send data to message queue
		signLCD = 1;
		osMessagePut(message_q_id, signLCD, osWaitForever);

		//send data to virtual comport task
		Gyro_xyz *gyro_tx;
		gyro_tx = (Gyro_xyz *)osMailAlloc(myMQID, osWaitForever);
		gyro_tx->x = gyro_data.x;
		gyro_tx->y = gyro_data.y;
		gyro_tx->z = gyro_data.z;
		osMailPut(myMQID, gyro_tx);

	}
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_Start_USB_Task */
/**
* @brief Function implementing the USB_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_Task */
void Start_USB_Task(void const * argument)
{
  /* USER CODE BEGIN Start_USB_Task */
  /* Infinite loop */
  for(;;)
  {
	osEvent event = osMailGet(myMQID, osWaitForever);
	Gyro_xyz *received = (Gyro_xyz *)event.value.p;       // ".p" indicates that the message is a pointer


    osDelay(1);
  }
  /* USER CODE END Start_USB_Task */
}

/* USER CODE BEGIN Header_Start_LCD_Task */
/**
* @brief Function implementing the LCD_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_Task */
void Start_LCD_Task(void const * argument)
{
  /* USER CODE BEGIN Start_LCD_Task */
  char sc[20] = {0};
  sprintf(sc, "score: %d", score);
  BSP_LCD_DisplayStringAtLine(0, sc);
  BSP_LCD_DrawCircle((uint32_t)BSP_LCD_GetXSize()/2, (uint32_t)BSP_LCD_GetYSize() / 2, 80);
  /* Infinite loop */
  for(;;)
  {
	  osEvent event = osMessageGet(message_q_id, osWaitForever);

	  memset(sc, 0, 20);
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	  sprintf(sc, "score: %d", score);
	  BSP_LCD_DisplayStringAtLine(0, sc);

	  if (event.value.p == 0)
	  {
		  BSP_LCD_DrawCircle((uint32_t)BSP_LCD_GetXSize()/2, (uint32_t)BSP_LCD_GetYSize() / 2, 80);
	  }
	  else BSP_LCD_DrawCircle((uint32_t)BSP_LCD_GetXSize()/2, (uint32_t)BSP_LCD_GetYSize() / 2, 50);
    osDelay(1);
  }
  /* USER CODE END Start_LCD_Task */
}

/* USER CODE BEGIN Header_Start_Led_Task */
/**
* @brief Function implementing the Led_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Led_Task */
void Start_Led_Task(void const * argument)
{
  /* USER CODE BEGIN Start_Led_Task */
  /* Infinite loop */
  for(;;)
  {
	osSignalWait(0x1, osWaitForever);
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
	osDelay(500);
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
    osDelay(1);
  }
  /* USER CODE END Start_Led_Task */
}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
