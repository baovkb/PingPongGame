
PingPongGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f81c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c34  0800f9cc  0800f9cc  0001f9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011600  08011600  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08011600  08011600  00021600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011608  08011608  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011608  08011608  00021608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801160c  0801160c  0002160c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08011610  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301cc  2**0
                  CONTENTS
 10 .bss          000067e4  200001cc  200001cc  000301cc  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  200069b0  200069b0  000301cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002542e  00000000  00000000  0003023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000607f  00000000  00000000  0005566d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002240  00000000  00000000  0005b6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a23  00000000  00000000  0005d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bdb2  00000000  00000000  0005f353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a355  00000000  00000000  0008b105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f3b6c  00000000  00000000  000b545a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000094c8  00000000  00000000  001a8fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  001b2490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f9b4 	.word	0x0800f9b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	0800f9b4 	.word	0x0800f9b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b970 	b.w	8000dd4 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	460d      	mov	r5, r1
 8000b14:	4604      	mov	r4, r0
 8000b16:	460f      	mov	r7, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14a      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4694      	mov	ip, r2
 8000b20:	d965      	bls.n	8000bee <__udivmoddi4+0xe2>
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	b143      	cbz	r3, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b2c:	f1c3 0220 	rsb	r2, r3, #32
 8000b30:	409f      	lsls	r7, r3
 8000b32:	fa20 f202 	lsr.w	r2, r0, r2
 8000b36:	4317      	orrs	r7, r2
 8000b38:	409c      	lsls	r4, r3
 8000b3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b3e:	fa1f f58c 	uxth.w	r5, ip
 8000b42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b46:	0c22      	lsrs	r2, r4, #16
 8000b48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b50:	fb01 f005 	mul.w	r0, r1, r5
 8000b54:	4290      	cmp	r0, r2
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x62>
 8000b58:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b60:	f080 811c 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b64:	4290      	cmp	r0, r2
 8000b66:	f240 8119 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b6a:	3902      	subs	r1, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	1a12      	subs	r2, r2, r0
 8000b70:	b2a4      	uxth	r4, r4
 8000b72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b7e:	fb00 f505 	mul.w	r5, r0, r5
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	d90a      	bls.n	8000b9c <__udivmoddi4+0x90>
 8000b86:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b8e:	f080 8107 	bcs.w	8000da0 <__udivmoddi4+0x294>
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	f240 8104 	bls.w	8000da0 <__udivmoddi4+0x294>
 8000b98:	4464      	add	r4, ip
 8000b9a:	3802      	subs	r0, #2
 8000b9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba0:	1b64      	subs	r4, r4, r5
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	b11e      	cbz	r6, 8000bae <__udivmoddi4+0xa2>
 8000ba6:	40dc      	lsrs	r4, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0xbc>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80ed 	beq.w	8000d96 <__udivmoddi4+0x28a>
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc8:	fab3 f183 	clz	r1, r3
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d149      	bne.n	8000c64 <__udivmoddi4+0x158>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	d302      	bcc.n	8000bda <__udivmoddi4+0xce>
 8000bd4:	4282      	cmp	r2, r0
 8000bd6:	f200 80f8 	bhi.w	8000dca <__udivmoddi4+0x2be>
 8000bda:	1a84      	subs	r4, r0, r2
 8000bdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000be0:	2001      	movs	r0, #1
 8000be2:	4617      	mov	r7, r2
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d0e2      	beq.n	8000bae <__udivmoddi4+0xa2>
 8000be8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bec:	e7df      	b.n	8000bae <__udivmoddi4+0xa2>
 8000bee:	b902      	cbnz	r2, 8000bf2 <__udivmoddi4+0xe6>
 8000bf0:	deff      	udf	#255	; 0xff
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8090 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfc:	1a8a      	subs	r2, r1, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f fe8c 	uxth.w	lr, ip
 8000c06:	2101      	movs	r1, #1
 8000c08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c10:	0c22      	lsrs	r2, r4, #16
 8000c12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c16:	fb0e f005 	mul.w	r0, lr, r5
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	f200 80cb 	bhi.w	8000dc4 <__udivmoddi4+0x2b8>
 8000c2e:	4645      	mov	r5, r8
 8000c30:	1a12      	subs	r2, r2, r0
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c38:	fb07 2210 	mls	r2, r7, r0, r2
 8000c3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c40:	fb0e fe00 	mul.w	lr, lr, r0
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x14e>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x14c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f200 80bb 	bhi.w	8000dce <__udivmoddi4+0x2c2>
 8000c58:	4610      	mov	r0, r2
 8000c5a:	eba4 040e 	sub.w	r4, r4, lr
 8000c5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c62:	e79f      	b.n	8000ba4 <__udivmoddi4+0x98>
 8000c64:	f1c1 0720 	rsb	r7, r1, #32
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c72:	fa05 f401 	lsl.w	r4, r5, r1
 8000c76:	fa20 f307 	lsr.w	r3, r0, r7
 8000c7a:	40fd      	lsrs	r5, r7
 8000c7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c80:	4323      	orrs	r3, r4
 8000c82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c8e:	0c1c      	lsrs	r4, r3, #16
 8000c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c94:	fb08 f50e 	mul.w	r5, r8, lr
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cac:	f080 8088 	bcs.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb0:	42a5      	cmp	r5, r4
 8000cb2:	f240 8085 	bls.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cba:	4464      	add	r4, ip
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	b29d      	uxth	r5, r3
 8000cc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ccc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cdc:	d26c      	bcs.n	8000db8 <__udivmoddi4+0x2ac>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	d96a      	bls.n	8000db8 <__udivmoddi4+0x2ac>
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	4464      	add	r4, ip
 8000ce6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cea:	fba3 9502 	umull	r9, r5, r3, r2
 8000cee:	eba4 040e 	sub.w	r4, r4, lr
 8000cf2:	42ac      	cmp	r4, r5
 8000cf4:	46c8      	mov	r8, r9
 8000cf6:	46ae      	mov	lr, r5
 8000cf8:	d356      	bcc.n	8000da8 <__udivmoddi4+0x29c>
 8000cfa:	d053      	beq.n	8000da4 <__udivmoddi4+0x298>
 8000cfc:	b156      	cbz	r6, 8000d14 <__udivmoddi4+0x208>
 8000cfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000d02:	eb64 040e 	sbc.w	r4, r4, lr
 8000d06:	fa04 f707 	lsl.w	r7, r4, r7
 8000d0a:	40ca      	lsrs	r2, r1
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	e9c6 7400 	strd	r7, r4, [r6]
 8000d14:	4618      	mov	r0, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1c:	f1c3 0120 	rsb	r1, r3, #32
 8000d20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d24:	fa20 f201 	lsr.w	r2, r0, r1
 8000d28:	fa25 f101 	lsr.w	r1, r5, r1
 8000d2c:	409d      	lsls	r5, r3
 8000d2e:	432a      	orrs	r2, r5
 8000d30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d40:	0c11      	lsrs	r1, r2, #16
 8000d42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d46:	fb00 f50e 	mul.w	r5, r0, lr
 8000d4a:	428d      	cmp	r5, r1
 8000d4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x258>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d5a:	d22f      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d5c:	428d      	cmp	r5, r1
 8000d5e:	d92d      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d60:	3802      	subs	r0, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1b49      	subs	r1, r1, r5
 8000d66:	b292      	uxth	r2, r2
 8000d68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d74:	fb05 f10e 	mul.w	r1, r5, lr
 8000d78:	4291      	cmp	r1, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x282>
 8000d7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d84:	d216      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d86:	4291      	cmp	r1, r2
 8000d88:	d914      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d8a:	3d02      	subs	r5, #2
 8000d8c:	4462      	add	r2, ip
 8000d8e:	1a52      	subs	r2, r2, r1
 8000d90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d94:	e738      	b.n	8000c08 <__udivmoddi4+0xfc>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e708      	b.n	8000bae <__udivmoddi4+0xa2>
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	e6e6      	b.n	8000b6e <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e6fb      	b.n	8000b9c <__udivmoddi4+0x90>
 8000da4:	4548      	cmp	r0, r9
 8000da6:	d2a9      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000db0:	3b01      	subs	r3, #1
 8000db2:	e7a3      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db4:	4645      	mov	r5, r8
 8000db6:	e7ea      	b.n	8000d8e <__udivmoddi4+0x282>
 8000db8:	462b      	mov	r3, r5
 8000dba:	e794      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dbc:	4640      	mov	r0, r8
 8000dbe:	e7d1      	b.n	8000d64 <__udivmoddi4+0x258>
 8000dc0:	46d0      	mov	r8, sl
 8000dc2:	e77b      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc4:	3d02      	subs	r5, #2
 8000dc6:	4462      	add	r2, ip
 8000dc8:	e732      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e70a      	b.n	8000be4 <__udivmoddi4+0xd8>
 8000dce:	4464      	add	r4, ip
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	e742      	b.n	8000c5a <__udivmoddi4+0x14e>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <vApplicationGetIdleTaskMemory+0x30>)
 8000dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200001e8 	.word	0x200001e8
 8000e08:	2000023c 	.word	0x2000023c

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b0a4      	sub	sp, #144	; 0x90
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f002 fb4f 	bl	80034b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f8a1 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f909 	bl	8001030 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000e1e:	f001 fbfd 	bl	800261c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000e22:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000e26:	2001      	movs	r0, #1
 8000e28:	f001 fc7a 	bl	8002720 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f001 fcdb 	bl	80027e8 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000e32:	f001 ff77 	bl	8002d24 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000e36:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e3a:	f001 fd47 	bl	80028cc <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000e3e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000e42:	f001 fcf9 	bl	8002838 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000e46:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4a:	f001 fcdd 	bl	8002808 <BSP_LCD_SetTextColor>

  BSP_GYRO_Init();
 8000e4e:	f001 fb6b 	bl	8002528 <BSP_GYRO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMailQDef(myMQ, 5, Gyro_xyz);  // Declare mail queue
 8000e52:	2305      	movs	r3, #5
 8000e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e58:	230c      	movs	r3, #12
 8000e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000e5e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  myMQID = osMailCreate(osMailQ(myMQ), NULL);
 8000e66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00a ffb5 	bl	800bddc <osMailCreate>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <main+0x124>)
 8000e76:	6013      	str	r3, [r2, #0]

  osMessageQDef(message_q, 5, bool);
 8000e78:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <main+0x128>)
 8000e7a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000e7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  message_q_id = osMessageCreate(osMessageQ(message_q), NULL);
 8000e84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f00a feca 	bl	800bc24 <osMessageCreate>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a29      	ldr	r2, [pc, #164]	; (8000f38 <main+0x12c>)
 8000e94:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Gyro_Task */
  osThreadDef(Gyro_Task, Start_Gyro_Task, osPriorityNormal, 0, 256);
 8000e96:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <main+0x130>)
 8000e98:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e9c:	461d      	mov	r5, r3
 8000e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ea2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Gyro_TaskHandle = osThreadCreate(osThread(Gyro_Task), NULL);
 8000eaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f00a fcca 	bl	800b84a <osThreadCreate>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a21      	ldr	r2, [pc, #132]	; (8000f40 <main+0x134>)
 8000eba:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_Task */
  osThreadDef(USB_Task, Start_USB_Task, osPriorityNormal, 0, 128);
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <main+0x138>)
 8000ebe:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000ec2:	461d      	mov	r5, r3
 8000ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ecc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_TaskHandle = osThreadCreate(osThread(USB_Task), NULL);
 8000ed0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00a fcb7 	bl	800b84a <osThreadCreate>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4a1a      	ldr	r2, [pc, #104]	; (8000f48 <main+0x13c>)
 8000ee0:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_Task */
  osThreadDef(LCD_Task, Start_LCD_Task, osPriorityNormal, 0, 128);
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <main+0x140>)
 8000ee4:	f107 041c 	add.w	r4, r7, #28
 8000ee8:	461d      	mov	r5, r3
 8000eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_TaskHandle = osThreadCreate(osThread(LCD_Task), NULL);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f00a fca4 	bl	800b84a <osThreadCreate>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <main+0x144>)
 8000f06:	6013      	str	r3, [r2, #0]

  /* definition and creation of Led_Task */
  osThreadDef(Led_Task, Start_Led_Task, osPriorityNormal, 0, 128);
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <main+0x148>)
 8000f0a:	463c      	mov	r4, r7
 8000f0c:	461d      	mov	r5, r3
 8000f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Led_TaskHandle = osThreadCreate(osThread(Led_Task), NULL);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00a fc93 	bl	800b84a <osThreadCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <main+0x14c>)
 8000f28:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f2a:	f00a fc87 	bl	800b83c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <main+0x122>
 8000f30:	20000c48 	.word	0x20000c48
 8000f34:	0800f9cc 	.word	0x0800f9cc
 8000f38:	20000c4c 	.word	0x20000c4c
 8000f3c:	0800f9e8 	.word	0x0800f9e8
 8000f40:	20000c50 	.word	0x20000c50
 8000f44:	0800fa10 	.word	0x0800fa10
 8000f48:	20000c54 	.word	0x20000c54
 8000f4c:	0800fa38 	.word	0x0800fa38
 8000f50:	20000c58 	.word	0x20000c58
 8000f54:	0800fa60 	.word	0x0800fa60
 8000f58:	20000c5c 	.word	0x20000c5c

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	; 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00e f89e 	bl	800f0ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b28      	ldr	r3, [pc, #160]	; (8001028 <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <SystemClock_Config+0xcc>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b25      	ldr	r3, [pc, #148]	; (8001028 <SystemClock_Config+0xcc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <SystemClock_Config+0xd0>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <SystemClock_Config+0xd0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f004 ff1e 	bl	8005e24 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fee:	f000 fb29 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001002:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2105      	movs	r1, #5
 8001010:	4618      	mov	r0, r3
 8001012:	f005 f97f 	bl	8006314 <HAL_RCC_ClockConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800101c:	f000 fb12 	bl	8001644 <Error_Handler>
  }
}
 8001020:	bf00      	nop
 8001022:	3750      	adds	r7, #80	; 0x50
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_GPIO_Init+0xb8>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <MX_GPIO_Init+0xb8>)
 8001050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_GPIO_Init+0xb8>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_GPIO_Init+0xb8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a1f      	ldr	r2, [pc, #124]	; (80010e8 <MX_GPIO_Init+0xb8>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_GPIO_Init+0xb8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_GPIO_Init+0xb8>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a18      	ldr	r2, [pc, #96]	; (80010e8 <MX_GPIO_Init+0xb8>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_GPIO_Init+0xb8>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_GPIO_Init+0xb8>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <MX_GPIO_Init+0xb8>)
 80010a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <MX_GPIO_Init+0xb8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80010bc:	480b      	ldr	r0, [pc, #44]	; (80010ec <MX_GPIO_Init+0xbc>)
 80010be:	f003 f941 	bl	8004344 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80010c2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010d0:	2302      	movs	r3, #2
 80010d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_GPIO_Init+0xbc>)
 80010dc:	f002 ff86 	bl	8003fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40021800 	.word	0x40021800

080010f0 <calcGyroAngle>:

/* USER CODE BEGIN 4 */
void calcGyroAngle(Gyro_xyz *xyz) {
 80010f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
	float gyro_data[3] = {0};
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
	uint8_t dt = 50;
 8001106:	2332      	movs	r3, #50	; 0x32
 8001108:	75fb      	strb	r3, [r7, #23]

	start_time = HAL_GetTick();
 800110a:	f002 fa09 	bl	8003520 <HAL_GetTick>
 800110e:	4603      	mov	r3, r0
 8001110:	4a5b      	ldr	r2, [pc, #364]	; (8001280 <calcGyroAngle+0x190>)
 8001112:	6013      	str	r3, [r2, #0]
	BSP_GYRO_GetXYZ(gyro_data);
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	4618      	mov	r0, r3
 800111a:	f001 fa6b 	bl	80025f4 <BSP_GYRO_GetXYZ>
	do {
			end_time = HAL_GetTick();
 800111e:	f002 f9ff 	bl	8003520 <HAL_GetTick>
 8001122:	4603      	mov	r3, r0
 8001124:	4a57      	ldr	r2, [pc, #348]	; (8001284 <calcGyroAngle+0x194>)
 8001126:	6013      	str	r3, [r2, #0]
			HAL_Delay(2);
 8001128:	2002      	movs	r0, #2
 800112a:	f002 fa05 	bl	8003538 <HAL_Delay>
	}while(end_time - start_time < dt);
 800112e:	4b55      	ldr	r3, [pc, #340]	; (8001284 <calcGyroAngle+0x194>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <calcGyroAngle+0x190>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	429a      	cmp	r2, r3
 800113c:	d3ef      	bcc.n	800111e <calcGyroAngle+0x2e>

	xyz->x += gyro_data[0] * GYRO_SENSITIVITY * (dt / 1000.0);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa10 	bl	8000568 <__aeabi_f2d>
 8001148:	4604      	mov	r4, r0
 800114a:	460d      	mov	r5, r1
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fa0a 	bl	8000568 <__aeabi_f2d>
 8001154:	a348      	add	r3, pc, #288	; (adr r3, 8001278 <calcGyroAngle+0x188>)
 8001156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115a:	f7ff fa5d 	bl	8000618 <__aeabi_dmul>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4690      	mov	r8, r2
 8001164:	4699      	mov	r9, r3
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9eb 	bl	8000544 <__aeabi_i2d>
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b45      	ldr	r3, [pc, #276]	; (8001288 <calcGyroAngle+0x198>)
 8001174:	f7ff fb7a 	bl	800086c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4640      	mov	r0, r8
 800117e:	4649      	mov	r1, r9
 8001180:	f7ff fa4a 	bl	8000618 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4620      	mov	r0, r4
 800118a:	4629      	mov	r1, r5
 800118c:	f7ff f88e 	bl	80002ac <__adddf3>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fc50 	bl	8000a3c <__aeabi_d2f>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	601a      	str	r2, [r3, #0]
	xyz->y += gyro_data[1] * GYRO_SENSITIVITY * (dt / 1000.0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9de 	bl	8000568 <__aeabi_f2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff f9d8 	bl	8000568 <__aeabi_f2d>
 80011b8:	a32f      	add	r3, pc, #188	; (adr r3, 8001278 <calcGyroAngle+0x188>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7ff fa2b 	bl	8000618 <__aeabi_dmul>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4690      	mov	r8, r2
 80011c8:	4699      	mov	r9, r3
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9b9 	bl	8000544 <__aeabi_i2d>
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <calcGyroAngle+0x198>)
 80011d8:	f7ff fb48 	bl	800086c <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4640      	mov	r0, r8
 80011e2:	4649      	mov	r1, r9
 80011e4:	f7ff fa18 	bl	8000618 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7ff f85c 	bl	80002ac <__adddf3>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fc1e 	bl	8000a3c <__aeabi_d2f>
 8001200:	4602      	mov	r2, r0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	605a      	str	r2, [r3, #4]
	xyz->z += gyro_data[2] * GYRO_SENSITIVITY * (dt / 1000.0);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f9ac 	bl	8000568 <__aeabi_f2d>
 8001210:	4604      	mov	r4, r0
 8001212:	460d      	mov	r5, r1
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f9a6 	bl	8000568 <__aeabi_f2d>
 800121c:	a316      	add	r3, pc, #88	; (adr r3, 8001278 <calcGyroAngle+0x188>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f9f9 	bl	8000618 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4690      	mov	r8, r2
 800122c:	4699      	mov	r9, r3
 800122e:	7dfb      	ldrb	r3, [r7, #23]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f987 	bl	8000544 <__aeabi_i2d>
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <calcGyroAngle+0x198>)
 800123c:	f7ff fb16 	bl	800086c <__aeabi_ddiv>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4640      	mov	r0, r8
 8001246:	4649      	mov	r1, r9
 8001248:	f7ff f9e6 	bl	8000618 <__aeabi_dmul>
 800124c:	4602      	mov	r2, r0
 800124e:	460b      	mov	r3, r1
 8001250:	4620      	mov	r0, r4
 8001252:	4629      	mov	r1, r5
 8001254:	f7ff f82a 	bl	80002ac <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fbec 	bl	8000a3c <__aeabi_d2f>
 8001264:	4602      	mov	r2, r0
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	609a      	str	r2, [r3, #8]

}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	1eb851ec 	.word	0x1eb851ec
 800127c:	3f81eb85 	.word	0x3f81eb85
 8001280:	20000c3c 	.word	0x20000c3c
 8001284:	20000c40 	.word	0x20000c40
 8001288:	408f4000 	.word	0x408f4000

0800128c <init_Gyro_data>:

void init_Gyro_data(Gyro_xyz *xyz){
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	xyz->x = 0;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
	xyz->y = 0;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	605a      	str	r2, [r3, #4]
	xyz->z = 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <assign_gyro_data>:

void assign_gyro_data(Gyro_xyz *src, Gyro_xyz *des){
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	des->x = src->x;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	601a      	str	r2, [r3, #0]
	des->y = src->y;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	605a      	str	r2, [r3, #4]
	des->z = src->z;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	609a      	str	r2, [r3, #8]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <Start_Gyro_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Gyro_Task */
void Start_Gyro_Task(void const * argument)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80012f0:	f00d f994 	bl	800e61c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  Gyro_xyz gyro_data;
  Gyro_xyz low_gyro_data;
  Gyro_xyz high_gyro_data;
  bool signLCD = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  init_Gyro_data(&gyro_data);
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffc4 	bl	800128c <init_Gyro_data>
  init_Gyro_data(&low_gyro_data);
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ffbf 	bl	800128c <init_Gyro_data>
  init_Gyro_data(&high_gyro_data);
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffba 	bl	800128c <init_Gyro_data>
  /* Infinite loop */
  for(;;)
  {
	calcGyroAngle(&gyro_data);
 8001318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fee7 	bl	80010f0 <calcGyroAngle>
	if (gyro_data.x < -4){ //ha bong
 8001322:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001326:	eeb9 7a00 	vmov.f32	s14, #144	; 0xc0800000 -4.0
 800132a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	d575      	bpl.n	8001420 <Start_Gyro_Task+0x138>
		//get lowest gyro_data.x
		do
		{
			assign_gyro_data(&gyro_data, &low_gyro_data);
 8001334:	f107 0218 	add.w	r2, r7, #24
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ffba 	bl	80012b8 <assign_gyro_data>
			calcGyroAngle(&gyro_data);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fed1 	bl	80010f0 <calcGyroAngle>
		}while(gyro_data.x <= low_gyro_data.x);
 800134e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001352:	edd7 7a06 	vldr	s15, [r7, #24]
 8001356:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	d9e9      	bls.n	8001334 <Start_Gyro_Task+0x4c>
		score++;
 8001360:	4b30      	ldr	r3, [pc, #192]	; (8001424 <Start_Gyro_Task+0x13c>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <Start_Gyro_Task+0x13c>)
 800136a:	801a      	strh	r2, [r3, #0]

		osSignalSet(Led_TaskHandle, 0x1);
 800136c:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <Start_Gyro_Task+0x140>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	4618      	mov	r0, r3
 8001374:	f00a faca 	bl	800b90c <osSignalSet>
		signLCD = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		osMessagePut(message_q_id, signLCD, osWaitForever);
 800137e:	4b2b      	ldr	r3, [pc, #172]	; (800142c <Start_Gyro_Task+0x144>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8001386:	f04f 32ff 	mov.w	r2, #4294967295
 800138a:	4618      	mov	r0, r3
 800138c:	f00a fc72 	bl	800bc74 <osMessagePut>

		while (gyro_data.x < 4)
 8001390:	e004      	b.n	800139c <Start_Gyro_Task+0xb4>
		{
			calcGyroAngle(&gyro_data);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff feaa 	bl	80010f0 <calcGyroAngle>
		while (gyro_data.x < 4)
 800139c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013a0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80013a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d4f1      	bmi.n	8001392 <Start_Gyro_Task+0xaa>
		}

		do
		{
			assign_gyro_data(&gyro_data, &high_gyro_data);
 80013ae:	f107 020c 	add.w	r2, r7, #12
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff7d 	bl	80012b8 <assign_gyro_data>
			calcGyroAngle(&gyro_data);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fe94 	bl	80010f0 <calcGyroAngle>
		}while(gyro_data.x >= high_gyro_data.x);
 80013c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	dae9      	bge.n	80013ae <Start_Gyro_Task+0xc6>

		//send data to message queue
		signLCD = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		osMessagePut(message_q_id, signLCD, osWaitForever);
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <Start_Gyro_Task+0x144>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	4618      	mov	r0, r3
 80013ee:	f00a fc41 	bl	800bc74 <osMessagePut>

		//send data to virtual comport task
		Gyro_xyz *gyro_tx;
		gyro_tx = (Gyro_xyz *)osMailAlloc(myMQID, osWaitForever);
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <Start_Gyro_Task+0x148>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f04f 31ff 	mov.w	r1, #4294967295
 80013fa:	4618      	mov	r0, r3
 80013fc:	f00a fd46 	bl	800be8c <osMailAlloc>
 8001400:	6338      	str	r0, [r7, #48]	; 0x30
		gyro_tx->x = gyro_data.x;
 8001402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001406:	601a      	str	r2, [r3, #0]
		gyro_tx->y = gyro_data.y;
 8001408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800140a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800140c:	605a      	str	r2, [r3, #4]
		gyro_tx->z = gyro_data.z;
 800140e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	609a      	str	r2, [r3, #8]
		osMailPut(myMQID, gyro_tx);
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <Start_Gyro_Task+0x148>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800141a:	4618      	mov	r0, r3
 800141c:	f00a fd4c 	bl	800beb8 <osMailPut>
	calcGyroAngle(&gyro_data);
 8001420:	e77a      	b.n	8001318 <Start_Gyro_Task+0x30>
 8001422:	bf00      	nop
 8001424:	20000c44 	.word	0x20000c44
 8001428:	20000c5c 	.word	0x20000c5c
 800142c:	20000c4c 	.word	0x20000c4c
 8001430:	20000c48 	.word	0x20000c48

08001434 <Start_USB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_Task */
void Start_USB_Task(void const * argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b096      	sub	sp, #88	; 0x58
 8001438:	af02      	add	r7, sp, #8
 800143a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_USB_Task */
  /* Infinite loop */
  char str[50];
  for(;;)
  {
	  memset(str, 0, sizeof(str) / sizeof(char));
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	2232      	movs	r2, #50	; 0x32
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00d fe31 	bl	800f0ac <memset>
	  osEvent event = osMailGet(myMQID, osWaitForever);
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <Start_USB_Task+0x9c>)
 800144c:	6819      	ldr	r1, [r3, #0]
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	4618      	mov	r0, r3
 8001458:	f00a fd6c 	bl	800bf34 <osMailGet>
	  Gyro_xyz *received = (Gyro_xyz *)event.value.p;
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	64fb      	str	r3, [r7, #76]	; 0x4c

	  sprintf(str, "x: %d\ny: %d\nz: %d\n--------\n", (int16_t)(received->x), (int16_t)(received->y), (int16_t)(received->z));
 8001460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146a:	ee17 3a90 	vmov	r3, s15
 800146e:	b21b      	sxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001474:	edd3 7a01 	vldr	s15, [r3, #4]
 8001478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147c:	ee17 3a90 	vmov	r3, s15
 8001480:	b21b      	sxth	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001486:	edd3 7a02 	vldr	s15, [r3, #8]
 800148a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800148e:	ee17 3a90 	vmov	r3, s15
 8001492:	b21b      	sxth	r3, r3
 8001494:	f107 0018 	add.w	r0, r7, #24
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	460b      	mov	r3, r1
 800149c:	490d      	ldr	r1, [pc, #52]	; (80014d4 <Start_USB_Task+0xa0>)
 800149e:	f00d fde5 	bl	800f06c <siprintf>
	  CDC_Transmit_HS(str, strlen(str));
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fea2 	bl	80001f0 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f107 0318 	add.w	r3, r7, #24
 80014b4:	4611      	mov	r1, r2
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00d f97a 	bl	800e7b0 <CDC_Transmit_HS>

	  osMailFree(myMQID, received);
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <Start_USB_Task+0x9c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80014c2:	4618      	mov	r0, r3
 80014c4:	f00a fdaa 	bl	800c01c <osMailFree>

    osDelay(1);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f00a fa0a 	bl	800b8e2 <osDelay>
  {
 80014ce:	e7b5      	b.n	800143c <Start_USB_Task+0x8>
 80014d0:	20000c48 	.word	0x20000c48
 80014d4:	0800fa7c 	.word	0x0800fa7c

080014d8 <Start_LCD_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_Task */
void Start_LCD_Task(void const * argument)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b08b      	sub	sp, #44	; 0x2c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_Task */
  char sc[20] = {0};
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
  sprintf(sc, "score: %d", score);
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <Start_LCD_Task+0xf8>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4935      	ldr	r1, [pc, #212]	; (80015d4 <Start_LCD_Task+0xfc>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f00d fdb4 	bl	800f06c <siprintf>
  BSP_LCD_DisplayStringAtLine(0, sc);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	2000      	movs	r0, #0
 800150c:	f001 fb08 	bl	8002b20 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DrawCircle((uint32_t)BSP_LCD_GetXSize()/2, (uint32_t)BSP_LCD_GetYSize() / 2, 80);
 8001510:	f001 f8ee 	bl	80026f0 <BSP_LCD_GetXSize>
 8001514:	4603      	mov	r3, r0
 8001516:	085b      	lsrs	r3, r3, #1
 8001518:	b29c      	uxth	r4, r3
 800151a:	f001 f8f5 	bl	8002708 <BSP_LCD_GetYSize>
 800151e:	4603      	mov	r3, r0
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	b29b      	uxth	r3, r3
 8001524:	2250      	movs	r2, #80	; 0x50
 8001526:	4619      	mov	r1, r3
 8001528:	4620      	mov	r0, r4
 800152a:	f001 fb11 	bl	8002b50 <BSP_LCD_DrawCircle>
  /* Infinite loop */
  for(;;)
  {
	  osEvent event = osMessageGet(message_q_id, osWaitForever);
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <Start_LCD_Task+0x100>)
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	f04f 32ff 	mov.w	r2, #4294967295
 800153a:	4618      	mov	r0, r3
 800153c:	f00a fbda 	bl	800bcf4 <osMessageGet>

	  memset(sc, 0, 20);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2214      	movs	r2, #20
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00d fdaf 	bl	800f0ac <memset>
	  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800154e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001552:	f001 f9bb 	bl	80028cc <BSP_LCD_Clear>
	  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001556:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800155a:	f001 f96d 	bl	8002838 <BSP_LCD_SetBackColor>
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800155e:	f04f 30ff 	mov.w	r0, #4294967295
 8001562:	f001 f951 	bl	8002808 <BSP_LCD_SetTextColor>
	  sprintf(sc, "score: %d", score);
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <Start_LCD_Task+0xf8>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4918      	ldr	r1, [pc, #96]	; (80015d4 <Start_LCD_Task+0xfc>)
 8001572:	4618      	mov	r0, r3
 8001574:	f00d fd7a 	bl	800f06c <siprintf>
	  BSP_LCD_DisplayStringAtLine(0, sc);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	2000      	movs	r0, #0
 8001580:	f001 face 	bl	8002b20 <BSP_LCD_DisplayStringAtLine>

	  if (event.value.p == 0)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10f      	bne.n	80015aa <Start_LCD_Task+0xd2>
	  {
		  BSP_LCD_DrawCircle((uint32_t)BSP_LCD_GetXSize()/2, (uint32_t)BSP_LCD_GetYSize() / 2, 80);
 800158a:	f001 f8b1 	bl	80026f0 <BSP_LCD_GetXSize>
 800158e:	4603      	mov	r3, r0
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	b29c      	uxth	r4, r3
 8001594:	f001 f8b8 	bl	8002708 <BSP_LCD_GetYSize>
 8001598:	4603      	mov	r3, r0
 800159a:	085b      	lsrs	r3, r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	2250      	movs	r2, #80	; 0x50
 80015a0:	4619      	mov	r1, r3
 80015a2:	4620      	mov	r0, r4
 80015a4:	f001 fad4 	bl	8002b50 <BSP_LCD_DrawCircle>
 80015a8:	e00e      	b.n	80015c8 <Start_LCD_Task+0xf0>
	  }
	  else BSP_LCD_DrawCircle((uint32_t)BSP_LCD_GetXSize()/2, (uint32_t)BSP_LCD_GetYSize() / 2, 50);
 80015aa:	f001 f8a1 	bl	80026f0 <BSP_LCD_GetXSize>
 80015ae:	4603      	mov	r3, r0
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	b29c      	uxth	r4, r3
 80015b4:	f001 f8a8 	bl	8002708 <BSP_LCD_GetYSize>
 80015b8:	4603      	mov	r3, r0
 80015ba:	085b      	lsrs	r3, r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2232      	movs	r2, #50	; 0x32
 80015c0:	4619      	mov	r1, r3
 80015c2:	4620      	mov	r0, r4
 80015c4:	f001 fac4 	bl	8002b50 <BSP_LCD_DrawCircle>
    osDelay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f00a f98a 	bl	800b8e2 <osDelay>
  {
 80015ce:	e7ae      	b.n	800152e <Start_LCD_Task+0x56>
 80015d0:	20000c44 	.word	0x20000c44
 80015d4:	0800fa98 	.word	0x0800fa98
 80015d8:	20000c4c 	.word	0x20000c4c

080015dc <Start_Led_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Led_Task */
void Start_Led_Task(void const * argument)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN Start_Led_Task */
  /* Infinite loop */
  for(;;)
  {
	osSignalWait(0x1, osWaitForever);
 80015e4:	463b      	mov	r3, r7
 80015e6:	f04f 32ff 	mov.w	r2, #4294967295
 80015ea:	2101      	movs	r1, #1
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00a f9cd 	bl	800b98c <osSignalWait>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <Start_Led_Task+0x40>)
 80015fa:	f002 fea3 	bl	8004344 <HAL_GPIO_WritePin>
	osDelay(500);
 80015fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001602:	f00a f96e 	bl	800b8e2 <osDelay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <Start_Led_Task+0x40>)
 800160e:	f002 fe99 	bl	8004344 <HAL_GPIO_WritePin>
    osDelay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f00a f965 	bl	800b8e2 <osDelay>
	osSignalWait(0x1, osWaitForever);
 8001618:	e7e4      	b.n	80015e4 <Start_Led_Task+0x8>
 800161a:	bf00      	nop
 800161c:	40021800 	.word	0x40021800

08001620 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001632:	f001 ff61 	bl	80034f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40001000 	.word	0x40001000

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	e7fe      	b.n	800164c <Error_Handler+0x8>
	...

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_MspInit+0x54>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_MspInit+0x54>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001664:	6453      	str	r3, [r2, #68]	; 0x44
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_MspInit+0x54>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_MspInit+0x54>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_MspInit+0x54>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <HAL_MspInit+0x54>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	210f      	movs	r1, #15
 8001692:	f06f 0001 	mvn.w	r0, #1
 8001696:	f002 f82b 	bl	80036f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	; 0x38
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_InitTick+0xe4>)
 80016be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c0:	4a32      	ldr	r2, [pc, #200]	; (800178c <HAL_InitTick+0xe4>)
 80016c2:	f043 0310 	orr.w	r3, r3, #16
 80016c6:	6413      	str	r3, [r2, #64]	; 0x40
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_InitTick+0xe4>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f003 0310 	and.w	r3, r3, #16
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016d4:	f107 0210 	add.w	r2, r7, #16
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f005 f824 	bl	800672c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ee:	f005 f809 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 80016f2:	6378      	str	r0, [r7, #52]	; 0x34
 80016f4:	e004      	b.n	8001700 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016f6:	f005 f805 	bl	8006704 <HAL_RCC_GetPCLK1Freq>
 80016fa:	4603      	mov	r3, r0
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <HAL_InitTick+0xe8>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	0c9b      	lsrs	r3, r3, #18
 800170a:	3b01      	subs	r3, #1
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <HAL_InitTick+0xec>)
 8001710:	4a21      	ldr	r2, [pc, #132]	; (8001798 <HAL_InitTick+0xf0>)
 8001712:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_InitTick+0xec>)
 8001716:	f240 32e7 	movw	r2, #999	; 0x3e7
 800171a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800171c:	4a1d      	ldr	r2, [pc, #116]	; (8001794 <HAL_InitTick+0xec>)
 800171e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001720:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_InitTick+0xec>)
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_InitTick+0xec>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_InitTick+0xec>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001734:	4817      	ldr	r0, [pc, #92]	; (8001794 <HAL_InitTick+0xec>)
 8001736:	f006 f879 	bl	800782c <HAL_TIM_Base_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001740:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001744:	2b00      	cmp	r3, #0
 8001746:	d11b      	bne.n	8001780 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001748:	4812      	ldr	r0, [pc, #72]	; (8001794 <HAL_InitTick+0xec>)
 800174a:	f006 f8c9 	bl	80078e0 <HAL_TIM_Base_Start_IT>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001754:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001758:	2b00      	cmp	r3, #0
 800175a:	d111      	bne.n	8001780 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800175c:	2036      	movs	r0, #54	; 0x36
 800175e:	f001 ffe3 	bl	8003728 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d808      	bhi.n	800177a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	2036      	movs	r0, #54	; 0x36
 800176e:	f001 ffbf 	bl	80036f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_InitTick+0xf4>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e002      	b.n	8001780 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001780:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001784:	4618      	mov	r0, r3
 8001786:	3738      	adds	r7, #56	; 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	431bde83 	.word	0x431bde83
 8001794:	20000c60 	.word	0x20000c60
 8001798:	40001000 	.word	0x40001000
 800179c:	20000080 	.word	0x20000080

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler+0x4>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <UsageFault_Handler+0x4>

080017be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <TIM6_DAC_IRQHandler+0x10>)
 80017d2:	f006 f8f5 	bl	80079c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000c60 	.word	0x20000c60

080017e0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <OTG_HS_IRQHandler+0x10>)
 80017e6:	f003 f9f0 	bl	8004bca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000613c 	.word	0x2000613c

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f00d fc4a 	bl	800f0bc <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20030000 	.word	0x20030000
 8001854:	00000400 	.word	0x00000400
 8001858:	20000ca8 	.word	0x20000ca8
 800185c:	200069b0 	.word	0x200069b0

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018bc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ae:	f7ff ffd7 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f00d fc09 	bl	800f0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b6:	f7ff faa9 	bl	8000e0c <main>
  bx  lr    
 80018ba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018bc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80018c8:	08011610 	.word	0x08011610
  ldr r2, =_sbss
 80018cc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80018d0:	200069b0 	.word	0x200069b0

080018d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC_IRQHandler>

080018d6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018da:	f000 fc73 	bl	80021c4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80018de:	20ca      	movs	r0, #202	; 0xca
 80018e0:	f000 f95d 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80018e4:	20c3      	movs	r0, #195	; 0xc3
 80018e6:	f000 f967 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80018ea:	2008      	movs	r0, #8
 80018ec:	f000 f964 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80018f0:	2050      	movs	r0, #80	; 0x50
 80018f2:	f000 f961 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80018f6:	20cf      	movs	r0, #207	; 0xcf
 80018f8:	f000 f951 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 f95b 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001902:	20c1      	movs	r0, #193	; 0xc1
 8001904:	f000 f958 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001908:	2030      	movs	r0, #48	; 0x30
 800190a:	f000 f955 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800190e:	20ed      	movs	r0, #237	; 0xed
 8001910:	f000 f945 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001914:	2064      	movs	r0, #100	; 0x64
 8001916:	f000 f94f 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800191a:	2003      	movs	r0, #3
 800191c:	f000 f94c 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001920:	2012      	movs	r0, #18
 8001922:	f000 f949 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001926:	2081      	movs	r0, #129	; 0x81
 8001928:	f000 f946 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800192c:	20e8      	movs	r0, #232	; 0xe8
 800192e:	f000 f936 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001932:	2085      	movs	r0, #133	; 0x85
 8001934:	f000 f940 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001938:	2000      	movs	r0, #0
 800193a:	f000 f93d 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800193e:	2078      	movs	r0, #120	; 0x78
 8001940:	f000 f93a 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001944:	20cb      	movs	r0, #203	; 0xcb
 8001946:	f000 f92a 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800194a:	2039      	movs	r0, #57	; 0x39
 800194c:	f000 f934 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001950:	202c      	movs	r0, #44	; 0x2c
 8001952:	f000 f931 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001956:	2000      	movs	r0, #0
 8001958:	f000 f92e 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800195c:	2034      	movs	r0, #52	; 0x34
 800195e:	f000 f92b 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001962:	2002      	movs	r0, #2
 8001964:	f000 f928 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001968:	20f7      	movs	r0, #247	; 0xf7
 800196a:	f000 f918 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800196e:	2020      	movs	r0, #32
 8001970:	f000 f922 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001974:	20ea      	movs	r0, #234	; 0xea
 8001976:	f000 f912 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800197a:	2000      	movs	r0, #0
 800197c:	f000 f91c 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001980:	2000      	movs	r0, #0
 8001982:	f000 f919 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001986:	20b1      	movs	r0, #177	; 0xb1
 8001988:	f000 f909 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800198c:	2000      	movs	r0, #0
 800198e:	f000 f913 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001992:	201b      	movs	r0, #27
 8001994:	f000 f910 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001998:	20b6      	movs	r0, #182	; 0xb6
 800199a:	f000 f900 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800199e:	200a      	movs	r0, #10
 80019a0:	f000 f90a 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80019a4:	20a2      	movs	r0, #162	; 0xa2
 80019a6:	f000 f907 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80019aa:	20c0      	movs	r0, #192	; 0xc0
 80019ac:	f000 f8f7 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019b0:	2010      	movs	r0, #16
 80019b2:	f000 f901 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80019b6:	20c1      	movs	r0, #193	; 0xc1
 80019b8:	f000 f8f1 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019bc:	2010      	movs	r0, #16
 80019be:	f000 f8fb 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80019c2:	20c5      	movs	r0, #197	; 0xc5
 80019c4:	f000 f8eb 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80019c8:	2045      	movs	r0, #69	; 0x45
 80019ca:	f000 f8f5 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80019ce:	2015      	movs	r0, #21
 80019d0:	f000 f8f2 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80019d4:	20c7      	movs	r0, #199	; 0xc7
 80019d6:	f000 f8e2 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80019da:	2090      	movs	r0, #144	; 0x90
 80019dc:	f000 f8ec 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80019e0:	2036      	movs	r0, #54	; 0x36
 80019e2:	f000 f8dc 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80019e6:	20c8      	movs	r0, #200	; 0xc8
 80019e8:	f000 f8e6 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80019ec:	20f2      	movs	r0, #242	; 0xf2
 80019ee:	f000 f8d6 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f000 f8e0 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80019f8:	20b0      	movs	r0, #176	; 0xb0
 80019fa:	f000 f8d0 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80019fe:	20c2      	movs	r0, #194	; 0xc2
 8001a00:	f000 f8da 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a04:	20b6      	movs	r0, #182	; 0xb6
 8001a06:	f000 f8ca 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f000 f8d4 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a10:	20a7      	movs	r0, #167	; 0xa7
 8001a12:	f000 f8d1 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a16:	2027      	movs	r0, #39	; 0x27
 8001a18:	f000 f8ce 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f000 f8cb 	bl	8001bb8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a22:	202a      	movs	r0, #42	; 0x2a
 8001a24:	f000 f8bb 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f8c5 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 f8c2 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f000 f8bf 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001a3a:	20ef      	movs	r0, #239	; 0xef
 8001a3c:	f000 f8bc 	bl	8001bb8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001a40:	202b      	movs	r0, #43	; 0x2b
 8001a42:	f000 f8ac 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f8b6 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 f8b3 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001a52:	2001      	movs	r0, #1
 8001a54:	f000 f8b0 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001a58:	203f      	movs	r0, #63	; 0x3f
 8001a5a:	f000 f8ad 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001a5e:	20f6      	movs	r0, #246	; 0xf6
 8001a60:	f000 f89d 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a64:	2001      	movs	r0, #1
 8001a66:	f000 f8a7 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f8a4 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001a70:	2006      	movs	r0, #6
 8001a72:	f000 f8a1 	bl	8001bb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001a76:	202c      	movs	r0, #44	; 0x2c
 8001a78:	f000 f891 	bl	8001b9e <ili9341_WriteReg>
  LCD_Delay(200);
 8001a7c:	20c8      	movs	r0, #200	; 0xc8
 8001a7e:	f000 fc8f 	bl	80023a0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001a82:	2026      	movs	r0, #38	; 0x26
 8001a84:	f000 f88b 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f000 f895 	bl	8001bb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001a8e:	20e0      	movs	r0, #224	; 0xe0
 8001a90:	f000 f885 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001a94:	200f      	movs	r0, #15
 8001a96:	f000 f88f 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001a9a:	2029      	movs	r0, #41	; 0x29
 8001a9c:	f000 f88c 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001aa0:	2024      	movs	r0, #36	; 0x24
 8001aa2:	f000 f889 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001aa6:	200c      	movs	r0, #12
 8001aa8:	f000 f886 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001aac:	200e      	movs	r0, #14
 8001aae:	f000 f883 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ab2:	2009      	movs	r0, #9
 8001ab4:	f000 f880 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001ab8:	204e      	movs	r0, #78	; 0x4e
 8001aba:	f000 f87d 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001abe:	2078      	movs	r0, #120	; 0x78
 8001ac0:	f000 f87a 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ac4:	203c      	movs	r0, #60	; 0x3c
 8001ac6:	f000 f877 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001aca:	2009      	movs	r0, #9
 8001acc:	f000 f874 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001ad0:	2013      	movs	r0, #19
 8001ad2:	f000 f871 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ad6:	2005      	movs	r0, #5
 8001ad8:	f000 f86e 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001adc:	2017      	movs	r0, #23
 8001ade:	f000 f86b 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ae2:	2011      	movs	r0, #17
 8001ae4:	f000 f868 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f865 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001aee:	20e1      	movs	r0, #225	; 0xe1
 8001af0:	f000 f855 	bl	8001b9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f000 f85f 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001afa:	2016      	movs	r0, #22
 8001afc:	f000 f85c 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001b00:	201b      	movs	r0, #27
 8001b02:	f000 f859 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b06:	2004      	movs	r0, #4
 8001b08:	f000 f856 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b0c:	2011      	movs	r0, #17
 8001b0e:	f000 f853 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b12:	2007      	movs	r0, #7
 8001b14:	f000 f850 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b18:	2031      	movs	r0, #49	; 0x31
 8001b1a:	f000 f84d 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b1e:	2033      	movs	r0, #51	; 0x33
 8001b20:	f000 f84a 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b24:	2042      	movs	r0, #66	; 0x42
 8001b26:	f000 f847 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b2a:	2005      	movs	r0, #5
 8001b2c:	f000 f844 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b30:	200c      	movs	r0, #12
 8001b32:	f000 f841 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001b36:	200a      	movs	r0, #10
 8001b38:	f000 f83e 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001b3c:	2028      	movs	r0, #40	; 0x28
 8001b3e:	f000 f83b 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001b42:	202f      	movs	r0, #47	; 0x2f
 8001b44:	f000 f838 	bl	8001bb8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001b48:	200f      	movs	r0, #15
 8001b4a:	f000 f835 	bl	8001bb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001b4e:	2011      	movs	r0, #17
 8001b50:	f000 f825 	bl	8001b9e <ili9341_WriteReg>
  LCD_Delay(200);
 8001b54:	20c8      	movs	r0, #200	; 0xc8
 8001b56:	f000 fc23 	bl	80023a0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b5a:	2029      	movs	r0, #41	; 0x29
 8001b5c:	f000 f81f 	bl	8001b9e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001b60:	202c      	movs	r0, #44	; 0x2c
 8001b62:	f000 f81c 	bl	8001b9e <ili9341_WriteReg>
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001b6e:	f000 fb29 	bl	80021c4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001b72:	2103      	movs	r1, #3
 8001b74:	20d3      	movs	r0, #211	; 0xd3
 8001b76:	f000 f82c 	bl	8001bd2 <ili9341_ReadData>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b29b      	uxth	r3, r3
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b86:	2029      	movs	r0, #41	; 0x29
 8001b88:	f000 f809 	bl	8001b9e <ili9341_WriteReg>
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001b94:	2028      	movs	r0, #40	; 0x28
 8001b96:	f000 f802 	bl	8001b9e <ili9341_WriteReg>
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fba4 	bl	80022f8 <LCD_IO_WriteReg>
}
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fb75 	bl	80022b4 <LCD_IO_WriteData>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460a      	mov	r2, r1
 8001bdc:	80fb      	strh	r3, [r7, #6]
 8001bde:	4613      	mov	r3, r2
 8001be0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001be2:	797a      	ldrb	r2, [r7, #5]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fba7 	bl	800233c <LCD_IO_ReadData>
 8001bee:	4603      	mov	r3, r0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001bfc:	23f0      	movs	r3, #240	; 0xf0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001c0c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001c28:	f000 fbc6 	bl	80023b8 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001c32:	f107 030f 	add.w	r3, r7, #15
 8001c36:	2201      	movs	r2, #1
 8001c38:	2120      	movs	r1, #32
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fc08 	bl	8002450 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001c4a:	f107 030f 	add.w	r3, r7, #15
 8001c4e:	2201      	movs	r2, #1
 8001c50:	2123      	movs	r1, #35	; 0x23
 8001c52:	4618      	mov	r0, r3
 8001c54:	f000 fbfc 	bl	8002450 <GYRO_IO_Write>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001c74:	f000 fba0 	bl	80023b8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001c78:	1dfb      	adds	r3, r7, #7
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	210f      	movs	r1, #15
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fc18 	bl	80024b4 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001c94:	1dfb      	adds	r3, r7, #7
 8001c96:	2201      	movs	r2, #1
 8001c98:	2124      	movs	r1, #36	; 0x24
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fc0a 	bl	80024b4 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001caa:	1dfb      	adds	r3, r7, #7
 8001cac:	2201      	movs	r2, #1
 8001cae:	2124      	movs	r1, #36	; 0x24
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 fbcd 	bl	8002450 <GYRO_IO_Write>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001cd2:	f107 030f 	add.w	r3, r7, #15
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2120      	movs	r1, #32
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 fbb8 	bl	8002450 <GYRO_IO_Write>
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001cfa:	f107 030f 	add.w	r3, r7, #15
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2130      	movs	r1, #48	; 0x30
 8001d02:	4618      	mov	r0, r3
 8001d04:	f000 fbd6 	bl	80024b4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001d08:	f107 030e 	add.w	r3, r7, #14
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	2122      	movs	r1, #34	; 0x22
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fbcf 	bl	80024b4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	121b      	asrs	r3, r3, #8
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	b25b      	sxtb	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	f023 0320 	bic.w	r3, r3, #32
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	7bbb      	ldrb	r3, [r7, #14]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001d4a:	f107 030f 	add.w	r3, r7, #15
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2130      	movs	r1, #48	; 0x30
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fb7c 	bl	8002450 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001d58:	f107 030e 	add.w	r3, r7, #14
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2122      	movs	r1, #34	; 0x22
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 fb75 	bl	8002450 <GYRO_IO_Write>
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b084      	sub	sp, #16
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001d78:	f107 030f 	add.w	r3, r7, #15
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2122      	movs	r1, #34	; 0x22
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fb97 	bl	80024b4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e00c      	b.n	8001dbc <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d109      	bne.n	8001dbc <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	f023 0308 	bic.w	r3, r3, #8
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	f043 0308 	orr.w	r3, r3, #8
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001dbc:	f107 030f 	add.w	r3, r7, #15
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2122      	movs	r1, #34	; 0x22
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 fb43 	bl	8002450 <GYRO_IO_Write>
}
 8001dca:	bf00      	nop
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	4603      	mov	r3, r0
 8001dda:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ddc:	f107 030f 	add.w	r3, r7, #15
 8001de0:	2201      	movs	r2, #1
 8001de2:	2122      	movs	r1, #34	; 0x22
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fb65 	bl	80024b4 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e009      	b.n	8001e14 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d106      	bne.n	8001e14 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	f023 0308 	bic.w	r3, r3, #8
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e14:	f107 030f 	add.w	r3, r7, #15
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2122      	movs	r1, #34	; 0x22
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 fb17 	bl	8002450 <GYRO_IO_Write>
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001e34:	f107 030f 	add.w	r3, r7, #15
 8001e38:	2201      	movs	r2, #1
 8001e3a:	2121      	movs	r1, #33	; 0x21
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fb39 	bl	80024b4 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001e56:	f107 030f 	add.w	r3, r7, #15
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	2121      	movs	r1, #33	; 0x21
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 faf6 	bl	8002450 <GYRO_IO_Write>
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001e76:	f107 030f 	add.w	r3, r7, #15
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2124      	movs	r1, #36	; 0x24
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 fb18 	bl	80024b4 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	f023 0310 	bic.w	r3, r3, #16
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001e98:	f107 030f 	add.w	r3, r7, #15
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	2124      	movs	r1, #36	; 0x24
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 fad5 	bl	8002450 <GYRO_IO_Write>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001ed8:	f107 030f 	add.w	r3, r7, #15
 8001edc:	2201      	movs	r2, #1
 8001ede:	2123      	movs	r1, #35	; 0x23
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fae7 	bl	80024b4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001ee6:	f107 0318 	add.w	r3, r7, #24
 8001eea:	2206      	movs	r2, #6
 8001eec:	2128      	movs	r1, #40	; 0x28
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fae0 	bl	80024b4 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d123      	bne.n	8001f46 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
 8001f02:	e01c      	b.n	8001f3e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	3301      	adds	r3, #1
 8001f0a:	3328      	adds	r3, #40	; 0x28
 8001f0c:	443b      	add	r3, r7
 8001f0e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	3328      	adds	r3, #40	; 0x28
 8001f1e:	443b      	add	r3, r7
 8001f20:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4413      	add	r3, r2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	3328      	adds	r3, #40	; 0x28
 8001f32:	443b      	add	r3, r7
 8001f34:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	623b      	str	r3, [r7, #32]
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	dddf      	ble.n	8001f04 <L3GD20_ReadXYZAngRate+0x54>
 8001f44:	e022      	b.n	8001f8c <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	e01c      	b.n	8001f86 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	3328      	adds	r3, #40	; 0x28
 8001f52:	443b      	add	r3, r7
 8001f54:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	3301      	adds	r3, #1
 8001f64:	3328      	adds	r3, #40	; 0x28
 8001f66:	443b      	add	r3, r7
 8001f68:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	3328      	adds	r3, #40	; 0x28
 8001f7a:	443b      	add	r3, r7
 8001f7c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	3301      	adds	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	dddf      	ble.n	8001f4c <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	d00c      	beq.n	8001fb0 <L3GD20_ReadXYZAngRate+0x100>
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	dc0d      	bgt.n	8001fb6 <L3GD20_ReadXYZAngRate+0x106>
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <L3GD20_ReadXYZAngRate+0xf4>
 8001f9e:	2b10      	cmp	r3, #16
 8001fa0:	d003      	beq.n	8001faa <L3GD20_ReadXYZAngRate+0xfa>
 8001fa2:	e008      	b.n	8001fb6 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <L3GD20_ReadXYZAngRate+0x14c>)
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001fa8:	e005      	b.n	8001fb6 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <L3GD20_ReadXYZAngRate+0x150>)
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001fae:	e002      	b.n	8001fb6 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <L3GD20_ReadXYZAngRate+0x154>)
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001fb4:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	e016      	b.n	8001fea <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	3328      	adds	r3, #40	; 0x28
 8001fc2:	443b      	add	r3, r7
 8001fc4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001fc8:	ee07 3a90 	vmov	s15, r3
 8001fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd0:	6a3b      	ldr	r3, [r7, #32]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe0:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	623b      	str	r3, [r7, #32]
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	dde5      	ble.n	8001fbc <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	bf00      	nop
 8001ff4:	3728      	adds	r7, #40	; 0x28
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	410c0000 	.word	0x410c0000
 8002000:	418c0000 	.word	0x418c0000
 8002004:	428c0000 	.word	0x428c0000

08002008 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800200c:	4819      	ldr	r0, [pc, #100]	; (8002074 <SPIx_Init+0x6c>)
 800200e:	f005 face 	bl	80075ae <HAL_SPI_GetState>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d12b      	bne.n	8002070 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <SPIx_Init+0x6c>)
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <SPIx_Init+0x70>)
 800201c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <SPIx_Init+0x6c>)
 8002020:	2218      	movs	r2, #24
 8002022:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <SPIx_Init+0x6c>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <SPIx_Init+0x6c>)
 800202c:	2200      	movs	r2, #0
 800202e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <SPIx_Init+0x6c>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002036:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <SPIx_Init+0x6c>)
 8002038:	2200      	movs	r2, #0
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800203c:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <SPIx_Init+0x6c>)
 800203e:	2207      	movs	r2, #7
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <SPIx_Init+0x6c>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002048:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <SPIx_Init+0x6c>)
 800204a:	2200      	movs	r2, #0
 800204c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <SPIx_Init+0x6c>)
 8002050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002054:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <SPIx_Init+0x6c>)
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <SPIx_Init+0x6c>)
 800205e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002062:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <SPIx_Init+0x6c>)
 8002066:	f000 f873 	bl	8002150 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800206a:	4802      	ldr	r0, [pc, #8]	; (8002074 <SPIx_Init+0x6c>)
 800206c:	f004 fdeb 	bl	8006c46 <HAL_SPI_Init>
  } 
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000cac 	.word	0x20000cac
 8002078:	40015000 	.word	0x40015000

0800207c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	b29a      	uxth	r2, r3
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <SPIx_Read+0x38>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f107 0108 	add.w	r1, r7, #8
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <SPIx_Read+0x3c>)
 8002098:	f004 ffd6 	bl	8007048 <HAL_SPI_Receive>
 800209c:	4603      	mov	r3, r0
 800209e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020a6:	f000 f847 	bl	8002138 <SPIx_Error>
  }
  
  return readvalue;
 80020aa:	68bb      	ldr	r3, [r7, #8]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000070 	.word	0x20000070
 80020b8:	20000cac 	.word	0x20000cac

080020bc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <SPIx_Write+0x34>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	1db9      	adds	r1, r7, #6
 80020d0:	2201      	movs	r2, #1
 80020d2:	4808      	ldr	r0, [pc, #32]	; (80020f4 <SPIx_Write+0x38>)
 80020d4:	f004 fe7c 	bl	8006dd0 <HAL_SPI_Transmit>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80020e2:	f000 f829 	bl	8002138 <SPIx_Error>
  }
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000070 	.word	0x20000070
 80020f4:	20000cac 	.word	0x20000cac

080020f8 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <SPIx_WriteRead+0x38>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f107 020f 	add.w	r2, r7, #15
 800210e:	1df9      	adds	r1, r7, #7
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	4807      	ldr	r0, [pc, #28]	; (8002134 <SPIx_WriteRead+0x3c>)
 8002116:	f005 f8a8 	bl	800726a <HAL_SPI_TransmitReceive>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002120:	f000 f80a 	bl	8002138 <SPIx_Error>
  }
  
  return receivedbyte;
 8002124:	7bfb      	ldrb	r3, [r7, #15]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000070 	.word	0x20000070
 8002134:	20000cac 	.word	0x20000cac

08002138 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800213c:	4803      	ldr	r0, [pc, #12]	; (800214c <SPIx_Error+0x14>)
 800213e:	f004 fe0b 	bl	8006d58 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002142:	f7ff ff61 	bl	8002008 <SPIx_Init>
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000cac 	.word	0x20000cac

08002150 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <SPIx_MspInit+0x6c>)
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	4a16      	ldr	r2, [pc, #88]	; (80021bc <SPIx_MspInit+0x6c>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	6453      	str	r3, [r2, #68]	; 0x44
 8002168:	4b14      	ldr	r3, [pc, #80]	; (80021bc <SPIx_MspInit+0x6c>)
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <SPIx_MspInit+0x6c>)
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <SPIx_MspInit+0x6c>)
 800217e:	f043 0320 	orr.w	r3, r3, #32
 8002182:	6313      	str	r3, [r2, #48]	; 0x30
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <SPIx_MspInit+0x6c>)
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002190:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002194:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800219a:	2302      	movs	r3, #2
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800219e:	2301      	movs	r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80021a2:	2305      	movs	r3, #5
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <SPIx_MspInit+0x70>)
 80021ae:	f001 ff1d 	bl	8003fec <HAL_GPIO_Init>
}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021400 	.word	0x40021400

080021c4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <LCD_IO_Init+0xe0>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d164      	bne.n	800229c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <LCD_IO_Init+0xe0>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <LCD_IO_Init+0xe4>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <LCD_IO_Init+0xe4>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6313      	str	r3, [r2, #48]	; 0x30
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <LCD_IO_Init+0xe4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80021f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	4619      	mov	r1, r3
 800220c:	4827      	ldr	r0, [pc, #156]	; (80022ac <LCD_IO_Init+0xe8>)
 800220e:	f001 feed 	bl	8003fec <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4b24      	ldr	r3, [pc, #144]	; (80022a8 <LCD_IO_Init+0xe4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <LCD_IO_Init+0xe4>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <LCD_IO_Init+0xe4>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	607b      	str	r3, [r7, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800222e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002232:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800223c:	2302      	movs	r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	4619      	mov	r1, r3
 8002246:	4819      	ldr	r0, [pc, #100]	; (80022ac <LCD_IO_Init+0xe8>)
 8002248:	f001 fed0 	bl	8003fec <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <LCD_IO_Init+0xe4>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	4a14      	ldr	r2, [pc, #80]	; (80022a8 <LCD_IO_Init+0xe4>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6313      	str	r3, [r2, #48]	; 0x30
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <LCD_IO_Init+0xe4>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002268:	2304      	movs	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800226c:	2301      	movs	r3, #1
 800226e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4619      	mov	r1, r3
 800227e:	480c      	ldr	r0, [pc, #48]	; (80022b0 <LCD_IO_Init+0xec>)
 8002280:	f001 feb4 	bl	8003fec <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002284:	2200      	movs	r2, #0
 8002286:	2104      	movs	r1, #4
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <LCD_IO_Init+0xec>)
 800228a:	f002 f85b 	bl	8004344 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800228e:	2201      	movs	r2, #1
 8002290:	2104      	movs	r1, #4
 8002292:	4807      	ldr	r0, [pc, #28]	; (80022b0 <LCD_IO_Init+0xec>)
 8002294:	f002 f856 	bl	8004344 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002298:	f7ff feb6 	bl	8002008 <SPIx_Init>
  }
}
 800229c:	bf00      	nop
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000d04 	.word	0x20000d04
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40020800 	.word	0x40020800

080022b4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c4:	480a      	ldr	r0, [pc, #40]	; (80022f0 <LCD_IO_WriteData+0x3c>)
 80022c6:	f002 f83d 	bl	8004344 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80022ca:	2200      	movs	r2, #0
 80022cc:	2104      	movs	r1, #4
 80022ce:	4809      	ldr	r0, [pc, #36]	; (80022f4 <LCD_IO_WriteData+0x40>)
 80022d0:	f002 f838 	bl	8004344 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fef0 	bl	80020bc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80022dc:	2201      	movs	r2, #1
 80022de:	2104      	movs	r1, #4
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <LCD_IO_WriteData+0x40>)
 80022e2:	f002 f82f 	bl	8004344 <HAL_GPIO_WritePin>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40020c00 	.word	0x40020c00
 80022f4:	40020800 	.word	0x40020800

080022f8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	4603      	mov	r3, r0
 8002300:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002308:	480a      	ldr	r0, [pc, #40]	; (8002334 <LCD_IO_WriteReg+0x3c>)
 800230a:	f002 f81b 	bl	8004344 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800230e:	2200      	movs	r2, #0
 8002310:	2104      	movs	r1, #4
 8002312:	4809      	ldr	r0, [pc, #36]	; (8002338 <LCD_IO_WriteReg+0x40>)
 8002314:	f002 f816 	bl	8004344 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fecd 	bl	80020bc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002322:	2201      	movs	r2, #1
 8002324:	2104      	movs	r1, #4
 8002326:	4804      	ldr	r0, [pc, #16]	; (8002338 <LCD_IO_WriteReg+0x40>)
 8002328:	f002 f80c 	bl	8004344 <HAL_GPIO_WritePin>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40020c00 	.word	0x40020c00
 8002338:	40020800 	.word	0x40020800

0800233c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	460a      	mov	r2, r1
 8002346:	80fb      	strh	r3, [r7, #6]
 8002348:	4613      	mov	r3, r2
 800234a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002350:	2200      	movs	r2, #0
 8002352:	2104      	movs	r1, #4
 8002354:	4810      	ldr	r0, [pc, #64]	; (8002398 <LCD_IO_ReadData+0x5c>)
 8002356:	f001 fff5 	bl	8004344 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002360:	480e      	ldr	r0, [pc, #56]	; (800239c <LCD_IO_ReadData+0x60>)
 8002362:	f001 ffef 	bl	8004344 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fea7 	bl	80020bc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800236e:	797b      	ldrb	r3, [r7, #5]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fe83 	bl	800207c <SPIx_Read>
 8002376:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002378:	2201      	movs	r2, #1
 800237a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800237e:	4807      	ldr	r0, [pc, #28]	; (800239c <LCD_IO_ReadData+0x60>)
 8002380:	f001 ffe0 	bl	8004344 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002384:	2201      	movs	r2, #1
 8002386:	2104      	movs	r1, #4
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <LCD_IO_ReadData+0x5c>)
 800238a:	f001 ffdb 	bl	8004344 <HAL_GPIO_WritePin>
  
  return readvalue;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00

080023a0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f001 f8c5 	bl	8003538 <HAL_Delay>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	4b20      	ldr	r3, [pc, #128]	; (8002444 <GYRO_IO_Init+0x8c>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <GYRO_IO_Init+0x8c>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <GYRO_IO_Init+0x8c>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80023da:	2302      	movs	r3, #2
 80023dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80023de:	2301      	movs	r3, #1
 80023e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80023e6:	2301      	movs	r3, #1
 80023e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	4619      	mov	r1, r3
 80023f0:	4815      	ldr	r0, [pc, #84]	; (8002448 <GYRO_IO_Init+0x90>)
 80023f2:	f001 fdfb 	bl	8003fec <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80023f6:	2201      	movs	r2, #1
 80023f8:	2102      	movs	r1, #2
 80023fa:	4813      	ldr	r0, [pc, #76]	; (8002448 <GYRO_IO_Init+0x90>)
 80023fc:	f001 ffa2 	bl	8004344 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <GYRO_IO_Init+0x8c>)
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <GYRO_IO_Init+0x8c>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6313      	str	r3, [r2, #48]	; 0x30
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <GYRO_IO_Init+0x8c>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800241c:	2306      	movs	r3, #6
 800241e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002424:	2302      	movs	r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	4619      	mov	r1, r3
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <GYRO_IO_Init+0x94>)
 8002434:	f001 fdda 	bl	8003fec <HAL_GPIO_Init>

  SPIx_Init();
 8002438:	f7ff fde6 	bl	8002008 <SPIx_Init>
}
 800243c:	bf00      	nop
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	40020800 	.word	0x40020800
 800244c:	40020000 	.word	0x40020000

08002450 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002460:	883b      	ldrh	r3, [r7, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d903      	bls.n	800246e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800246e:	2200      	movs	r2, #0
 8002470:	2102      	movs	r1, #2
 8002472:	480f      	ldr	r0, [pc, #60]	; (80024b0 <GYRO_IO_Write+0x60>)
 8002474:	f001 ff66 	bl	8004344 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fe3c 	bl	80020f8 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002480:	e00a      	b.n	8002498 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fe36 	bl	80020f8 <SPIx_WriteRead>
    NumByteToWrite--;
 800248c:	883b      	ldrh	r3, [r7, #0]
 800248e:	3b01      	subs	r3, #1
 8002490:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3301      	adds	r3, #1
 8002496:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002498:	883b      	ldrh	r3, [r7, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f1      	bne.n	8002482 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800249e:	2201      	movs	r2, #1
 80024a0:	2102      	movs	r1, #2
 80024a2:	4803      	ldr	r0, [pc, #12]	; (80024b0 <GYRO_IO_Write+0x60>)
 80024a4:	f001 ff4e 	bl	8004344 <HAL_GPIO_WritePin>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40020800 	.word	0x40020800

080024b4 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
 80024c0:	4613      	mov	r3, r2
 80024c2:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80024c4:	883b      	ldrh	r3, [r7, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d904      	bls.n	80024d4 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80024d0:	70fb      	strb	r3, [r7, #3]
 80024d2:	e003      	b.n	80024dc <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80024d4:	78fb      	ldrb	r3, [r7, #3]
 80024d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024da:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80024dc:	2200      	movs	r2, #0
 80024de:	2102      	movs	r1, #2
 80024e0:	4810      	ldr	r0, [pc, #64]	; (8002524 <GYRO_IO_Read+0x70>)
 80024e2:	f001 ff2f 	bl	8004344 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80024e6:	78fb      	ldrb	r3, [r7, #3]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fe05 	bl	80020f8 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80024ee:	e00c      	b.n	800250a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7ff fe01 	bl	80020f8 <SPIx_WriteRead>
 80024f6:	4603      	mov	r3, r0
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80024fe:	883b      	ldrh	r3, [r7, #0]
 8002500:	3b01      	subs	r3, #1
 8002502:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3301      	adds	r3, #1
 8002508:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800250a:	883b      	ldrh	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ef      	bne.n	80024f0 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002510:	2201      	movs	r2, #1
 8002512:	2102      	movs	r1, #2
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <GYRO_IO_Read+0x70>)
 8002516:	f001 ff15 	bl	8004344 <HAL_GPIO_WritePin>
}  
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40020800 	.word	0x40020800

08002528 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002532:	2300      	movs	r3, #0
 8002534:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002536:	2300      	movs	r3, #0
 8002538:	703b      	strb	r3, [r7, #0]
 800253a:	2300      	movs	r3, #0
 800253c:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800253e:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <BSP_GYRO_Init+0xc4>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4798      	blx	r3
 8002544:	4603      	mov	r3, r0
 8002546:	2bd3      	cmp	r3, #211	; 0xd3
 8002548:	d005      	beq.n	8002556 <BSP_GYRO_Init+0x2e>
 800254a:	4b28      	ldr	r3, [pc, #160]	; (80025ec <BSP_GYRO_Init+0xc4>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	4798      	blx	r3
 8002550:	4603      	mov	r3, r0
 8002552:	2bd5      	cmp	r3, #213	; 0xd5
 8002554:	d145      	bne.n	80025e2 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <BSP_GYRO_Init+0xc8>)
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <BSP_GYRO_Init+0xc4>)
 800255a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 800255c:	2308      	movs	r3, #8
 800255e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002560:	2300      	movs	r3, #0
 8002562:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002564:	2307      	movs	r3, #7
 8002566:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002568:	2330      	movs	r3, #48	; 0x30
 800256a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 800256c:	2300      	movs	r3, #0
 800256e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002570:	2300      	movs	r3, #0
 8002572:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002574:	2310      	movs	r3, #16
 8002576:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002578:	793a      	ldrb	r2, [r7, #4]
 800257a:	797b      	ldrb	r3, [r7, #5]
 800257c:	4313      	orrs	r3, r2
 800257e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002580:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002582:	4313      	orrs	r3, r2
 8002584:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002586:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002588:	4313      	orrs	r3, r2
 800258a:	b2db      	uxtb	r3, r3
 800258c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800258e:	7a3a      	ldrb	r2, [r7, #8]
 8002590:	7a7b      	ldrb	r3, [r7, #9]
 8002592:	4313      	orrs	r3, r2
 8002594:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002596:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002598:	4313      	orrs	r3, r2
 800259a:	b2db      	uxtb	r3, r3
 800259c:	b29b      	uxth	r3, r3
 800259e:	021b      	lsls	r3, r3, #8
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	89bb      	ldrh	r3, [r7, #12]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80025a8:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <BSP_GYRO_Init+0xc8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	89ba      	ldrh	r2, [r7, #12]
 80025b0:	4610      	mov	r0, r2
 80025b2:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80025b4:	2300      	movs	r3, #0
 80025b6:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80025bc:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80025be:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80025c0:	4313      	orrs	r3, r2
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <BSP_GYRO_Init+0xc8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	89ba      	ldrh	r2, [r7, #12]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	4610      	mov	r0, r2
 80025d2:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <BSP_GYRO_Init+0xc8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	2010      	movs	r0, #16
 80025dc:	4798      	blx	r3

    ret = GYRO_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	2000003c 	.word	0x2000003c
 80025f0:	20000d08 	.word	0x20000d08

080025f4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <BSP_GYRO_GetXYZ+0x24>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <BSP_GYRO_GetXYZ+0x24>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
  }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000d08 	.word	0x20000d08

0800261c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002622:	4a2e      	ldr	r2, [pc, #184]	; (80026dc <BSP_LCD_Init+0xc0>)
 8002624:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002626:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002628:	2209      	movs	r2, #9
 800262a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800262c:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <BSP_LCD_Init+0xbc>)
 800262e:	2201      	movs	r2, #1
 8002630:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002634:	221d      	movs	r2, #29
 8002636:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002638:	4b27      	ldr	r3, [pc, #156]	; (80026d8 <BSP_LCD_Init+0xbc>)
 800263a:	2203      	movs	r2, #3
 800263c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800263e:	4b26      	ldr	r3, [pc, #152]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002640:	f240 120d 	movw	r2, #269	; 0x10d
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002646:	4b24      	ldr	r3, [pc, #144]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002648:	f240 1243 	movw	r2, #323	; 0x143
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002650:	f240 1217 	movw	r2, #279	; 0x117
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002656:	4b20      	ldr	r3, [pc, #128]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002658:	f240 1247 	movw	r2, #327	; 0x147
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800265e:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800266e:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002676:	4b1a      	ldr	r3, [pc, #104]	; (80026e0 <BSP_LCD_Init+0xc4>)
 8002678:	2208      	movs	r2, #8
 800267a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <BSP_LCD_Init+0xc4>)
 800267e:	22c0      	movs	r2, #192	; 0xc0
 8002680:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002682:	4b17      	ldr	r3, [pc, #92]	; (80026e0 <BSP_LCD_Init+0xc4>)
 8002684:	2204      	movs	r2, #4
 8002686:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002688:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <BSP_LCD_Init+0xc4>)
 800268a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800268e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002690:	4813      	ldr	r0, [pc, #76]	; (80026e0 <BSP_LCD_Init+0xc4>)
 8002692:	f004 f87d 	bl	8006790 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <BSP_LCD_Init+0xbc>)
 8002698:	2200      	movs	r2, #0
 800269a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800269c:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <BSP_LCD_Init+0xbc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80026a2:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <BSP_LCD_Init+0xbc>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <BSP_LCD_Init+0xbc>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80026ae:	f000 fb49 	bl	8002d44 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80026b2:	4809      	ldr	r0, [pc, #36]	; (80026d8 <BSP_LCD_Init+0xbc>)
 80026b4:	f001 fe60 	bl	8004378 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <BSP_LCD_Init+0xc8>)
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <BSP_LCD_Init+0xcc>)
 80026bc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <BSP_LCD_Init+0xc8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80026c6:	f000 fd2b 	bl	8003120 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80026ca:	4808      	ldr	r0, [pc, #32]	; (80026ec <BSP_LCD_Init+0xd0>)
 80026cc:	f000 f8ce 	bl	800286c <BSP_LCD_SetFont>

  return LCD_OK;
 80026d0:	2300      	movs	r3, #0
}  
 80026d2:	4618      	mov	r0, r3
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000d0c 	.word	0x20000d0c
 80026dc:	40016800 	.word	0x40016800
 80026e0:	20000df4 	.word	0x20000df4
 80026e4:	20000e40 	.word	0x20000e40
 80026e8:	20000004 	.word	0x20000004
 80026ec:	20000074 	.word	0x20000074

080026f0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <BSP_LCD_GetXSize+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	4798      	blx	r3
 80026fc:	4603      	mov	r3, r0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000e40 	.word	0x20000e40

08002708 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <BSP_LCD_GetYSize+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	4798      	blx	r3
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000e40 	.word	0x20000e40

08002720 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002720:	b580      	push	{r7, lr}
 8002722:	b090      	sub	sp, #64	; 0x40
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002730:	f7ff ffde 	bl	80026f0 <BSP_LCD_GetXSize>
 8002734:	4603      	mov	r3, r0
 8002736:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800273c:	f7ff ffe4 	bl	8002708 <BSP_LCD_GetYSize>
 8002740:	4603      	mov	r3, r0
 8002742:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800274c:	23ff      	movs	r3, #255	; 0xff
 800274e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002766:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800276c:	2307      	movs	r3, #7
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002770:	f7ff ffbe 	bl	80026f0 <BSP_LCD_GetXSize>
 8002774:	4603      	mov	r3, r0
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002778:	f7ff ffc6 	bl	8002708 <BSP_LCD_GetYSize>
 800277c:	4603      	mov	r3, r0
 800277e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	f107 030c 	add.w	r3, r7, #12
 8002786:	4619      	mov	r1, r3
 8002788:	4814      	ldr	r0, [pc, #80]	; (80027dc <BSP_LCD_LayerDefaultInit+0xbc>)
 800278a:	f001 fecf 	bl	800452c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800278e:	88fa      	ldrh	r2, [r7, #6]
 8002790:	4913      	ldr	r1, [pc, #76]	; (80027e0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3304      	adds	r3, #4
 800279e:	f04f 32ff 	mov.w	r2, #4294967295
 80027a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80027a4:	88fa      	ldrh	r2, [r7, #6]
 80027a6:	490e      	ldr	r1, [pc, #56]	; (80027e0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80027a8:	4613      	mov	r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3308      	adds	r3, #8
 80027b4:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <BSP_LCD_LayerDefaultInit+0xc4>)
 80027b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	4909      	ldr	r1, [pc, #36]	; (80027e0 <BSP_LCD_LayerDefaultInit+0xc0>)
 80027bc:	4613      	mov	r3, r2
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80027ca:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80027cc:	4803      	ldr	r0, [pc, #12]	; (80027dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80027ce:	f001 feeb 	bl	80045a8 <HAL_LTDC_EnableDither>
}
 80027d2:	bf00      	nop
 80027d4:	3740      	adds	r7, #64	; 0x40
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000d0c 	.word	0x20000d0c
 80027e0:	20000e28 	.word	0x20000e28
 80027e4:	20000074 	.word	0x20000074

080027e8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80027f0:	4a04      	ldr	r2, [pc, #16]	; (8002804 <BSP_LCD_SelectLayer+0x1c>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000e24 	.word	0x20000e24

08002808 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <BSP_LCD_SetTextColor+0x28>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4907      	ldr	r1, [pc, #28]	; (8002834 <BSP_LCD_SetTextColor+0x2c>)
 8002816:	4613      	mov	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	601a      	str	r2, [r3, #0]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	20000e24 	.word	0x20000e24
 8002834:	20000e28 	.word	0x20000e28

08002838 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <BSP_LCD_SetBackColor+0x2c>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4908      	ldr	r1, [pc, #32]	; (8002868 <BSP_LCD_SetBackColor+0x30>)
 8002846:	4613      	mov	r3, r2
 8002848:	005b      	lsls	r3, r3, #1
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	3304      	adds	r3, #4
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000e24 	.word	0x20000e24
 8002868:	20000e28 	.word	0x20000e28

0800286c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <BSP_LCD_SetFont+0x2c>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4908      	ldr	r1, [pc, #32]	; (800289c <BSP_LCD_SetFont+0x30>)
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	3308      	adds	r3, #8
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	601a      	str	r2, [r3, #0]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000e24 	.word	0x20000e24
 800289c:	20000e28 	.word	0x20000e28

080028a0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <BSP_LCD_GetFont+0x24>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4907      	ldr	r1, [pc, #28]	; (80028c8 <BSP_LCD_GetFont+0x28>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3308      	adds	r3, #8
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000e24 	.word	0x20000e24
 80028c8:	20000e28 	.word	0x20000e28

080028cc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80028cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80028d4:	4b0f      	ldr	r3, [pc, #60]	; (8002914 <BSP_LCD_Clear+0x48>)
 80028d6:	681c      	ldr	r4, [r3, #0]
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <BSP_LCD_Clear+0x48>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <BSP_LCD_Clear+0x4c>)
 80028de:	2134      	movs	r1, #52	; 0x34
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	335c      	adds	r3, #92	; 0x5c
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461e      	mov	r6, r3
 80028ec:	f7ff ff00 	bl	80026f0 <BSP_LCD_GetXSize>
 80028f0:	4605      	mov	r5, r0
 80028f2:	f7ff ff09 	bl	8002708 <BSP_LCD_GetYSize>
 80028f6:	4602      	mov	r2, r0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2300      	movs	r3, #0
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	462a      	mov	r2, r5
 8002904:	4631      	mov	r1, r6
 8002906:	4620      	mov	r0, r4
 8002908:	f000 fbd2 	bl	80030b0 <FillBuffer>
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002914:	20000e24 	.word	0x20000e24
 8002918:	20000d0c 	.word	0x20000d0c

0800291c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
 8002926:	460b      	mov	r3, r1
 8002928:	80bb      	strh	r3, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <BSP_LCD_DisplayChar+0x80>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	491b      	ldr	r1, [pc, #108]	; (80029a0 <BSP_LCD_DisplayChar+0x84>)
 8002934:	4613      	mov	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	3308      	adds	r3, #8
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800294a:	4b14      	ldr	r3, [pc, #80]	; (800299c <BSP_LCD_DisplayChar+0x80>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4c14      	ldr	r4, [pc, #80]	; (80029a0 <BSP_LCD_DisplayChar+0x84>)
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4423      	add	r3, r4
 800295a:	3308      	adds	r3, #8
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002960:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <BSP_LCD_DisplayChar+0x80>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4c0d      	ldr	r4, [pc, #52]	; (80029a0 <BSP_LCD_DisplayChar+0x84>)
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4423      	add	r3, r4
 8002974:	3308      	adds	r3, #8
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	889b      	ldrh	r3, [r3, #4]
 800297a:	3307      	adds	r3, #7
 800297c:	2b00      	cmp	r3, #0
 800297e:	da00      	bge.n	8002982 <BSP_LCD_DisplayChar+0x66>
 8002980:	3307      	adds	r3, #7
 8002982:	10db      	asrs	r3, r3, #3
 8002984:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002988:	18ca      	adds	r2, r1, r3
 800298a:	88b9      	ldrh	r1, [r7, #4]
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fad4 	bl	8002f3c <DrawChar>
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bd90      	pop	{r4, r7, pc}
 800299c:	20000e24 	.word	0x20000e24
 80029a0:	20000e28 	.word	0x20000e28

080029a4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80029a4:	b5b0      	push	{r4, r5, r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60ba      	str	r2, [r7, #8]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	81fb      	strh	r3, [r7, #14]
 80029b2:	460b      	mov	r3, r1
 80029b4:	81bb      	strh	r3, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80029ba:	2301      	movs	r3, #1
 80029bc:	83fb      	strh	r3, [r7, #30]
 80029be:	2300      	movs	r3, #0
 80029c0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80029ce:	e002      	b.n	80029d6 <BSP_LCD_DisplayStringAt+0x32>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	3301      	adds	r3, #1
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	1c5a      	adds	r2, r3, #1
 80029da:	617a      	str	r2, [r7, #20]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f6      	bne.n	80029d0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80029e2:	f7ff fe85 	bl	80026f0 <BSP_LCD_GetXSize>
 80029e6:	4601      	mov	r1, r0
 80029e8:	4b4b      	ldr	r3, [pc, #300]	; (8002b18 <BSP_LCD_DisplayStringAt+0x174>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	484b      	ldr	r0, [pc, #300]	; (8002b1c <BSP_LCD_DisplayStringAt+0x178>)
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4403      	add	r3, r0
 80029f8:	3308      	adds	r3, #8
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	889b      	ldrh	r3, [r3, #4]
 80029fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a02:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d01c      	beq.n	8002a44 <BSP_LCD_DisplayStringAt+0xa0>
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	dc33      	bgt.n	8002a76 <BSP_LCD_DisplayStringAt+0xd2>
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d002      	beq.n	8002a18 <BSP_LCD_DisplayStringAt+0x74>
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d019      	beq.n	8002a4a <BSP_LCD_DisplayStringAt+0xa6>
 8002a16:	e02e      	b.n	8002a76 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	1ad1      	subs	r1, r2, r3
 8002a1e:	4b3e      	ldr	r3, [pc, #248]	; (8002b18 <BSP_LCD_DisplayStringAt+0x174>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	483e      	ldr	r0, [pc, #248]	; (8002b1c <BSP_LCD_DisplayStringAt+0x178>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4403      	add	r3, r0
 8002a2e:	3308      	adds	r3, #8
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	889b      	ldrh	r3, [r3, #4]
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	89fb      	ldrh	r3, [r7, #14]
 8002a3e:	4413      	add	r3, r2
 8002a40:	83fb      	strh	r3, [r7, #30]
      break;
 8002a42:	e01b      	b.n	8002a7c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002a44:	89fb      	ldrh	r3, [r7, #14]
 8002a46:	83fb      	strh	r3, [r7, #30]
      break;
 8002a48:	e018      	b.n	8002a7c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b299      	uxth	r1, r3
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <BSP_LCD_DisplayStringAt+0x174>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4831      	ldr	r0, [pc, #196]	; (8002b1c <BSP_LCD_DisplayStringAt+0x178>)
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4403      	add	r3, r0
 8002a62:	3308      	adds	r3, #8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	889b      	ldrh	r3, [r3, #4]
 8002a68:	fb11 f303 	smulbb	r3, r1, r3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	89fb      	ldrh	r3, [r7, #14]
 8002a70:	4413      	add	r3, r2
 8002a72:	83fb      	strh	r3, [r7, #30]
      break;
 8002a74:	e002      	b.n	8002a7c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002a76:	89fb      	ldrh	r3, [r7, #14]
 8002a78:	83fb      	strh	r3, [r7, #30]
      break;
 8002a7a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a7c:	e01a      	b.n	8002ab4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	89b9      	ldrh	r1, [r7, #12]
 8002a84:	8bfb      	ldrh	r3, [r7, #30]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ff48 	bl	800291c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <BSP_LCD_DisplayStringAt+0x174>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4922      	ldr	r1, [pc, #136]	; (8002b1c <BSP_LCD_DisplayStringAt+0x178>)
 8002a92:	4613      	mov	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	889a      	ldrh	r2, [r3, #4]
 8002aa2:	8bfb      	ldrh	r3, [r7, #30]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]
    i++;
 8002aae:	8bbb      	ldrh	r3, [r7, #28]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf14      	ite	ne
 8002abc:	2301      	movne	r3, #1
 8002abe:	2300      	moveq	r3, #0
 8002ac0:	b2dc      	uxtb	r4, r3
 8002ac2:	f7ff fe15 	bl	80026f0 <BSP_LCD_GetXSize>
 8002ac6:	8bb9      	ldrh	r1, [r7, #28]
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <BSP_LCD_DisplayStringAt+0x174>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4d13      	ldr	r5, [pc, #76]	; (8002b1c <BSP_LCD_DisplayStringAt+0x178>)
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	442b      	add	r3, r5
 8002ad8:	3308      	adds	r3, #8
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	889b      	ldrh	r3, [r3, #4]
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	1ac3      	subs	r3, r0, r3
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <BSP_LCD_DisplayStringAt+0x174>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	480c      	ldr	r0, [pc, #48]	; (8002b1c <BSP_LCD_DisplayStringAt+0x178>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4403      	add	r3, r0
 8002af6:	3308      	adds	r3, #8
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	889b      	ldrh	r3, [r3, #4]
 8002afc:	4299      	cmp	r1, r3
 8002afe:	bf2c      	ite	cs
 8002b00:	2301      	movcs	r3, #1
 8002b02:	2300      	movcc	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	4023      	ands	r3, r4
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1b7      	bne.n	8002a7e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bdb0      	pop	{r4, r5, r7, pc}
 8002b18:	20000e24 	.word	0x20000e24
 8002b1c:	20000e28 	.word	0x20000e28

08002b20 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	6039      	str	r1, [r7, #0]
 8002b2a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002b2c:	f7ff feb8 	bl	80028a0 <BSP_LCD_GetFont>
 8002b30:	4603      	mov	r3, r0
 8002b32:	88db      	ldrh	r3, [r3, #6]
 8002b34:	88fa      	ldrh	r2, [r7, #6]
 8002b36:	fb12 f303 	smulbb	r3, r2, r3
 8002b3a:	b299      	uxth	r1, r3
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff ff2f 	bl	80029a4 <BSP_LCD_DisplayStringAt>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	80fb      	strh	r3, [r7, #6]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	80bb      	strh	r3, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002b62:	887b      	ldrh	r3, [r7, #2]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	f1c3 0303 	rsb	r3, r3, #3
 8002b6a:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002b70:	887b      	ldrh	r3, [r7, #2]
 8002b72:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002b74:	e0c7      	b.n	8002d06 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	b298      	uxth	r0, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	88ba      	ldrh	r2, [r7, #4]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	4b64      	ldr	r3, [pc, #400]	; (8002d1c <BSP_LCD_DrawCircle+0x1cc>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4c64      	ldr	r4, [pc, #400]	; (8002d20 <BSP_LCD_DrawCircle+0x1d0>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4423      	add	r3, r4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	f000 f9a7 	bl	8002ef0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	88fa      	ldrh	r2, [r7, #6]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b298      	uxth	r0, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	88ba      	ldrh	r2, [r7, #4]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	b299      	uxth	r1, r3
 8002bb6:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <BSP_LCD_DrawCircle+0x1cc>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	4c59      	ldr	r4, [pc, #356]	; (8002d20 <BSP_LCD_DrawCircle+0x1d0>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4423      	add	r3, r4
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f000 f991 	bl	8002ef0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b298      	uxth	r0, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	88ba      	ldrh	r2, [r7, #4]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	b299      	uxth	r1, r3
 8002be2:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <BSP_LCD_DrawCircle+0x1cc>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4c4e      	ldr	r4, [pc, #312]	; (8002d20 <BSP_LCD_DrawCircle+0x1d0>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4423      	add	r3, r4
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	f000 f97b 	bl	8002ef0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	b298      	uxth	r0, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	88ba      	ldrh	r2, [r7, #4]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b299      	uxth	r1, r3
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <BSP_LCD_DrawCircle+0x1cc>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4c43      	ldr	r4, [pc, #268]	; (8002d20 <BSP_LCD_DrawCircle+0x1d0>)
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4423      	add	r3, r4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	f000 f965 	bl	8002ef0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b298      	uxth	r0, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	88bb      	ldrh	r3, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	b299      	uxth	r1, r3
 8002c3a:	4b38      	ldr	r3, [pc, #224]	; (8002d1c <BSP_LCD_DrawCircle+0x1cc>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4c38      	ldr	r4, [pc, #224]	; (8002d20 <BSP_LCD_DrawCircle+0x1d0>)
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4423      	add	r3, r4
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f000 f94f 	bl	8002ef0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	b298      	uxth	r0, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	88bb      	ldrh	r3, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	b299      	uxth	r1, r3
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <BSP_LCD_DrawCircle+0x1cc>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4c2d      	ldr	r4, [pc, #180]	; (8002d20 <BSP_LCD_DrawCircle+0x1d0>)
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4423      	add	r3, r4
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f000 f939 	bl	8002ef0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	4413      	add	r3, r2
 8002c86:	b298      	uxth	r0, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	88bb      	ldrh	r3, [r7, #4]
 8002c8e:	4413      	add	r3, r2
 8002c90:	b299      	uxth	r1, r3
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <BSP_LCD_DrawCircle+0x1cc>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4c22      	ldr	r4, [pc, #136]	; (8002d20 <BSP_LCD_DrawCircle+0x1d0>)
 8002c98:	4613      	mov	r3, r2
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4423      	add	r3, r4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f000 f923 	bl	8002ef0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	88fa      	ldrh	r2, [r7, #6]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	b298      	uxth	r0, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	88bb      	ldrh	r3, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	b299      	uxth	r1, r3
 8002cbe:	4b17      	ldr	r3, [pc, #92]	; (8002d1c <BSP_LCD_DrawCircle+0x1cc>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4c17      	ldr	r4, [pc, #92]	; (8002d20 <BSP_LCD_DrawCircle+0x1d0>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4423      	add	r3, r4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f000 f90d 	bl	8002ef0 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da06      	bge.n	8002cea <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	009a      	lsls	r2, r3, #2
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3306      	adds	r3, #6
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e00a      	b.n	8002d00 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	009a      	lsls	r2, r3, #2
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	330a      	adds	r3, #10
 8002cf8:	617b      	str	r3, [r7, #20]
      cury--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	3301      	adds	r3, #1
 8002d04:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	f67f af33 	bls.w	8002b76 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	371c      	adds	r7, #28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000e24 	.word	0x20000e24
 8002d20:	20000e28 	.word	0x20000e28

08002d24 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <BSP_LCD_DisplayOn+0x1c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <BSP_LCD_DisplayOn+0x1c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4798      	blx	r3
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000e40 	.word	0x20000e40

08002d44 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08e      	sub	sp, #56	; 0x38
 8002d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	623b      	str	r3, [r7, #32]
 8002d4e:	4b61      	ldr	r3, [pc, #388]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a60      	ldr	r2, [pc, #384]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a59      	ldr	r2, [pc, #356]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b57      	ldr	r3, [pc, #348]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d7e:	61fb      	str	r3, [r7, #28]
 8002d80:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6313      	str	r3, [r2, #48]	; 0x30
 8002d92:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	61bb      	str	r3, [r7, #24]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a4b      	ldr	r2, [pc, #300]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b49      	ldr	r3, [pc, #292]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	4b45      	ldr	r3, [pc, #276]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a44      	ldr	r2, [pc, #272]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	4b3e      	ldr	r3, [pc, #248]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a3d      	ldr	r2, [pc, #244]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002de0:	f043 0308 	orr.w	r3, r3, #8
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a36      	ldr	r2, [pc, #216]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002dfc:	f043 0320 	orr.w	r3, r3, #32
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b34      	ldr	r3, [pc, #208]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ed4 <BSP_LCD_MspInit+0x190>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e26:	607b      	str	r3, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002e2a:	f641 0358 	movw	r3, #6232	; 0x1858
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002e3c:	230e      	movs	r3, #14
 8002e3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e44:	4619      	mov	r1, r3
 8002e46:	4824      	ldr	r0, [pc, #144]	; (8002ed8 <BSP_LCD_MspInit+0x194>)
 8002e48:	f001 f8d0 	bl	8003fec <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002e4c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e56:	4619      	mov	r1, r3
 8002e58:	4820      	ldr	r0, [pc, #128]	; (8002edc <BSP_LCD_MspInit+0x198>)
 8002e5a:	f001 f8c7 	bl	8003fec <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002e5e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e68:	4619      	mov	r1, r3
 8002e6a:	481d      	ldr	r0, [pc, #116]	; (8002ee0 <BSP_LCD_MspInit+0x19c>)
 8002e6c:	f001 f8be 	bl	8003fec <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002e70:	2348      	movs	r3, #72	; 0x48
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e78:	4619      	mov	r1, r3
 8002e7a:	481a      	ldr	r0, [pc, #104]	; (8002ee4 <BSP_LCD_MspInit+0x1a0>)
 8002e7c:	f001 f8b6 	bl	8003fec <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002e80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4816      	ldr	r0, [pc, #88]	; (8002ee8 <BSP_LCD_MspInit+0x1a4>)
 8002e8e:	f001 f8ad 	bl	8003fec <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002e92:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4813      	ldr	r0, [pc, #76]	; (8002eec <BSP_LCD_MspInit+0x1a8>)
 8002ea0:	f001 f8a4 	bl	8003fec <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	480a      	ldr	r0, [pc, #40]	; (8002edc <BSP_LCD_MspInit+0x198>)
 8002eb4:	f001 f89a 	bl	8003fec <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002eb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4809      	ldr	r0, [pc, #36]	; (8002eec <BSP_LCD_MspInit+0x1a8>)
 8002ec6:	f001 f891 	bl	8003fec <HAL_GPIO_Init>
}
 8002eca:	bf00      	nop
 8002ecc:	3738      	adds	r7, #56	; 0x38
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40020800 	.word	0x40020800
 8002ee4:	40020c00 	.word	0x40020c00
 8002ee8:	40021400 	.word	0x40021400
 8002eec:	40021800 	.word	0x40021800

08002ef0 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	603a      	str	r2, [r7, #0]
 8002efa:	80fb      	strh	r3, [r7, #6]
 8002efc:	460b      	mov	r3, r1
 8002efe:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <BSP_LCD_DrawPixel+0x44>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0c      	ldr	r2, [pc, #48]	; (8002f38 <BSP_LCD_DrawPixel+0x48>)
 8002f06:	2134      	movs	r1, #52	; 0x34
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	335c      	adds	r3, #92	; 0x5c
 8002f10:	681c      	ldr	r4, [r3, #0]
 8002f12:	88bd      	ldrh	r5, [r7, #4]
 8002f14:	f7ff fbec 	bl	80026f0 <BSP_LCD_GetXSize>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	fb03 f205 	mul.w	r2, r3, r5
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4423      	add	r3, r4
 8002f26:	461a      	mov	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6013      	str	r3, [r2, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bdb0      	pop	{r4, r5, r7, pc}
 8002f34:	20000e24 	.word	0x20000e24
 8002f38:	20000d0c 	.word	0x20000d0c

08002f3c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	603a      	str	r2, [r7, #0]
 8002f46:	80fb      	strh	r3, [r7, #6]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	2300      	movs	r3, #0
 8002f52:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002f58:	4b53      	ldr	r3, [pc, #332]	; (80030a8 <DrawChar+0x16c>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4953      	ldr	r1, [pc, #332]	; (80030ac <DrawChar+0x170>)
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3308      	adds	r3, #8
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	88db      	ldrh	r3, [r3, #6]
 8002f6e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002f70:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <DrawChar+0x16c>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	494d      	ldr	r1, [pc, #308]	; (80030ac <DrawChar+0x170>)
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3308      	adds	r3, #8
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	889b      	ldrh	r3, [r3, #4]
 8002f86:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002f88:	8a3b      	ldrh	r3, [r7, #16]
 8002f8a:	3307      	adds	r3, #7
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da00      	bge.n	8002f92 <DrawChar+0x56>
 8002f90:	3307      	adds	r3, #7
 8002f92:	10db      	asrs	r3, r3, #3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8a3b      	ldrh	r3, [r7, #16]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e076      	b.n	8003096 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002fa8:	8a3b      	ldrh	r3, [r7, #16]
 8002faa:	3307      	adds	r3, #7
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	da00      	bge.n	8002fb2 <DrawChar+0x76>
 8002fb0:	3307      	adds	r3, #7
 8002fb2:	10db      	asrs	r3, r3, #3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8002fc2:	8a3b      	ldrh	r3, [r7, #16]
 8002fc4:	3307      	adds	r3, #7
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	da00      	bge.n	8002fcc <DrawChar+0x90>
 8002fca:	3307      	adds	r3, #7
 8002fcc:	10db      	asrs	r3, r3, #3
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d002      	beq.n	8002fd8 <DrawChar+0x9c>
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d004      	beq.n	8002fe0 <DrawChar+0xa4>
 8002fd6:	e00c      	b.n	8002ff2 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	617b      	str	r3, [r7, #20]
      break;
 8002fde:	e016      	b.n	800300e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	3201      	adds	r2, #1
 8002fea:	7812      	ldrb	r2, [r2, #0]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
      break;
 8002ff0:	e00d      	b.n	800300e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	041a      	lsls	r2, r3, #16
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	4313      	orrs	r3, r2
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	3202      	adds	r2, #2
 8003006:	7812      	ldrb	r2, [r2, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
      break;
 800300c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e036      	b.n	8003082 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003014:	8a3a      	ldrh	r2, [r7, #16]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	1ad2      	subs	r2, r2, r3
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	4413      	add	r3, r2
 800301e:	3b01      	subs	r3, #1
 8003020:	2201      	movs	r2, #1
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	461a      	mov	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d012      	beq.n	8003056 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	b29a      	uxth	r2, r3
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	4413      	add	r3, r2
 8003038:	b298      	uxth	r0, r3
 800303a:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <DrawChar+0x16c>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	491b      	ldr	r1, [pc, #108]	; (80030ac <DrawChar+0x170>)
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	88bb      	ldrh	r3, [r7, #4]
 800304e:	4619      	mov	r1, r3
 8003050:	f7ff ff4e 	bl	8002ef0 <BSP_LCD_DrawPixel>
 8003054:	e012      	b.n	800307c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	b29a      	uxth	r2, r3
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	4413      	add	r3, r2
 800305e:	b298      	uxth	r0, r3
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <DrawChar+0x16c>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4911      	ldr	r1, [pc, #68]	; (80030ac <DrawChar+0x170>)
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	440b      	add	r3, r1
 8003070:	3304      	adds	r3, #4
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	88bb      	ldrh	r3, [r7, #4]
 8003076:	4619      	mov	r1, r3
 8003078:	f7ff ff3a 	bl	8002ef0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	3301      	adds	r3, #1
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	8a3b      	ldrh	r3, [r7, #16]
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	429a      	cmp	r2, r3
 8003088:	d3c4      	bcc.n	8003014 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800308a:	88bb      	ldrh	r3, [r7, #4]
 800308c:	3301      	adds	r3, #1
 800308e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
 8003096:	8a7b      	ldrh	r3, [r7, #18]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	429a      	cmp	r2, r3
 800309c:	d384      	bcc.n	8002fa8 <DrawChar+0x6c>
  }
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20000e24 	.word	0x20000e24
 80030ac:	20000e28 	.word	0x20000e28

080030b0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <FillBuffer+0x68>)
 80030c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030c4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <FillBuffer+0x68>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80030cc:	4a12      	ldr	r2, [pc, #72]	; (8003118 <FillBuffer+0x68>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <FillBuffer+0x68>)
 80030d4:	4a11      	ldr	r2, [pc, #68]	; (800311c <FillBuffer+0x6c>)
 80030d6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80030d8:	480f      	ldr	r0, [pc, #60]	; (8003118 <FillBuffer+0x68>)
 80030da:	f000 fcf1 	bl	8003ac0 <HAL_DMA2D_Init>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d115      	bne.n	8003110 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80030e4:	68f9      	ldr	r1, [r7, #12]
 80030e6:	480c      	ldr	r0, [pc, #48]	; (8003118 <FillBuffer+0x68>)
 80030e8:	f000 fe52 	bl	8003d90 <HAL_DMA2D_ConfigLayer>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10e      	bne.n	8003110 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69f9      	ldr	r1, [r7, #28]
 80030fc:	4806      	ldr	r0, [pc, #24]	; (8003118 <FillBuffer+0x68>)
 80030fe:	f000 fd32 	bl	8003b66 <HAL_DMA2D_Start>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d103      	bne.n	8003110 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003108:	210a      	movs	r1, #10
 800310a:	4803      	ldr	r0, [pc, #12]	; (8003118 <FillBuffer+0x68>)
 800310c:	f000 fd56 	bl	8003bbc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000db4 	.word	0x20000db4
 800311c:	4002b000 	.word	0x4002b000

08003120 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003124:	4b29      	ldr	r3, [pc, #164]	; (80031cc <BSP_SDRAM_Init+0xac>)
 8003126:	4a2a      	ldr	r2, [pc, #168]	; (80031d0 <BSP_SDRAM_Init+0xb0>)
 8003128:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800312a:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <BSP_SDRAM_Init+0xb4>)
 800312c:	2202      	movs	r2, #2
 800312e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003130:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <BSP_SDRAM_Init+0xb4>)
 8003132:	2207      	movs	r2, #7
 8003134:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003136:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <BSP_SDRAM_Init+0xb4>)
 8003138:	2204      	movs	r2, #4
 800313a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <BSP_SDRAM_Init+0xb4>)
 800313e:	2207      	movs	r2, #7
 8003140:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003142:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <BSP_SDRAM_Init+0xb4>)
 8003144:	2202      	movs	r2, #2
 8003146:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <BSP_SDRAM_Init+0xb4>)
 800314a:	2202      	movs	r2, #2
 800314c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <BSP_SDRAM_Init+0xb4>)
 8003150:	2202      	movs	r2, #2
 8003152:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <BSP_SDRAM_Init+0xac>)
 8003156:	2201      	movs	r2, #1
 8003158:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800315a:	4b1c      	ldr	r3, [pc, #112]	; (80031cc <BSP_SDRAM_Init+0xac>)
 800315c:	2200      	movs	r2, #0
 800315e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003160:	4b1a      	ldr	r3, [pc, #104]	; (80031cc <BSP_SDRAM_Init+0xac>)
 8003162:	2204      	movs	r2, #4
 8003164:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <BSP_SDRAM_Init+0xac>)
 8003168:	2210      	movs	r2, #16
 800316a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <BSP_SDRAM_Init+0xac>)
 800316e:	2240      	movs	r2, #64	; 0x40
 8003170:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003172:	4b16      	ldr	r3, [pc, #88]	; (80031cc <BSP_SDRAM_Init+0xac>)
 8003174:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003178:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800317a:	4b14      	ldr	r3, [pc, #80]	; (80031cc <BSP_SDRAM_Init+0xac>)
 800317c:	2200      	movs	r2, #0
 800317e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <BSP_SDRAM_Init+0xac>)
 8003182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003186:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003188:	4b10      	ldr	r3, [pc, #64]	; (80031cc <BSP_SDRAM_Init+0xac>)
 800318a:	2200      	movs	r2, #0
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <BSP_SDRAM_Init+0xac>)
 8003190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003196:	2100      	movs	r1, #0
 8003198:	480c      	ldr	r0, [pc, #48]	; (80031cc <BSP_SDRAM_Init+0xac>)
 800319a:	f000 f87f 	bl	800329c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800319e:	490d      	ldr	r1, [pc, #52]	; (80031d4 <BSP_SDRAM_Init+0xb4>)
 80031a0:	480a      	ldr	r0, [pc, #40]	; (80031cc <BSP_SDRAM_Init+0xac>)
 80031a2:	f003 fcb5 	bl	8006b10 <HAL_SDRAM_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80031ac:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <BSP_SDRAM_Init+0xb8>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e002      	b.n	80031ba <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <BSP_SDRAM_Init+0xb8>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80031ba:	f240 506a 	movw	r0, #1386	; 0x56a
 80031be:	f000 f80d 	bl	80031dc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <BSP_SDRAM_Init+0xb8>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000e44 	.word	0x20000e44
 80031d0:	a0000140 	.word	0xa0000140
 80031d4:	20000e78 	.word	0x20000e78
 80031d8:	2000007c 	.word	0x2000007c

080031dc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80031ee:	4b29      	ldr	r3, [pc, #164]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031f0:	2208      	movs	r2, #8
 80031f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031f6:	2201      	movs	r2, #1
 80031f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003204:	4923      	ldr	r1, [pc, #140]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003206:	4824      	ldr	r0, [pc, #144]	; (8003298 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003208:	f003 fcc0 	bl	8006b8c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800320c:	2001      	movs	r0, #1
 800320e:	f000 f993 	bl	8003538 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003214:	2202      	movs	r2, #2
 8003216:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003218:	4b1e      	ldr	r3, [pc, #120]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800321a:	2208      	movs	r2, #8
 800321c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800321e:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003220:	2201      	movs	r2, #1
 8003222:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003226:	2200      	movs	r2, #0
 8003228:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800322a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800322e:	4919      	ldr	r1, [pc, #100]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003230:	4819      	ldr	r0, [pc, #100]	; (8003298 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003232:	f003 fcab 	bl	8006b8c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003238:	2203      	movs	r2, #3
 800323a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800323e:	2208      	movs	r2, #8
 8003240:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003244:	2204      	movs	r2, #4
 8003246:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800324e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003252:	4910      	ldr	r1, [pc, #64]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003254:	4810      	ldr	r0, [pc, #64]	; (8003298 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003256:	f003 fc99 	bl	8006b8c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800325a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800325e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003262:	2204      	movs	r2, #4
 8003264:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003268:	2208      	movs	r2, #8
 800326a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800326e:	2201      	movs	r2, #1
 8003270:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	4a07      	ldr	r2, [pc, #28]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003276:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003278:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800327c:	4905      	ldr	r1, [pc, #20]	; (8003294 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800327e:	4806      	ldr	r0, [pc, #24]	; (8003298 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003280:	f003 fc84 	bl	8006b8c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4804      	ldr	r0, [pc, #16]	; (8003298 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003288:	f003 fcb5 	bl	8006bf6 <HAL_SDRAM_ProgramRefreshRate>
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000e94 	.word	0x20000e94
 8003298:	20000e44 	.word	0x20000e44

0800329c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b090      	sub	sp, #64	; 0x40
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80ec 	beq.w	8003486 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b2:	4b77      	ldr	r3, [pc, #476]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	4a76      	ldr	r2, [pc, #472]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	6393      	str	r3, [r2, #56]	; 0x38
 80032be:	4b74      	ldr	r3, [pc, #464]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
 80032ce:	4b70      	ldr	r3, [pc, #448]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	4a6f      	ldr	r2, [pc, #444]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032d8:	6313      	str	r3, [r2, #48]	; 0x30
 80032da:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	4b69      	ldr	r3, [pc, #420]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a68      	ldr	r2, [pc, #416]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032f0:	f043 0302 	orr.w	r3, r3, #2
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b66      	ldr	r3, [pc, #408]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	4b62      	ldr	r3, [pc, #392]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a61      	ldr	r2, [pc, #388]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 800330c:	f043 0304 	orr.w	r3, r3, #4
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b5f      	ldr	r3, [pc, #380]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	4b5b      	ldr	r3, [pc, #364]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a5a      	ldr	r2, [pc, #360]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b58      	ldr	r3, [pc, #352]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	61bb      	str	r3, [r7, #24]
 8003338:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	4b54      	ldr	r3, [pc, #336]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a53      	ldr	r2, [pc, #332]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003344:	f043 0310 	orr.w	r3, r3, #16
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b51      	ldr	r3, [pc, #324]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a4c      	ldr	r2, [pc, #304]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003360:	f043 0320 	orr.w	r3, r3, #32
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	613b      	str	r3, [r7, #16]
 8003370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b46      	ldr	r3, [pc, #280]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a45      	ldr	r2, [pc, #276]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 800337c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b43      	ldr	r3, [pc, #268]	; (8003490 <BSP_SDRAM_MspInit+0x1f4>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800338e:	2302      	movs	r3, #2
 8003390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003392:	2302      	movs	r3, #2
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800339a:	230c      	movs	r3, #12
 800339c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800339e:	2360      	movs	r3, #96	; 0x60
 80033a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80033a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033a6:	4619      	mov	r1, r3
 80033a8:	483a      	ldr	r0, [pc, #232]	; (8003494 <BSP_SDRAM_MspInit+0x1f8>)
 80033aa:	f000 fe1f 	bl	8003fec <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80033ae:	2301      	movs	r3, #1
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80033b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b6:	4619      	mov	r1, r3
 80033b8:	4837      	ldr	r0, [pc, #220]	; (8003498 <BSP_SDRAM_MspInit+0x1fc>)
 80033ba:	f000 fe17 	bl	8003fec <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80033be:	f24c 7303 	movw	r3, #50947	; 0xc703
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80033c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c8:	4619      	mov	r1, r3
 80033ca:	4834      	ldr	r0, [pc, #208]	; (800349c <BSP_SDRAM_MspInit+0x200>)
 80033cc:	f000 fe0e 	bl	8003fec <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80033d0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80033d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033da:	4619      	mov	r1, r3
 80033dc:	4830      	ldr	r0, [pc, #192]	; (80034a0 <BSP_SDRAM_MspInit+0x204>)
 80033de:	f000 fe05 	bl	8003fec <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80033e2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80033e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ec:	4619      	mov	r1, r3
 80033ee:	482d      	ldr	r0, [pc, #180]	; (80034a4 <BSP_SDRAM_MspInit+0x208>)
 80033f0:	f000 fdfc 	bl	8003fec <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80033f4:	f248 1333 	movw	r3, #33075	; 0x8133
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80033fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033fe:	4619      	mov	r1, r3
 8003400:	4829      	ldr	r0, [pc, #164]	; (80034a8 <BSP_SDRAM_MspInit+0x20c>)
 8003402:	f000 fdf3 	bl	8003fec <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003406:	4b29      	ldr	r3, [pc, #164]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003408:	2200      	movs	r2, #0
 800340a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003412:	4b26      	ldr	r3, [pc, #152]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003418:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800341a:	4b24      	ldr	r3, [pc, #144]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 800341c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003420:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003422:	4b22      	ldr	r3, [pc, #136]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003424:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003428:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 800342c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003430:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003432:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003434:	2200      	movs	r2, #0
 8003436:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003438:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 800343a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800343e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003446:	4b19      	ldr	r3, [pc, #100]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003448:	2203      	movs	r2, #3
 800344a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800344c:	4b17      	ldr	r3, [pc, #92]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 800344e:	2200      	movs	r2, #0
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003452:	4b16      	ldr	r3, [pc, #88]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 800345a:	4a15      	ldr	r2, [pc, #84]	; (80034b0 <BSP_SDRAM_MspInit+0x214>)
 800345c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a12      	ldr	r2, [pc, #72]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
 8003464:	4a11      	ldr	r2, [pc, #68]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800346a:	4810      	ldr	r0, [pc, #64]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 800346c:	f000 fa18 	bl	80038a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003470:	480e      	ldr	r0, [pc, #56]	; (80034ac <BSP_SDRAM_MspInit+0x210>)
 8003472:	f000 f967 	bl	8003744 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	210f      	movs	r1, #15
 800347a:	2038      	movs	r0, #56	; 0x38
 800347c:	f000 f938 	bl	80036f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003480:	2038      	movs	r0, #56	; 0x38
 8003482:	f000 f951 	bl	8003728 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003486:	bf00      	nop
 8003488:	3740      	adds	r7, #64	; 0x40
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	40020400 	.word	0x40020400
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40021400 	.word	0x40021400
 80034a8:	40021800 	.word	0x40021800
 80034ac:	20000ea4 	.word	0x20000ea4
 80034b0:	40026410 	.word	0x40026410

080034b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_Init+0x40>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0d      	ldr	r2, [pc, #52]	; (80034f4 <HAL_Init+0x40>)
 80034be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <HAL_Init+0x40>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <HAL_Init+0x40>)
 80034ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <HAL_Init+0x40>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <HAL_Init+0x40>)
 80034d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034dc:	2003      	movs	r0, #3
 80034de:	f000 f8fc 	bl	80036da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034e2:	200f      	movs	r0, #15
 80034e4:	f7fe f8e0 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e8:	f7fe f8b2 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023c00 	.word	0x40023c00

080034f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034fc:	4b06      	ldr	r3, [pc, #24]	; (8003518 <HAL_IncTick+0x20>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	461a      	mov	r2, r3
 8003502:	4b06      	ldr	r3, [pc, #24]	; (800351c <HAL_IncTick+0x24>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4413      	add	r3, r2
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_IncTick+0x24>)
 800350a:	6013      	str	r3, [r2, #0]
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000084 	.word	0x20000084
 800351c:	20000f04 	.word	0x20000f04

08003520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return uwTick;
 8003524:	4b03      	ldr	r3, [pc, #12]	; (8003534 <HAL_GetTick+0x14>)
 8003526:	681b      	ldr	r3, [r3, #0]
}
 8003528:	4618      	mov	r0, r3
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000f04 	.word	0x20000f04

08003538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003540:	f7ff ffee 	bl	8003520 <HAL_GetTick>
 8003544:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d005      	beq.n	800355e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <HAL_Delay+0x44>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4413      	add	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800355e:	bf00      	nop
 8003560:	f7ff ffde 	bl	8003520 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	429a      	cmp	r2, r3
 800356e:	d8f7      	bhi.n	8003560 <HAL_Delay+0x28>
  {
  }
}
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000084 	.word	0x20000084

08003580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <__NVIC_SetPriorityGrouping+0x44>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	60d3      	str	r3, [r2, #12]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035cc:	4b04      	ldr	r3, [pc, #16]	; (80035e0 <__NVIC_GetPriorityGrouping+0x18>)
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	f003 0307 	and.w	r3, r3, #7
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	db0b      	blt.n	800360e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	f003 021f 	and.w	r2, r3, #31
 80035fc:	4907      	ldr	r1, [pc, #28]	; (800361c <__NVIC_EnableIRQ+0x38>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2001      	movs	r0, #1
 8003606:	fa00 f202 	lsl.w	r2, r0, r2
 800360a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0a      	blt.n	800364a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <__NVIC_SetPriority+0x4c>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	440b      	add	r3, r1
 8003644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003648:	e00a      	b.n	8003660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4908      	ldr	r1, [pc, #32]	; (8003670 <__NVIC_SetPriority+0x50>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3b04      	subs	r3, #4
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	440b      	add	r3, r1
 800365e:	761a      	strb	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f1c3 0307 	rsb	r3, r3, #7
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf28      	it	cs
 8003692:	2304      	movcs	r3, #4
 8003694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3304      	adds	r3, #4
 800369a:	2b06      	cmp	r3, #6
 800369c:	d902      	bls.n	80036a4 <NVIC_EncodePriority+0x30>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	e000      	b.n	80036a6 <NVIC_EncodePriority+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036bc:	f04f 31ff 	mov.w	r1, #4294967295
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43d9      	mvns	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	4313      	orrs	r3, r2
         );
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff4c 	bl	8003580 <__NVIC_SetPriorityGrouping>
}
 80036e8:	bf00      	nop
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003702:	f7ff ff61 	bl	80035c8 <__NVIC_GetPriorityGrouping>
 8003706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	6978      	ldr	r0, [r7, #20]
 800370e:	f7ff ffb1 	bl	8003674 <NVIC_EncodePriority>
 8003712:	4602      	mov	r2, r0
 8003714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff ff80 	bl	8003620 <__NVIC_SetPriority>
}
 8003720:	bf00      	nop
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff54 	bl	80035e4 <__NVIC_EnableIRQ>
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003750:	f7ff fee6 	bl	8003520 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e099      	b.n	8003894 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0201 	bic.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003780:	e00f      	b.n	80037a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003782:	f7ff fecd 	bl	8003520 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b05      	cmp	r3, #5
 800378e:	d908      	bls.n	80037a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e078      	b.n	8003894 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e8      	bne.n	8003782 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4b38      	ldr	r3, [pc, #224]	; (800389c <HAL_DMA_Init+0x158>)
 80037bc:	4013      	ands	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d107      	bne.n	800380c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003804:	4313      	orrs	r3, r2
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b04      	cmp	r3, #4
 8003834:	d117      	bne.n	8003866 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4313      	orrs	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00e      	beq.n	8003866 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f8bd 	bl	80039c8 <DMA_CheckFifoParam>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d008      	beq.n	8003866 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003862:	2301      	movs	r3, #1
 8003864:	e016      	b.n	8003894 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f874 	bl	800395c <DMA_CalcBaseAndBitshift>
 8003874:	4603      	mov	r3, r0
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	223f      	movs	r2, #63	; 0x3f
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	f010803f 	.word	0xf010803f

080038a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e050      	b.n	8003954 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d101      	bne.n	80038c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80038be:	2302      	movs	r3, #2
 80038c0:	e048      	b.n	8003954 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2221      	movs	r2, #33	; 0x21
 8003900:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f82a 	bl	800395c <DMA_CalcBaseAndBitshift>
 8003908:	4603      	mov	r3, r0
 800390a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	223f      	movs	r2, #63	; 0x3f
 8003936:	409a      	lsls	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	3b10      	subs	r3, #16
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <DMA_CalcBaseAndBitshift+0x64>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003976:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b03      	cmp	r3, #3
 8003988:	d909      	bls.n	800399e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	1d1a      	adds	r2, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	659a      	str	r2, [r3, #88]	; 0x58
 800399c:	e007      	b.n	80039ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039a6:	f023 0303 	bic.w	r3, r3, #3
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	aaaaaaab 	.word	0xaaaaaaab
 80039c4:	080115c4 	.word	0x080115c4

080039c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d11f      	bne.n	8003a22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d856      	bhi.n	8003a96 <DMA_CheckFifoParam+0xce>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <DMA_CheckFifoParam+0x28>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a01 	.word	0x08003a01
 80039f4:	08003a13 	.word	0x08003a13
 80039f8:	08003a01 	.word	0x08003a01
 80039fc:	08003a97 	.word	0x08003a97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d046      	beq.n	8003a9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a10:	e043      	b.n	8003a9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a1a:	d140      	bne.n	8003a9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a20:	e03d      	b.n	8003a9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2a:	d121      	bne.n	8003a70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d837      	bhi.n	8003aa2 <DMA_CheckFifoParam+0xda>
 8003a32:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <DMA_CheckFifoParam+0x70>)
 8003a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a38:	08003a49 	.word	0x08003a49
 8003a3c:	08003a4f 	.word	0x08003a4f
 8003a40:	08003a49 	.word	0x08003a49
 8003a44:	08003a61 	.word	0x08003a61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4c:	e030      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d025      	beq.n	8003aa6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5e:	e022      	b.n	8003aa6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a68:	d11f      	bne.n	8003aaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a6e:	e01c      	b.n	8003aaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d903      	bls.n	8003a7e <DMA_CheckFifoParam+0xb6>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b03      	cmp	r3, #3
 8003a7a:	d003      	beq.n	8003a84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a7c:	e018      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      break;
 8003a82:	e015      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00e      	beq.n	8003aae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      break;
 8003a94:	e00b      	b.n	8003aae <DMA_CheckFifoParam+0xe6>
      break;
 8003a96:	bf00      	nop
 8003a98:	e00a      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e008      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e006      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e004      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aae:	bf00      	nop
    }
  } 
  
  return status; 
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop

08003ac0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e03b      	b.n	8003b4a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f833 	bl	8003b52 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b10:	f023 0107 	bic.w	r1, r3, #7
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b2a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	68d1      	ldr	r1, [r2, #12]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af02      	add	r7, sp, #8
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_DMA2D_Start+0x1c>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e018      	b.n	8003bb4 <HAL_DMA2D_Start+0x4e>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	68b9      	ldr	r1, [r7, #8]
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f989 	bl	8003eb4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d056      	beq.n	8003c86 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd8:	f7ff fca2 	bl	8003520 <HAL_GetTick>
 8003bdc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003bde:	e04b      	b.n	8003c78 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d023      	beq.n	8003c3a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0320 	and.w	r3, r3, #32
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	f043 0202 	orr.w	r2, r3, #2
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	f043 0201 	orr.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2221      	movs	r2, #33	; 0x21
 8003c24:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e0a5      	b.n	8003d86 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d01a      	beq.n	8003c78 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c42:	f7ff fc6d 	bl	8003520 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <HAL_DMA2D_PollForTransfer+0x9c>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2203      	movs	r2, #3
 8003c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e086      	b.n	8003d86 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0ac      	beq.n	8003be0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d061      	beq.n	8003d6c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ca8:	f7ff fc3a 	bl	8003520 <HAL_GetTick>
 8003cac:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003cae:	e056      	b.n	8003d5e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02e      	beq.n	8003d20 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 0308 	and.w	r3, r3, #8
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	f043 0204 	orr.w	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	f043 0202 	orr.w	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2229      	movs	r2, #41	; 0x29
 8003d0a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e032      	b.n	8003d86 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d01a      	beq.n	8003d5e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d28:	f7ff fbfa 	bl	8003520 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d302      	bcc.n	8003d3e <HAL_DMA2D_PollForTransfer+0x182>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	f043 0220 	orr.w	r2, r3, #32
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e013      	b.n	8003d86 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0a1      	beq.n	8003cb0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2212      	movs	r2, #18
 8003d72:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_DMA2D_ConfigLayer+0x20>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e079      	b.n	8003ea4 <HAL_DMA2D_ConfigLayer+0x114>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003dda:	4b35      	ldr	r3, [pc, #212]	; (8003eb0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003ddc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d003      	beq.n	8003dee <HAL_DMA2D_ConfigLayer+0x5e>
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b09      	cmp	r3, #9
 8003dec:	d107      	bne.n	8003dfe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e005      	b.n	8003e0a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	061b      	lsls	r3, r3, #24
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d120      	bne.n	8003e52 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	ea02 0103 	and.w	r1, r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b0a      	cmp	r3, #10
 8003e38:	d003      	beq.n	8003e42 <HAL_DMA2D_ConfigLayer+0xb2>
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2b09      	cmp	r3, #9
 8003e40:	d127      	bne.n	8003e92 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e50:	e01f      	b.n	8003e92 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	ea02 0103 	and.w	r1, r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b0a      	cmp	r3, #10
 8003e7a:	d003      	beq.n	8003e84 <HAL_DMA2D_ConfigLayer+0xf4>
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b09      	cmp	r3, #9
 8003e82:	d106      	bne.n	8003e92 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003e90:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	ff03000f 	.word	0xff03000f

08003eb4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b08b      	sub	sp, #44	; 0x2c
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
 8003ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	041a      	lsls	r2, r3, #16
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003eec:	d174      	bne.n	8003fd8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ef4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003efc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f04:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d108      	bne.n	8003f26 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
 8003f24:	e053      	b.n	8003fce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d106      	bne.n	8003f3c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	e048      	b.n	8003fce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d111      	bne.n	8003f68 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	0cdb      	lsrs	r3, r3, #19
 8003f48:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	0a9b      	lsrs	r3, r3, #10
 8003f4e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	08db      	lsrs	r3, r3, #3
 8003f54:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	02db      	lsls	r3, r3, #11
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	e032      	b.n	8003fce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d117      	bne.n	8003fa0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	0fdb      	lsrs	r3, r3, #31
 8003f74:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	0cdb      	lsrs	r3, r3, #19
 8003f7a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	0adb      	lsrs	r3, r3, #11
 8003f80:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	08db      	lsrs	r3, r3, #3
 8003f86:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	029b      	lsls	r3, r3, #10
 8003f90:	431a      	orrs	r2, r3
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	03db      	lsls	r3, r3, #15
 8003f96:	4313      	orrs	r3, r2
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	e016      	b.n	8003fce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	0f1b      	lsrs	r3, r3, #28
 8003fa4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	0d1b      	lsrs	r3, r3, #20
 8003faa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	0b1b      	lsrs	r3, r3, #12
 8003fb0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	011a      	lsls	r2, r3, #4
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	021b      	lsls	r3, r3, #8
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	031b      	lsls	r3, r3, #12
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003fd6:	e003      	b.n	8003fe0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	60da      	str	r2, [r3, #12]
}
 8003fe0:	bf00      	nop
 8003fe2:	372c      	adds	r7, #44	; 0x2c
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	; 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	e177      	b.n	80042f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004008:	2201      	movs	r2, #1
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4013      	ands	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	f040 8166 	bne.w	80042f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d005      	beq.n	800403e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800403a:	2b02      	cmp	r3, #2
 800403c:	d130      	bne.n	80040a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	2203      	movs	r2, #3
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	fa02 f303 	lsl.w	r3, r2, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4313      	orrs	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004074:	2201      	movs	r2, #1
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	43db      	mvns	r3, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4013      	ands	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	f003 0201 	and.w	r2, r3, #1
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	fa02 f303 	lsl.w	r3, r2, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4313      	orrs	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d017      	beq.n	80040dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	fa02 f303 	lsl.w	r3, r2, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d123      	bne.n	8004130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	08da      	lsrs	r2, r3, #3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3208      	adds	r2, #8
 80040f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	220f      	movs	r2, #15
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4013      	ands	r3, r2
 800410a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	fa02 f303 	lsl.w	r3, r2, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4313      	orrs	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	08da      	lsrs	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3208      	adds	r2, #8
 800412a:	69b9      	ldr	r1, [r7, #24]
 800412c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	2203      	movs	r2, #3
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0203 	and.w	r2, r3, #3
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4313      	orrs	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 80c0 	beq.w	80042f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	4b66      	ldr	r3, [pc, #408]	; (8004310 <HAL_GPIO_Init+0x324>)
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	4a65      	ldr	r2, [pc, #404]	; (8004310 <HAL_GPIO_Init+0x324>)
 800417c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004180:	6453      	str	r3, [r2, #68]	; 0x44
 8004182:	4b63      	ldr	r3, [pc, #396]	; (8004310 <HAL_GPIO_Init+0x324>)
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800418a:	60fb      	str	r3, [r7, #12]
 800418c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800418e:	4a61      	ldr	r2, [pc, #388]	; (8004314 <HAL_GPIO_Init+0x328>)
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	089b      	lsrs	r3, r3, #2
 8004194:	3302      	adds	r3, #2
 8004196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a58      	ldr	r2, [pc, #352]	; (8004318 <HAL_GPIO_Init+0x32c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d037      	beq.n	800422a <HAL_GPIO_Init+0x23e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a57      	ldr	r2, [pc, #348]	; (800431c <HAL_GPIO_Init+0x330>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_GPIO_Init+0x23a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a56      	ldr	r2, [pc, #344]	; (8004320 <HAL_GPIO_Init+0x334>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d02b      	beq.n	8004222 <HAL_GPIO_Init+0x236>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a55      	ldr	r2, [pc, #340]	; (8004324 <HAL_GPIO_Init+0x338>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d025      	beq.n	800421e <HAL_GPIO_Init+0x232>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a54      	ldr	r2, [pc, #336]	; (8004328 <HAL_GPIO_Init+0x33c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d01f      	beq.n	800421a <HAL_GPIO_Init+0x22e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a53      	ldr	r2, [pc, #332]	; (800432c <HAL_GPIO_Init+0x340>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d019      	beq.n	8004216 <HAL_GPIO_Init+0x22a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a52      	ldr	r2, [pc, #328]	; (8004330 <HAL_GPIO_Init+0x344>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_GPIO_Init+0x226>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a51      	ldr	r2, [pc, #324]	; (8004334 <HAL_GPIO_Init+0x348>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00d      	beq.n	800420e <HAL_GPIO_Init+0x222>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a50      	ldr	r2, [pc, #320]	; (8004338 <HAL_GPIO_Init+0x34c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <HAL_GPIO_Init+0x21e>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a4f      	ldr	r2, [pc, #316]	; (800433c <HAL_GPIO_Init+0x350>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_GPIO_Init+0x21a>
 8004202:	2309      	movs	r3, #9
 8004204:	e012      	b.n	800422c <HAL_GPIO_Init+0x240>
 8004206:	230a      	movs	r3, #10
 8004208:	e010      	b.n	800422c <HAL_GPIO_Init+0x240>
 800420a:	2308      	movs	r3, #8
 800420c:	e00e      	b.n	800422c <HAL_GPIO_Init+0x240>
 800420e:	2307      	movs	r3, #7
 8004210:	e00c      	b.n	800422c <HAL_GPIO_Init+0x240>
 8004212:	2306      	movs	r3, #6
 8004214:	e00a      	b.n	800422c <HAL_GPIO_Init+0x240>
 8004216:	2305      	movs	r3, #5
 8004218:	e008      	b.n	800422c <HAL_GPIO_Init+0x240>
 800421a:	2304      	movs	r3, #4
 800421c:	e006      	b.n	800422c <HAL_GPIO_Init+0x240>
 800421e:	2303      	movs	r3, #3
 8004220:	e004      	b.n	800422c <HAL_GPIO_Init+0x240>
 8004222:	2302      	movs	r3, #2
 8004224:	e002      	b.n	800422c <HAL_GPIO_Init+0x240>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_GPIO_Init+0x240>
 800422a:	2300      	movs	r3, #0
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	f002 0203 	and.w	r2, r2, #3
 8004232:	0092      	lsls	r2, r2, #2
 8004234:	4093      	lsls	r3, r2
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800423c:	4935      	ldr	r1, [pc, #212]	; (8004314 <HAL_GPIO_Init+0x328>)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	089b      	lsrs	r3, r3, #2
 8004242:	3302      	adds	r3, #2
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800424a:	4b3d      	ldr	r3, [pc, #244]	; (8004340 <HAL_GPIO_Init+0x354>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800426e:	4a34      	ldr	r2, [pc, #208]	; (8004340 <HAL_GPIO_Init+0x354>)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004274:	4b32      	ldr	r3, [pc, #200]	; (8004340 <HAL_GPIO_Init+0x354>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004298:	4a29      	ldr	r2, [pc, #164]	; (8004340 <HAL_GPIO_Init+0x354>)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800429e:	4b28      	ldr	r3, [pc, #160]	; (8004340 <HAL_GPIO_Init+0x354>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042c2:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_GPIO_Init+0x354>)
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042c8:	4b1d      	ldr	r3, [pc, #116]	; (8004340 <HAL_GPIO_Init+0x354>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4013      	ands	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <HAL_GPIO_Init+0x354>)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	3301      	adds	r3, #1
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	2b0f      	cmp	r3, #15
 80042fc:	f67f ae84 	bls.w	8004008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004300:	bf00      	nop
 8004302:	bf00      	nop
 8004304:	3724      	adds	r7, #36	; 0x24
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800
 8004314:	40013800 	.word	0x40013800
 8004318:	40020000 	.word	0x40020000
 800431c:	40020400 	.word	0x40020400
 8004320:	40020800 	.word	0x40020800
 8004324:	40020c00 	.word	0x40020c00
 8004328:	40021000 	.word	0x40021000
 800432c:	40021400 	.word	0x40021400
 8004330:	40021800 	.word	0x40021800
 8004334:	40021c00 	.word	0x40021c00
 8004338:	40022000 	.word	0x40022000
 800433c:	40022400 	.word	0x40022400
 8004340:	40013c00 	.word	0x40013c00

08004344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]
 8004350:	4613      	mov	r3, r2
 8004352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004354:	787b      	ldrb	r3, [r7, #1]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800435a:	887a      	ldrh	r2, [r7, #2]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004360:	e003      	b.n	800436a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	041a      	lsls	r2, r3, #16
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	619a      	str	r2, [r3, #24]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e0bf      	b.n	800450a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f8ba 	bl	8004518 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80043ba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6999      	ldr	r1, [r3, #24]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6899      	ldr	r1, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	4b4a      	ldr	r3, [pc, #296]	; (8004514 <HAL_LTDC_Init+0x19c>)
 80043ec:	400b      	ands	r3, r1
 80043ee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6899      	ldr	r1, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68d9      	ldr	r1, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <HAL_LTDC_Init+0x19c>)
 800441a:	400b      	ands	r3, r1
 800441c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68d9      	ldr	r1, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1a      	ldr	r2, [r3, #32]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	431a      	orrs	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	430a      	orrs	r2, r1
 800443a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6919      	ldr	r1, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b33      	ldr	r3, [pc, #204]	; (8004514 <HAL_LTDC_Init+0x19c>)
 8004448:	400b      	ands	r3, r1
 800444a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	6919      	ldr	r1, [r3, #16]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6959      	ldr	r1, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_LTDC_Init+0x19c>)
 8004476:	400b      	ands	r3, r1
 8004478:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6959      	ldr	r1, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80044ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0206 	orr.w	r2, r2, #6
 80044e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	f000f800 	.word	0xf000f800

08004518 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800452c:	b5b0      	push	{r4, r5, r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_LTDC_ConfigLayer+0x1a>
 8004542:	2302      	movs	r3, #2
 8004544:	e02c      	b.n	80045a0 <HAL_LTDC_ConfigLayer+0x74>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2134      	movs	r1, #52	; 0x34
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4614      	mov	r4, r2
 800456a:	461d      	mov	r5, r3
 800456c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800456e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f83b 	bl	80045fc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3710      	adds	r7, #16
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}

080045a8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_LTDC_EnableDither+0x16>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e016      	b.n	80045ec <HAL_LTDC_EnableDither+0x44>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <HAL_LTDC_EnableDither+0x50>)
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_LTDC_EnableDither+0x50>)
 80045d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40016800 	.word	0x40016800

080045fc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b089      	sub	sp, #36	; 0x24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	0c1b      	lsrs	r3, r3, #16
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	4413      	add	r3, r2
 800461a:	041b      	lsls	r3, r3, #16
 800461c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	01db      	lsls	r3, r3, #7
 8004628:	4413      	add	r3, r2
 800462a:	3384      	adds	r3, #132	; 0x84
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	4611      	mov	r1, r2
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	01d2      	lsls	r2, r2, #7
 8004638:	440a      	add	r2, r1
 800463a:	3284      	adds	r2, #132	; 0x84
 800463c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004640:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004652:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004654:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	01db      	lsls	r3, r3, #7
 8004660:	440b      	add	r3, r1
 8004662:	3384      	adds	r3, #132	; 0x84
 8004664:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800466a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800467a:	4413      	add	r3, r2
 800467c:	041b      	lsls	r3, r3, #16
 800467e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	01db      	lsls	r3, r3, #7
 800468a:	4413      	add	r3, r2
 800468c:	3384      	adds	r3, #132	; 0x84
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	4611      	mov	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	01d2      	lsls	r2, r2, #7
 800469a:	440a      	add	r2, r1
 800469c:	3284      	adds	r2, #132	; 0x84
 800469e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046a2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046b2:	4413      	add	r3, r2
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4619      	mov	r1, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	01db      	lsls	r3, r3, #7
 80046c0:	440b      	add	r3, r1
 80046c2:	3384      	adds	r3, #132	; 0x84
 80046c4:	4619      	mov	r1, r3
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	01db      	lsls	r3, r3, #7
 80046d6:	4413      	add	r3, r2
 80046d8:	3384      	adds	r3, #132	; 0x84
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	4611      	mov	r1, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	01d2      	lsls	r2, r2, #7
 80046e6:	440a      	add	r2, r1
 80046e8:	3284      	adds	r2, #132	; 0x84
 80046ea:	f023 0307 	bic.w	r3, r3, #7
 80046ee:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	461a      	mov	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	061b      	lsls	r3, r3, #24
 8004720:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	01db      	lsls	r3, r3, #7
 800472c:	4413      	add	r3, r2
 800472e:	3384      	adds	r3, #132	; 0x84
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	01db      	lsls	r3, r3, #7
 800473c:	4413      	add	r3, r2
 800473e:	3384      	adds	r3, #132	; 0x84
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800474c:	461a      	mov	r2, r3
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	431a      	orrs	r2, r3
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	431a      	orrs	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4619      	mov	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	01db      	lsls	r3, r3, #7
 8004760:	440b      	add	r3, r1
 8004762:	3384      	adds	r3, #132	; 0x84
 8004764:	4619      	mov	r1, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	01db      	lsls	r3, r3, #7
 8004776:	4413      	add	r3, r2
 8004778:	3384      	adds	r3, #132	; 0x84
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	4611      	mov	r1, r2
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	01d2      	lsls	r2, r2, #7
 8004786:	440a      	add	r2, r1
 8004788:	3284      	adds	r2, #132	; 0x84
 800478a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800478e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	01db      	lsls	r3, r3, #7
 800479a:	4413      	add	r3, r2
 800479c:	3384      	adds	r3, #132	; 0x84
 800479e:	461a      	mov	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	01db      	lsls	r3, r3, #7
 80047b0:	4413      	add	r3, r2
 80047b2:	3384      	adds	r3, #132	; 0x84
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	4611      	mov	r1, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	01d2      	lsls	r2, r2, #7
 80047c0:	440a      	add	r2, r1
 80047c2:	3284      	adds	r2, #132	; 0x84
 80047c4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047c8:	f023 0307 	bic.w	r3, r3, #7
 80047cc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	69da      	ldr	r2, [r3, #28]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	6809      	ldr	r1, [r1, #0]
 80047da:	4608      	mov	r0, r1
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	01c9      	lsls	r1, r1, #7
 80047e0:	4401      	add	r1, r0
 80047e2:	3184      	adds	r1, #132	; 0x84
 80047e4:	4313      	orrs	r3, r2
 80047e6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	01db      	lsls	r3, r3, #7
 80047f2:	4413      	add	r3, r2
 80047f4:	3384      	adds	r3, #132	; 0x84
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	01db      	lsls	r3, r3, #7
 8004802:	4413      	add	r3, r2
 8004804:	3384      	adds	r3, #132	; 0x84
 8004806:	461a      	mov	r2, r3
 8004808:	2300      	movs	r3, #0
 800480a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	01db      	lsls	r3, r3, #7
 8004816:	4413      	add	r3, r2
 8004818:	3384      	adds	r3, #132	; 0x84
 800481a:	461a      	mov	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d102      	bne.n	8004830 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800482a:	2304      	movs	r3, #4
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	e01b      	b.n	8004868 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d102      	bne.n	800483e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004838:	2303      	movs	r3, #3
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e014      	b.n	8004868 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b04      	cmp	r3, #4
 8004844:	d00b      	beq.n	800485e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800484a:	2b02      	cmp	r3, #2
 800484c:	d007      	beq.n	800485e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004852:	2b03      	cmp	r3, #3
 8004854:	d003      	beq.n	800485e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800485a:	2b07      	cmp	r3, #7
 800485c:	d102      	bne.n	8004864 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800485e:	2302      	movs	r3, #2
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e001      	b.n	8004868 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004864:	2301      	movs	r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	01db      	lsls	r3, r3, #7
 8004872:	4413      	add	r3, r2
 8004874:	3384      	adds	r3, #132	; 0x84
 8004876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	4611      	mov	r1, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	01d2      	lsls	r2, r2, #7
 8004882:	440a      	add	r2, r1
 8004884:	3284      	adds	r2, #132	; 0x84
 8004886:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800488a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	1acb      	subs	r3, r1, r3
 80048a2:	69f9      	ldr	r1, [r7, #28]
 80048a4:	fb01 f303 	mul.w	r3, r1, r3
 80048a8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80048aa:	68f9      	ldr	r1, [r7, #12]
 80048ac:	6809      	ldr	r1, [r1, #0]
 80048ae:	4608      	mov	r0, r1
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	01c9      	lsls	r1, r1, #7
 80048b4:	4401      	add	r1, r0
 80048b6:	3184      	adds	r1, #132	; 0x84
 80048b8:	4313      	orrs	r3, r2
 80048ba:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	01db      	lsls	r3, r3, #7
 80048c6:	4413      	add	r3, r2
 80048c8:	3384      	adds	r3, #132	; 0x84
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	4611      	mov	r1, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	01d2      	lsls	r2, r2, #7
 80048d6:	440a      	add	r2, r1
 80048d8:	3284      	adds	r2, #132	; 0x84
 80048da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048de:	f023 0307 	bic.w	r3, r3, #7
 80048e2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	01db      	lsls	r3, r3, #7
 80048ee:	4413      	add	r3, r2
 80048f0:	3384      	adds	r3, #132	; 0x84
 80048f2:	461a      	mov	r2, r3
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	01db      	lsls	r3, r3, #7
 8004904:	4413      	add	r3, r2
 8004906:	3384      	adds	r3, #132	; 0x84
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	4611      	mov	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	01d2      	lsls	r2, r2, #7
 8004914:	440a      	add	r2, r1
 8004916:	3284      	adds	r2, #132	; 0x84
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6013      	str	r3, [r2, #0]
}
 800491e:	bf00      	nop
 8004920:	3724      	adds	r7, #36	; 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800492a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492c:	b08f      	sub	sp, #60	; 0x3c
 800492e:	af0a      	add	r7, sp, #40	; 0x28
 8004930:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e10f      	b.n	8004b5c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f00a f872 	bl	800ea40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2203      	movs	r2, #3
 8004960:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f003 fc33 	bl	80081e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	687e      	ldr	r6, [r7, #4]
 8004988:	466d      	mov	r5, sp
 800498a:	f106 0410 	add.w	r4, r6, #16
 800498e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004996:	e894 0003 	ldmia.w	r4, {r0, r1}
 800499a:	e885 0003 	stmia.w	r5, {r0, r1}
 800499e:	1d33      	adds	r3, r6, #4
 80049a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049a2:	6838      	ldr	r0, [r7, #0]
 80049a4:	f003 fb0a 	bl	8007fbc <USB_CoreInit>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e0d0      	b.n	8004b5c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f003 fc21 	bl	8008208 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
 80049ca:	e04a      	b.n	8004a62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	333d      	adds	r3, #61	; 0x3d
 80049dc:	2201      	movs	r2, #1
 80049de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049e0:	7bfa      	ldrb	r2, [r7, #15]
 80049e2:	6879      	ldr	r1, [r7, #4]
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	333c      	adds	r3, #60	; 0x3c
 80049f0:	7bfa      	ldrb	r2, [r7, #15]
 80049f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049f4:	7bfa      	ldrb	r2, [r7, #15]
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	b298      	uxth	r0, r3
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	3344      	adds	r3, #68	; 0x44
 8004a08:	4602      	mov	r2, r0
 8004a0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a0c:	7bfa      	ldrb	r2, [r7, #15]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	00db      	lsls	r3, r3, #3
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	3340      	adds	r3, #64	; 0x40
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a20:	7bfa      	ldrb	r2, [r7, #15]
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3348      	adds	r3, #72	; 0x48
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a34:	7bfa      	ldrb	r2, [r7, #15]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	334c      	adds	r3, #76	; 0x4c
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a48:	7bfa      	ldrb	r2, [r7, #15]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4413      	add	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	3354      	adds	r3, #84	; 0x54
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	73fb      	strb	r3, [r7, #15]
 8004a62:	7bfa      	ldrb	r2, [r7, #15]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d3af      	bcc.n	80049cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]
 8004a70:	e044      	b.n	8004afc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	00db      	lsls	r3, r3, #3
 8004a7a:	4413      	add	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a9e:	7bfa      	ldrb	r2, [r7, #15]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004aca:	7bfa      	ldrb	r2, [r7, #15]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ae0:	7bfa      	ldrb	r2, [r7, #15]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004af2:	2200      	movs	r2, #0
 8004af4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	3301      	adds	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
 8004afc:	7bfa      	ldrb	r2, [r7, #15]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d3b5      	bcc.n	8004a72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	687e      	ldr	r6, [r7, #4]
 8004b0e:	466d      	mov	r5, sp
 8004b10:	f106 0410 	add.w	r4, r6, #16
 8004b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b20:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b24:	1d33      	adds	r3, r6, #4
 8004b26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b28:	6838      	ldr	r0, [r7, #0]
 8004b2a:	f003 fbb9 	bl	80082a0 <USB_DevInit>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e00d      	b.n	8004b5c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f004 fd08 	bl	800956a <USB_DevDisconnect>

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_PCD_Start+0x1c>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e020      	b.n	8004bc2 <HAL_PCD_Start+0x5e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d109      	bne.n	8004ba4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d005      	beq.n	8004ba4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f003 fb0b 	bl	80081c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f004 fcb8 	bl	8009528 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bca:	b590      	push	{r4, r7, lr}
 8004bcc:	b08d      	sub	sp, #52	; 0x34
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f004 fd76 	bl	80096d2 <USB_GetMode>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f040 848a 	bne.w	8005502 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f004 fcda 	bl	80095ac <USB_ReadInterrupts>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8480 	beq.w	8005500 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f004 fcc7 	bl	80095ac <USB_ReadInterrupts>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d107      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f002 0202 	and.w	r2, r2, #2
 8004c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f004 fcb5 	bl	80095ac <USB_ReadInterrupts>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d161      	bne.n	8004d10 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0210 	bic.w	r2, r2, #16
 8004c5a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f003 020f 	and.w	r2, r3, #15
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	4413      	add	r3, r2
 8004c78:	3304      	adds	r3, #4
 8004c7a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	0c5b      	lsrs	r3, r3, #17
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d124      	bne.n	8004cd2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d035      	beq.n	8004d00 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	091b      	lsrs	r3, r3, #4
 8004c9c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6a38      	ldr	r0, [r7, #32]
 8004ca8:	f004 faec 	bl	8009284 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	691a      	ldr	r2, [r3, #16]
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cb8:	441a      	add	r2, r3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	6a1a      	ldr	r2, [r3, #32]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cca:	441a      	add	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
 8004cd0:	e016      	b.n	8004d00 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	0c5b      	lsrs	r3, r3, #17
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	2b06      	cmp	r3, #6
 8004cdc:	d110      	bne.n	8004d00 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6a38      	ldr	r0, [r7, #32]
 8004cea:	f004 facb 	bl	8009284 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	6a1a      	ldr	r2, [r3, #32]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	091b      	lsrs	r3, r3, #4
 8004cf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cfa:	441a      	add	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699a      	ldr	r2, [r3, #24]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0210 	orr.w	r2, r2, #16
 8004d0e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f004 fc49 	bl	80095ac <USB_ReadInterrupts>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d24:	f040 80a7 	bne.w	8004e76 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f004 fc4e 	bl	80095d2 <USB_ReadDevAllOutEpInterrupt>
 8004d36:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004d38:	e099      	b.n	8004e6e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 808e 	beq.w	8004e62 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f004 fc72 	bl	800963a <USB_ReadDevOutEPInterrupt>
 8004d56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00c      	beq.n	8004d7c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2301      	movs	r3, #1
 8004d72:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fec2 	bl	8005b00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00c      	beq.n	8004da0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	461a      	mov	r2, r3
 8004d94:	2308      	movs	r3, #8
 8004d96:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 ff98 	bl	8005cd0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	461a      	mov	r2, r3
 8004db8:	2310      	movs	r3, #16
 8004dba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d030      	beq.n	8004e28 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dce:	2b80      	cmp	r3, #128	; 0x80
 8004dd0:	d109      	bne.n	8004de6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004de4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de8:	4613      	mov	r3, r2
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	4413      	add	r3, r2
 8004df8:	3304      	adds	r3, #4
 8004dfa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	78db      	ldrb	r3, [r3, #3]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d108      	bne.n	8004e16 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2200      	movs	r2, #0
 8004e08:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f009 ff17 	bl	800ec44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	461a      	mov	r2, r3
 8004e24:	2302      	movs	r3, #2
 8004e26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e3e:	461a      	mov	r2, r3
 8004e40:	2320      	movs	r3, #32
 8004e42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d009      	beq.n	8004e62 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	3301      	adds	r3, #1
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f47f af62 	bne.w	8004d3a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f004 fb96 	bl	80095ac <USB_ReadInterrupts>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e8a:	f040 80db 	bne.w	8005044 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f004 fbb7 	bl	8009606 <USB_ReadDevAllInEpInterrupt>
 8004e98:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004e9e:	e0cd      	b.n	800503c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 80c2 	beq.w	8005030 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	4611      	mov	r1, r2
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f004 fbdd 	bl	8009676 <USB_ReadDevInEPInterrupt>
 8004ebc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d057      	beq.n	8004f78 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	2201      	movs	r2, #1
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69f9      	ldr	r1, [r7, #28]
 8004ee4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee8:	4013      	ands	r3, r2
 8004eea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2301      	movs	r3, #1
 8004efc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d132      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4413      	add	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	334c      	adds	r3, #76	; 0x4c
 8004f16:	6819      	ldr	r1, [r3, #0]
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4403      	add	r3, r0
 8004f26:	3348      	adds	r3, #72	; 0x48
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4419      	add	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f30:	4613      	mov	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4403      	add	r3, r0
 8004f3a:	334c      	adds	r3, #76	; 0x4c
 8004f3c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d113      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x3a2>
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	4613      	mov	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	3354      	adds	r3, #84	; 0x54
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d108      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6818      	ldr	r0, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f64:	461a      	mov	r2, r3
 8004f66:	2101      	movs	r1, #1
 8004f68:	f004 fbe4 	bl	8009734 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f009 fde1 	bl	800eb3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d008      	beq.n	8004f94 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	461a      	mov	r2, r3
 8004f90:	2308      	movs	r3, #8
 8004f92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f003 0310 	and.w	r3, r3, #16
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	461a      	mov	r2, r3
 8004fac:	2310      	movs	r3, #16
 8004fae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d008      	beq.n	8004fcc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	2340      	movs	r3, #64	; 0x40
 8004fca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d023      	beq.n	800501e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd8:	6a38      	ldr	r0, [r7, #32]
 8004fda:	f003 fac5 	bl	8008568 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	3338      	adds	r3, #56	; 0x38
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	78db      	ldrb	r3, [r3, #3]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d108      	bne.n	800500c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	b2db      	uxtb	r3, r3
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f009 fe2e 	bl	800ec68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	461a      	mov	r2, r3
 800501a:	2302      	movs	r3, #2
 800501c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fcdb 	bl	80059e6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	3301      	adds	r3, #1
 8005034:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	085b      	lsrs	r3, r3, #1
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	f47f af2e 	bne.w	8004ea0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f004 faaf 	bl	80095ac <USB_ReadInterrupts>
 800504e:	4603      	mov	r3, r0
 8005050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005058:	d122      	bne.n	80050a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005074:	2b01      	cmp	r3, #1
 8005076:	d108      	bne.n	800508a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005080:	2100      	movs	r1, #0
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fec2 	bl	8005e0c <HAL_PCDEx_LPM_Callback>
 8005088:	e002      	b.n	8005090 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f009 fdcc 	bl	800ec28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800509e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f004 fa81 	bl	80095ac <USB_ReadInterrupts>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b4:	d112      	bne.n	80050dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d102      	bne.n	80050cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f009 fd88 	bl	800ebdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80050da:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f004 fa63 	bl	80095ac <USB_ReadInterrupts>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f0:	f040 80b7 	bne.w	8005262 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2110      	movs	r1, #16
 800510e:	4618      	mov	r0, r3
 8005110:	f003 fa2a 	bl	8008568 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005114:	2300      	movs	r3, #0
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005118:	e046      	b.n	80051a8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	461a      	mov	r2, r3
 8005128:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800512c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	015a      	lsls	r2, r3, #5
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800513e:	0151      	lsls	r1, r2, #5
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	440a      	add	r2, r1
 8005144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005148:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800514c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515a:	461a      	mov	r2, r3
 800515c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005160:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	4413      	add	r3, r2
 800516a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005172:	0151      	lsls	r1, r2, #5
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	440a      	add	r2, r1
 8005178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005180:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	440a      	add	r2, r1
 8005198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	3301      	adds	r3, #1
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d3b3      	bcc.n	800511a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80051c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d016      	beq.n	80051fc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051de:	f043 030b 	orr.w	r3, r3, #11
 80051e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f4:	f043 030b 	orr.w	r3, r3, #11
 80051f8:	6453      	str	r3, [r2, #68]	; 0x44
 80051fa:	e015      	b.n	8005228 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800520a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800520e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005212:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005222:	f043 030b 	orr.w	r3, r3, #11
 8005226:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005236:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800523a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800524c:	461a      	mov	r2, r3
 800524e:	f004 fa71 	bl	8009734 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	695a      	ldr	r2, [r3, #20]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f004 f9a0 	bl	80095ac <USB_ReadInterrupts>
 800526c:	4603      	mov	r3, r0
 800526e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005276:	d124      	bne.n	80052c2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4618      	mov	r0, r3
 800527e:	f004 fa36 	bl	80096ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f003 f9eb 	bl	8008662 <USB_GetDevSpeed>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681c      	ldr	r4, [r3, #0]
 8005298:	f001 fa28 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 800529c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	461a      	mov	r2, r3
 80052a6:	4620      	mov	r0, r4
 80052a8:	f002 feea 	bl	8008080 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f009 fc6c 	bl	800eb8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80052c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f004 f970 	bl	80095ac <USB_ReadInterrupts>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b08      	cmp	r3, #8
 80052d4:	d10a      	bne.n	80052ec <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f009 fc49 	bl	800eb6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f002 0208 	and.w	r2, r2, #8
 80052ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f004 f95b 	bl	80095ac <USB_ReadInterrupts>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d122      	bne.n	8005346 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800530c:	2301      	movs	r3, #1
 800530e:	627b      	str	r3, [r7, #36]	; 0x24
 8005310:	e014      	b.n	800533c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005316:	4613      	mov	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	4413      	add	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d105      	bne.n	8005336 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	b2db      	uxtb	r3, r3
 800532e:	4619      	mov	r1, r3
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fb27 	bl	8005984 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	3301      	adds	r3, #1
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005342:	429a      	cmp	r2, r3
 8005344:	d3e5      	bcc.n	8005312 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f004 f92e 	bl	80095ac <USB_ReadInterrupts>
 8005350:	4603      	mov	r3, r0
 8005352:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535a:	d13b      	bne.n	80053d4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800535c:	2301      	movs	r3, #1
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
 8005360:	e02b      	b.n	80053ba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3340      	adds	r3, #64	; 0x40
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d115      	bne.n	80053b4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005388:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800538a:	2b00      	cmp	r3, #0
 800538c:	da12      	bge.n	80053b4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005392:	4613      	mov	r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	333f      	adds	r3, #63	; 0x3f
 800539e:	2201      	movs	r2, #1
 80053a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	4619      	mov	r1, r3
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fae8 	bl	8005984 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b6:	3301      	adds	r3, #1
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d3ce      	bcc.n	8005362 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695a      	ldr	r2, [r3, #20]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80053d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f004 f8e7 	bl	80095ac <USB_ReadInterrupts>
 80053de:	4603      	mov	r3, r0
 80053e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e8:	d155      	bne.n	8005496 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053ea:	2301      	movs	r3, #1
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
 80053ee:	e045      	b.n	800547c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	4613      	mov	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d12e      	bne.n	8005476 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005418:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800541a:	2b00      	cmp	r3, #0
 800541c:	da2b      	bge.n	8005476 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800542a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800542e:	429a      	cmp	r2, r3
 8005430:	d121      	bne.n	8005476 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	4613      	mov	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005472:	6053      	str	r3, [r2, #4]
            break;
 8005474:	e007      	b.n	8005486 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	3301      	adds	r3, #1
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005482:	429a      	cmp	r2, r3
 8005484:	d3b4      	bcc.n	80053f0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695a      	ldr	r2, [r3, #20]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f004 f886 	bl	80095ac <USB_ReadInterrupts>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054aa:	d10a      	bne.n	80054c2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f009 fbed 	bl	800ec8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	695a      	ldr	r2, [r3, #20]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80054c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f004 f870 	bl	80095ac <USB_ReadInterrupts>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d115      	bne.n	8005502 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f009 fbdd 	bl	800eca8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	e000      	b.n	8005502 <HAL_PCD_IRQHandler+0x938>
      return;
 8005500:	bf00      	nop
    }
  }
}
 8005502:	3734      	adds	r7, #52	; 0x34
 8005504:	46bd      	mov	sp, r7
 8005506:	bd90      	pop	{r4, r7, pc}

08005508 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_PCD_SetAddress+0x1a>
 800551e:	2302      	movs	r3, #2
 8005520:	e013      	b.n	800554a <HAL_PCD_SetAddress+0x42>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f003 ffce 	bl	80094dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	4608      	mov	r0, r1
 800555c:	4611      	mov	r1, r2
 800555e:	461a      	mov	r2, r3
 8005560:	4603      	mov	r3, r0
 8005562:	70fb      	strb	r3, [r7, #3]
 8005564:	460b      	mov	r3, r1
 8005566:	803b      	strh	r3, [r7, #0]
 8005568:	4613      	mov	r3, r2
 800556a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005570:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005574:	2b00      	cmp	r3, #0
 8005576:	da0f      	bge.n	8005598 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	f003 020f 	and.w	r2, r3, #15
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	3338      	adds	r3, #56	; 0x38
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4413      	add	r3, r2
 800558c:	3304      	adds	r3, #4
 800558e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	705a      	strb	r2, [r3, #1]
 8005596:	e00f      	b.n	80055b8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	f003 020f 	and.w	r2, r3, #15
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	4413      	add	r3, r2
 80055ae:	3304      	adds	r3, #4
 80055b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80055c4:	883a      	ldrh	r2, [r7, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	78ba      	ldrb	r2, [r7, #2]
 80055ce:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	785b      	ldrb	r3, [r3, #1]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d004      	beq.n	80055e2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055e2:	78bb      	ldrb	r3, [r7, #2]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d102      	bne.n	80055ee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_PCD_EP_Open+0xaa>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e00e      	b.n	800561a <HAL_PCD_EP_Open+0xc8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68f9      	ldr	r1, [r7, #12]
 800560a:	4618      	mov	r0, r3
 800560c:	f003 f84e 	bl	80086ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005618:	7afb      	ldrb	r3, [r7, #11]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800562e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005632:	2b00      	cmp	r3, #0
 8005634:	da0f      	bge.n	8005656 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005636:	78fb      	ldrb	r3, [r7, #3]
 8005638:	f003 020f 	and.w	r2, r3, #15
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	3338      	adds	r3, #56	; 0x38
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	4413      	add	r3, r2
 800564a:	3304      	adds	r3, #4
 800564c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	705a      	strb	r2, [r3, #1]
 8005654:	e00f      	b.n	8005676 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	f003 020f 	and.w	r2, r3, #15
 800565c:	4613      	mov	r3, r2
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	4413      	add	r3, r2
 800566c:	3304      	adds	r3, #4
 800566e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	b2da      	uxtb	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_PCD_EP_Close+0x6e>
 800568c:	2302      	movs	r3, #2
 800568e:	e00e      	b.n	80056ae <HAL_PCD_EP_Close+0x8c>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68f9      	ldr	r1, [r7, #12]
 800569e:	4618      	mov	r0, r3
 80056a0:	f003 f88c 	bl	80087bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	460b      	mov	r3, r1
 80056c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056c6:	7afb      	ldrb	r3, [r7, #11]
 80056c8:	f003 020f 	and.w	r2, r3, #15
 80056cc:	4613      	mov	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4413      	add	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	3304      	adds	r3, #4
 80056de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2200      	movs	r2, #0
 80056f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d102      	bne.n	8005712 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	461a      	mov	r2, r3
 8005728:	6979      	ldr	r1, [r7, #20]
 800572a:	f003 fb6b 	bl	8008e04 <USB_EP0StartXfer>
 800572e:	e008      	b.n	8005742 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	6979      	ldr	r1, [r7, #20]
 800573e:	f003 f919 	bl	8008974 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	f003 020f 	and.w	r2, r3, #15
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	00db      	lsls	r3, r3, #3
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800576e:	681b      	ldr	r3, [r3, #0]
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	460b      	mov	r3, r1
 800578a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	f003 020f 	and.w	r2, r3, #15
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	3338      	adds	r3, #56	; 0x38
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	3304      	adds	r3, #4
 80057a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2200      	movs	r2, #0
 80057b4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2201      	movs	r2, #1
 80057ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057bc:	7afb      	ldrb	r3, [r7, #11]
 80057be:	f003 030f 	and.w	r3, r3, #15
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d102      	bne.n	80057d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d109      	bne.n	80057f4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	6979      	ldr	r1, [r7, #20]
 80057ee:	f003 fb09 	bl	8008e04 <USB_EP0StartXfer>
 80057f2:	e008      	b.n	8005806 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	461a      	mov	r2, r3
 8005800:	6979      	ldr	r1, [r7, #20]
 8005802:	f003 f8b7 	bl	8008974 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	f003 020f 	and.w	r2, r3, #15
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	429a      	cmp	r2, r3
 8005828:	d901      	bls.n	800582e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e050      	b.n	80058d0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800582e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005832:	2b00      	cmp	r3, #0
 8005834:	da0f      	bge.n	8005856 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	f003 020f 	and.w	r2, r3, #15
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	4413      	add	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	3338      	adds	r3, #56	; 0x38
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	4413      	add	r3, r2
 800584a:	3304      	adds	r3, #4
 800584c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	705a      	strb	r2, [r3, #1]
 8005854:	e00d      	b.n	8005872 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4413      	add	r3, r2
 8005868:	3304      	adds	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	b2da      	uxtb	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_PCD_EP_SetStall+0x82>
 800588e:	2302      	movs	r3, #2
 8005890:	e01e      	b.n	80058d0 <HAL_PCD_EP_SetStall+0xc0>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68f9      	ldr	r1, [r7, #12]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f003 fd47 	bl	8009334 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058a6:	78fb      	ldrb	r3, [r7, #3]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	b2d9      	uxtb	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058c0:	461a      	mov	r2, r3
 80058c2:	f003 ff37 	bl	8009734 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	460b      	mov	r3, r1
 80058e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	f003 020f 	and.w	r2, r3, #15
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d901      	bls.n	80058f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e042      	b.n	800597c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da0f      	bge.n	800591e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	f003 020f 	and.w	r2, r3, #15
 8005904:	4613      	mov	r3, r2
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	3338      	adds	r3, #56	; 0x38
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	3304      	adds	r3, #4
 8005914:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	705a      	strb	r2, [r3, #1]
 800591c:	e00f      	b.n	800593e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	f003 020f 	and.w	r2, r3, #15
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	4413      	add	r3, r2
 8005934:	3304      	adds	r3, #4
 8005936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	b2da      	uxtb	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_PCD_EP_ClrStall+0x86>
 800595a:	2302      	movs	r3, #2
 800595c:	e00e      	b.n	800597c <HAL_PCD_EP_ClrStall+0xa4>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68f9      	ldr	r1, [r7, #12]
 800596c:	4618      	mov	r0, r3
 800596e:	f003 fd4f 	bl	8009410 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005994:	2b00      	cmp	r3, #0
 8005996:	da0c      	bge.n	80059b2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	f003 020f 	and.w	r2, r3, #15
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	3338      	adds	r3, #56	; 0x38
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	4413      	add	r3, r2
 80059ac:	3304      	adds	r3, #4
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e00c      	b.n	80059cc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	4613      	mov	r3, r2
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	4413      	add	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4413      	add	r3, r2
 80059c8:	3304      	adds	r3, #4
 80059ca:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f003 fb6e 	bl	80090b4 <USB_EPStopXfer>
 80059d8:	4603      	mov	r3, r0
 80059da:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059dc:	7afb      	ldrb	r3, [r7, #11]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b08a      	sub	sp, #40	; 0x28
 80059ea:	af02      	add	r7, sp, #8
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	4613      	mov	r3, r2
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	3338      	adds	r3, #56	; 0x38
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4413      	add	r3, r2
 8005a0a:	3304      	adds	r3, #4
 8005a0c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a1a      	ldr	r2, [r3, #32]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d901      	bls.n	8005a1e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e06c      	b.n	8005af8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d902      	bls.n	8005a3a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	3303      	adds	r3, #3
 8005a3e:	089b      	lsrs	r3, r3, #2
 8005a40:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a42:	e02b      	b.n	8005a9c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	699a      	ldr	r2, [r3, #24]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d902      	bls.n	8005a60 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	3303      	adds	r3, #3
 8005a64:	089b      	lsrs	r3, r3, #2
 8005a66:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6919      	ldr	r1, [r3, #16]
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f003 fbc2 	bl	8009208 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	441a      	add	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a1a      	ldr	r2, [r3, #32]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	441a      	add	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d809      	bhi.n	8005ac6 <PCD_WriteEmptyTxFifo+0xe0>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6a1a      	ldr	r2, [r3, #32]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d203      	bcs.n	8005ac6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1be      	bne.n	8005a44 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699a      	ldr	r2, [r3, #24]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d811      	bhi.n	8005af6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	2201      	movs	r2, #1
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	6939      	ldr	r1, [r7, #16]
 8005aee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005af2:	4013      	ands	r3, r2
 8005af4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3720      	adds	r7, #32
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	333c      	adds	r3, #60	; 0x3c
 8005b18:	3304      	adds	r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d17b      	bne.n	8005c2e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d015      	beq.n	8005b6c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	4a61      	ldr	r2, [pc, #388]	; (8005cc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	f240 80b9 	bls.w	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80b3 	beq.w	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b62:	461a      	mov	r2, r3
 8005b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b68:	6093      	str	r3, [r2, #8]
 8005b6a:	e0a7      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d009      	beq.n	8005b8a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b82:	461a      	mov	r2, r3
 8005b84:	2320      	movs	r3, #32
 8005b86:	6093      	str	r3, [r2, #8]
 8005b88:	e098      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8093 	bne.w	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	4a4b      	ldr	r2, [pc, #300]	; (8005cc8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d90f      	bls.n	8005bbe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bba:	6093      	str	r3, [r2, #8]
 8005bbc:	e07e      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4413      	add	r3, r2
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	0159      	lsls	r1, r3, #5
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	440b      	add	r3, r1
 8005be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bea:	1ad2      	subs	r2, r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d114      	bne.n	8005c20 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d109      	bne.n	8005c12 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c08:	461a      	mov	r2, r3
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	f003 fd92 	bl	8009734 <USB_EP0_OutStart>
 8005c10:	e006      	b.n	8005c20 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	441a      	add	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	4619      	mov	r1, r3
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f008 ff6c 	bl	800eb04 <HAL_PCD_DataOutStageCallback>
 8005c2c:	e046      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	4a26      	ldr	r2, [pc, #152]	; (8005ccc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d124      	bne.n	8005c80 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00a      	beq.n	8005c56 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c52:	6093      	str	r3, [r2, #8]
 8005c54:	e032      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2320      	movs	r3, #32
 8005c70:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f008 ff43 	bl	800eb04 <HAL_PCD_DataOutStageCallback>
 8005c7e:	e01d      	b.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d114      	bne.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	00db      	lsls	r3, r3, #3
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	440b      	add	r3, r1
 8005c94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d108      	bne.n	8005cb0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2100      	movs	r1, #0
 8005cac:	f003 fd42 	bl	8009734 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f008 ff24 	bl	800eb04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3720      	adds	r7, #32
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	4f54300a 	.word	0x4f54300a
 8005ccc:	4f54310a 	.word	0x4f54310a

08005cd0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	333c      	adds	r3, #60	; 0x3c
 8005ce8:	3304      	adds	r3, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d90e      	bls.n	8005d24 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	015a      	lsls	r2, r3, #5
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d22:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f008 fedb 	bl	800eae0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4a0a      	ldr	r2, [pc, #40]	; (8005d58 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d90c      	bls.n	8005d4c <PCD_EP_OutSetupPacket_int+0x7c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d108      	bne.n	8005d4c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d44:	461a      	mov	r2, r3
 8005d46:	2101      	movs	r1, #1
 8005d48:	f003 fcf4 	bl	8009734 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	4f54300a 	.word	0x4f54300a

08005d5c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d107      	bne.n	8005d8a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d7a:	883b      	ldrh	r3, [r7, #0]
 8005d7c:	0419      	lsls	r1, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	629a      	str	r2, [r3, #40]	; 0x28
 8005d88:	e028      	b.n	8005ddc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4413      	add	r3, r2
 8005d96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	e00d      	b.n	8005dba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	3340      	adds	r3, #64	; 0x40
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	4413      	add	r3, r2
 8005db2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	3301      	adds	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	7bfa      	ldrb	r2, [r7, #15]
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d3ec      	bcc.n	8005d9e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005dc4:	883b      	ldrh	r3, [r7, #0]
 8005dc6:	0418      	lsls	r0, r3, #16
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6819      	ldr	r1, [r3, #0]
 8005dcc:	78fb      	ldrb	r3, [r7, #3]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	4302      	orrs	r2, r0
 8005dd4:	3340      	adds	r3, #64	; 0x40
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	887a      	ldrh	r2, [r7, #2]
 8005dfc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	460b      	mov	r3, r1
 8005e16:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e267      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d075      	beq.n	8005f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e42:	4b88      	ldr	r3, [pc, #544]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d00c      	beq.n	8005e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e4e:	4b85      	ldr	r3, [pc, #532]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d112      	bne.n	8005e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5a:	4b82      	ldr	r3, [pc, #520]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e66:	d10b      	bne.n	8005e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e68:	4b7e      	ldr	r3, [pc, #504]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d05b      	beq.n	8005f2c <HAL_RCC_OscConfig+0x108>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d157      	bne.n	8005f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e242      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e88:	d106      	bne.n	8005e98 <HAL_RCC_OscConfig+0x74>
 8005e8a:	4b76      	ldr	r3, [pc, #472]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a75      	ldr	r2, [pc, #468]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e01d      	b.n	8005ed4 <HAL_RCC_OscConfig+0xb0>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x98>
 8005ea2:	4b70      	ldr	r3, [pc, #448]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a6f      	ldr	r2, [pc, #444]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	4b6d      	ldr	r3, [pc, #436]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a6c      	ldr	r2, [pc, #432]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCC_OscConfig+0xb0>
 8005ebc:	4b69      	ldr	r3, [pc, #420]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a68      	ldr	r2, [pc, #416]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	4b66      	ldr	r3, [pc, #408]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a65      	ldr	r2, [pc, #404]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d013      	beq.n	8005f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005edc:	f7fd fb20 	bl	8003520 <HAL_GetTick>
 8005ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ee2:	e008      	b.n	8005ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ee4:	f7fd fb1c 	bl	8003520 <HAL_GetTick>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	2b64      	cmp	r3, #100	; 0x64
 8005ef0:	d901      	bls.n	8005ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e207      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ef6:	4b5b      	ldr	r3, [pc, #364]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xc0>
 8005f02:	e014      	b.n	8005f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f04:	f7fd fb0c 	bl	8003520 <HAL_GetTick>
 8005f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f0a:	e008      	b.n	8005f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f0c:	f7fd fb08 	bl	8003520 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b64      	cmp	r3, #100	; 0x64
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e1f3      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f1e:	4b51      	ldr	r3, [pc, #324]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1f0      	bne.n	8005f0c <HAL_RCC_OscConfig+0xe8>
 8005f2a:	e000      	b.n	8005f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d063      	beq.n	8006002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f3a:	4b4a      	ldr	r3, [pc, #296]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f46:	4b47      	ldr	r3, [pc, #284]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d11c      	bne.n	8005f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f52:	4b44      	ldr	r3, [pc, #272]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d116      	bne.n	8005f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f5e:	4b41      	ldr	r3, [pc, #260]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_RCC_OscConfig+0x152>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d001      	beq.n	8005f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e1c7      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f76:	4b3b      	ldr	r3, [pc, #236]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	4937      	ldr	r1, [pc, #220]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8a:	e03a      	b.n	8006002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d020      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f94:	4b34      	ldr	r3, [pc, #208]	; (8006068 <HAL_RCC_OscConfig+0x244>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9a:	f7fd fac1 	bl	8003520 <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fa2:	f7fd fabd 	bl	8003520 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e1a8      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f0      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fc0:	4b28      	ldr	r3, [pc, #160]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	4925      	ldr	r1, [pc, #148]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	600b      	str	r3, [r1, #0]
 8005fd4:	e015      	b.n	8006002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd6:	4b24      	ldr	r3, [pc, #144]	; (8006068 <HAL_RCC_OscConfig+0x244>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7fd faa0 	bl	8003520 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fe4:	f7fd fa9c 	bl	8003520 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e187      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d036      	beq.n	800607c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d016      	beq.n	8006044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006016:	4b15      	ldr	r3, [pc, #84]	; (800606c <HAL_RCC_OscConfig+0x248>)
 8006018:	2201      	movs	r2, #1
 800601a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fd fa80 	bl	8003520 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006024:	f7fd fa7c 	bl	8003520 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e167      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006036:	4b0b      	ldr	r3, [pc, #44]	; (8006064 <HAL_RCC_OscConfig+0x240>)
 8006038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f0      	beq.n	8006024 <HAL_RCC_OscConfig+0x200>
 8006042:	e01b      	b.n	800607c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006044:	4b09      	ldr	r3, [pc, #36]	; (800606c <HAL_RCC_OscConfig+0x248>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604a:	f7fd fa69 	bl	8003520 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006050:	e00e      	b.n	8006070 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006052:	f7fd fa65 	bl	8003520 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d907      	bls.n	8006070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e150      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
 8006064:	40023800 	.word	0x40023800
 8006068:	42470000 	.word	0x42470000
 800606c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006070:	4b88      	ldr	r3, [pc, #544]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1ea      	bne.n	8006052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 8097 	beq.w	80061b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608a:	2300      	movs	r3, #0
 800608c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800608e:	4b81      	ldr	r3, [pc, #516]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10f      	bne.n	80060ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	4b7d      	ldr	r3, [pc, #500]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	4a7c      	ldr	r2, [pc, #496]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 80060a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a8:	6413      	str	r3, [r2, #64]	; 0x40
 80060aa:	4b7a      	ldr	r3, [pc, #488]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b2:	60bb      	str	r3, [r7, #8]
 80060b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060b6:	2301      	movs	r3, #1
 80060b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ba:	4b77      	ldr	r3, [pc, #476]	; (8006298 <HAL_RCC_OscConfig+0x474>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d118      	bne.n	80060f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060c6:	4b74      	ldr	r3, [pc, #464]	; (8006298 <HAL_RCC_OscConfig+0x474>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a73      	ldr	r2, [pc, #460]	; (8006298 <HAL_RCC_OscConfig+0x474>)
 80060cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d2:	f7fd fa25 	bl	8003520 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060da:	f7fd fa21 	bl	8003520 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e10c      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ec:	4b6a      	ldr	r3, [pc, #424]	; (8006298 <HAL_RCC_OscConfig+0x474>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0f0      	beq.n	80060da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d106      	bne.n	800610e <HAL_RCC_OscConfig+0x2ea>
 8006100:	4b64      	ldr	r3, [pc, #400]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006104:	4a63      	ldr	r2, [pc, #396]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	6713      	str	r3, [r2, #112]	; 0x70
 800610c:	e01c      	b.n	8006148 <HAL_RCC_OscConfig+0x324>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b05      	cmp	r3, #5
 8006114:	d10c      	bne.n	8006130 <HAL_RCC_OscConfig+0x30c>
 8006116:	4b5f      	ldr	r3, [pc, #380]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611a:	4a5e      	ldr	r2, [pc, #376]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 800611c:	f043 0304 	orr.w	r3, r3, #4
 8006120:	6713      	str	r3, [r2, #112]	; 0x70
 8006122:	4b5c      	ldr	r3, [pc, #368]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	4a5b      	ldr	r2, [pc, #364]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	6713      	str	r3, [r2, #112]	; 0x70
 800612e:	e00b      	b.n	8006148 <HAL_RCC_OscConfig+0x324>
 8006130:	4b58      	ldr	r3, [pc, #352]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006134:	4a57      	ldr	r2, [pc, #348]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006136:	f023 0301 	bic.w	r3, r3, #1
 800613a:	6713      	str	r3, [r2, #112]	; 0x70
 800613c:	4b55      	ldr	r3, [pc, #340]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006140:	4a54      	ldr	r2, [pc, #336]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006142:	f023 0304 	bic.w	r3, r3, #4
 8006146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d015      	beq.n	800617c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006150:	f7fd f9e6 	bl	8003520 <HAL_GetTick>
 8006154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006156:	e00a      	b.n	800616e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006158:	f7fd f9e2 	bl	8003520 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	f241 3288 	movw	r2, #5000	; 0x1388
 8006166:	4293      	cmp	r3, r2
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e0cb      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800616e:	4b49      	ldr	r3, [pc, #292]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	f003 0302 	and.w	r3, r3, #2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0ee      	beq.n	8006158 <HAL_RCC_OscConfig+0x334>
 800617a:	e014      	b.n	80061a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800617c:	f7fd f9d0 	bl	8003520 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006182:	e00a      	b.n	800619a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006184:	f7fd f9cc 	bl	8003520 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006192:	4293      	cmp	r3, r2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e0b5      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800619a:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 800619c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1ee      	bne.n	8006184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d105      	bne.n	80061b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ac:	4b39      	ldr	r3, [pc, #228]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	4a38      	ldr	r2, [pc, #224]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 80061b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 80a1 	beq.w	8006304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061c2:	4b34      	ldr	r3, [pc, #208]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d05c      	beq.n	8006288 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d141      	bne.n	800625a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d6:	4b31      	ldr	r3, [pc, #196]	; (800629c <HAL_RCC_OscConfig+0x478>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061dc:	f7fd f9a0 	bl	8003520 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e4:	f7fd f99c 	bl	8003520 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e087      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061f6:	4b27      	ldr	r3, [pc, #156]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f0      	bne.n	80061e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	019b      	lsls	r3, r3, #6
 8006212:	431a      	orrs	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006218:	085b      	lsrs	r3, r3, #1
 800621a:	3b01      	subs	r3, #1
 800621c:	041b      	lsls	r3, r3, #16
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	491b      	ldr	r1, [pc, #108]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 8006228:	4313      	orrs	r3, r2
 800622a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800622c:	4b1b      	ldr	r3, [pc, #108]	; (800629c <HAL_RCC_OscConfig+0x478>)
 800622e:	2201      	movs	r2, #1
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006232:	f7fd f975 	bl	8003520 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800623a:	f7fd f971 	bl	8003520 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e05c      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800624c:	4b11      	ldr	r3, [pc, #68]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d0f0      	beq.n	800623a <HAL_RCC_OscConfig+0x416>
 8006258:	e054      	b.n	8006304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <HAL_RCC_OscConfig+0x478>)
 800625c:	2200      	movs	r2, #0
 800625e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fd f95e 	bl	8003520 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006268:	f7fd f95a 	bl	8003520 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e045      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <HAL_RCC_OscConfig+0x470>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0x444>
 8006286:	e03d      	b.n	8006304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e038      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
 8006294:	40023800 	.word	0x40023800
 8006298:	40007000 	.word	0x40007000
 800629c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062a0:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <HAL_RCC_OscConfig+0x4ec>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	699b      	ldr	r3, [r3, #24]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d028      	beq.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d121      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d11a      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062d0:	4013      	ands	r3, r2
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062d8:	4293      	cmp	r3, r2
 80062da:	d111      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e6:	085b      	lsrs	r3, r3, #1
 80062e8:	3b01      	subs	r3, #1
 80062ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d107      	bne.n	8006300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	40023800 	.word	0x40023800

08006314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0cc      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006328:	4b68      	ldr	r3, [pc, #416]	; (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	429a      	cmp	r2, r3
 8006334:	d90c      	bls.n	8006350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006336:	4b65      	ldr	r3, [pc, #404]	; (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800633e:	4b63      	ldr	r3, [pc, #396]	; (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0b8      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0302 	and.w	r3, r3, #2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d020      	beq.n	800639e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006368:	4b59      	ldr	r3, [pc, #356]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	4a58      	ldr	r2, [pc, #352]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800636e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006380:	4b53      	ldr	r3, [pc, #332]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	4a52      	ldr	r2, [pc, #328]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800638a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800638c:	4b50      	ldr	r3, [pc, #320]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	494d      	ldr	r1, [pc, #308]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	4313      	orrs	r3, r2
 800639c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d044      	beq.n	8006434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d107      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b2:	4b47      	ldr	r3, [pc, #284]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d119      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e07f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d003      	beq.n	80063d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d107      	bne.n	80063e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d2:	4b3f      	ldr	r3, [pc, #252]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e06f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e2:	4b3b      	ldr	r3, [pc, #236]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e067      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063f2:	4b37      	ldr	r3, [pc, #220]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 0203 	bic.w	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4934      	ldr	r1, [pc, #208]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	4313      	orrs	r3, r2
 8006402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006404:	f7fd f88c 	bl	8003520 <HAL_GetTick>
 8006408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	e00a      	b.n	8006422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800640c:	f7fd f888 	bl	8003520 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	; 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e04f      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006422:	4b2b      	ldr	r3, [pc, #172]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 020c 	and.w	r2, r3, #12
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	429a      	cmp	r2, r3
 8006432:	d1eb      	bne.n	800640c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006434:	4b25      	ldr	r3, [pc, #148]	; (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	429a      	cmp	r2, r3
 8006440:	d20c      	bcs.n	800645c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006442:	4b22      	ldr	r3, [pc, #136]	; (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b20      	ldr	r3, [pc, #128]	; (80064cc <HAL_RCC_ClockConfig+0x1b8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e032      	b.n	80064c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006468:	4b19      	ldr	r3, [pc, #100]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	4916      	ldr	r1, [pc, #88]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	4313      	orrs	r3, r2
 8006478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006486:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	490e      	ldr	r1, [pc, #56]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 8006496:	4313      	orrs	r3, r2
 8006498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800649a:	f000 f821 	bl	80064e0 <HAL_RCC_GetSysClockFreq>
 800649e:	4602      	mov	r2, r0
 80064a0:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	091b      	lsrs	r3, r3, #4
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	490a      	ldr	r1, [pc, #40]	; (80064d4 <HAL_RCC_ClockConfig+0x1c0>)
 80064ac:	5ccb      	ldrb	r3, [r1, r3]
 80064ae:	fa22 f303 	lsr.w	r3, r2, r3
 80064b2:	4a09      	ldr	r2, [pc, #36]	; (80064d8 <HAL_RCC_ClockConfig+0x1c4>)
 80064b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064b6:	4b09      	ldr	r3, [pc, #36]	; (80064dc <HAL_RCC_ClockConfig+0x1c8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fb f8f4 	bl	80016a8 <HAL_InitTick>

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	40023c00 	.word	0x40023c00
 80064d0:	40023800 	.word	0x40023800
 80064d4:	0800faf4 	.word	0x0800faf4
 80064d8:	20000000 	.word	0x20000000
 80064dc:	20000080 	.word	0x20000080

080064e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064e4:	b094      	sub	sp, #80	; 0x50
 80064e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	647b      	str	r3, [r7, #68]	; 0x44
 80064ec:	2300      	movs	r3, #0
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f0:	2300      	movs	r3, #0
 80064f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064f8:	4b79      	ldr	r3, [pc, #484]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f003 030c 	and.w	r3, r3, #12
 8006500:	2b08      	cmp	r3, #8
 8006502:	d00d      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x40>
 8006504:	2b08      	cmp	r3, #8
 8006506:	f200 80e1 	bhi.w	80066cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_RCC_GetSysClockFreq+0x34>
 800650e:	2b04      	cmp	r3, #4
 8006510:	d003      	beq.n	800651a <HAL_RCC_GetSysClockFreq+0x3a>
 8006512:	e0db      	b.n	80066cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006514:	4b73      	ldr	r3, [pc, #460]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006516:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006518:	e0db      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800651a:	4b73      	ldr	r3, [pc, #460]	; (80066e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800651c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800651e:	e0d8      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006520:	4b6f      	ldr	r3, [pc, #444]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800652a:	4b6d      	ldr	r3, [pc, #436]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d063      	beq.n	80065fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006536:	4b6a      	ldr	r3, [pc, #424]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	099b      	lsrs	r3, r3, #6
 800653c:	2200      	movs	r2, #0
 800653e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006540:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006548:	633b      	str	r3, [r7, #48]	; 0x30
 800654a:	2300      	movs	r3, #0
 800654c:	637b      	str	r3, [r7, #52]	; 0x34
 800654e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006552:	4622      	mov	r2, r4
 8006554:	462b      	mov	r3, r5
 8006556:	f04f 0000 	mov.w	r0, #0
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	0159      	lsls	r1, r3, #5
 8006560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006564:	0150      	lsls	r0, r2, #5
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4621      	mov	r1, r4
 800656c:	1a51      	subs	r1, r2, r1
 800656e:	6139      	str	r1, [r7, #16]
 8006570:	4629      	mov	r1, r5
 8006572:	eb63 0301 	sbc.w	r3, r3, r1
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006584:	4659      	mov	r1, fp
 8006586:	018b      	lsls	r3, r1, #6
 8006588:	4651      	mov	r1, sl
 800658a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800658e:	4651      	mov	r1, sl
 8006590:	018a      	lsls	r2, r1, #6
 8006592:	4651      	mov	r1, sl
 8006594:	ebb2 0801 	subs.w	r8, r2, r1
 8006598:	4659      	mov	r1, fp
 800659a:	eb63 0901 	sbc.w	r9, r3, r1
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065b2:	4690      	mov	r8, r2
 80065b4:	4699      	mov	r9, r3
 80065b6:	4623      	mov	r3, r4
 80065b8:	eb18 0303 	adds.w	r3, r8, r3
 80065bc:	60bb      	str	r3, [r7, #8]
 80065be:	462b      	mov	r3, r5
 80065c0:	eb49 0303 	adc.w	r3, r9, r3
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065d2:	4629      	mov	r1, r5
 80065d4:	024b      	lsls	r3, r1, #9
 80065d6:	4621      	mov	r1, r4
 80065d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065dc:	4621      	mov	r1, r4
 80065de:	024a      	lsls	r2, r1, #9
 80065e0:	4610      	mov	r0, r2
 80065e2:	4619      	mov	r1, r3
 80065e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e6:	2200      	movs	r2, #0
 80065e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80065ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065f0:	f7fa fa74 	bl	8000adc <__aeabi_uldivmod>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4613      	mov	r3, r2
 80065fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065fc:	e058      	b.n	80066b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065fe:	4b38      	ldr	r3, [pc, #224]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	099b      	lsrs	r3, r3, #6
 8006604:	2200      	movs	r2, #0
 8006606:	4618      	mov	r0, r3
 8006608:	4611      	mov	r1, r2
 800660a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800660e:	623b      	str	r3, [r7, #32]
 8006610:	2300      	movs	r3, #0
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
 8006614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	f04f 0000 	mov.w	r0, #0
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	0159      	lsls	r1, r3, #5
 8006626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800662a:	0150      	lsls	r0, r2, #5
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4641      	mov	r1, r8
 8006632:	ebb2 0a01 	subs.w	sl, r2, r1
 8006636:	4649      	mov	r1, r9
 8006638:	eb63 0b01 	sbc.w	fp, r3, r1
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800664c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006650:	ebb2 040a 	subs.w	r4, r2, sl
 8006654:	eb63 050b 	sbc.w	r5, r3, fp
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	00eb      	lsls	r3, r5, #3
 8006662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006666:	00e2      	lsls	r2, r4, #3
 8006668:	4614      	mov	r4, r2
 800666a:	461d      	mov	r5, r3
 800666c:	4643      	mov	r3, r8
 800666e:	18e3      	adds	r3, r4, r3
 8006670:	603b      	str	r3, [r7, #0]
 8006672:	464b      	mov	r3, r9
 8006674:	eb45 0303 	adc.w	r3, r5, r3
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006686:	4629      	mov	r1, r5
 8006688:	028b      	lsls	r3, r1, #10
 800668a:	4621      	mov	r1, r4
 800668c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006690:	4621      	mov	r1, r4
 8006692:	028a      	lsls	r2, r1, #10
 8006694:	4610      	mov	r0, r2
 8006696:	4619      	mov	r1, r3
 8006698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669a:	2200      	movs	r2, #0
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	61fa      	str	r2, [r7, #28]
 80066a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066a4:	f7fa fa1a 	bl	8000adc <__aeabi_uldivmod>
 80066a8:	4602      	mov	r2, r0
 80066aa:	460b      	mov	r3, r1
 80066ac:	4613      	mov	r3, r2
 80066ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066b0:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	0c1b      	lsrs	r3, r3, #16
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	3301      	adds	r3, #1
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80066c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066ca:	e002      	b.n	80066d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80066ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3750      	adds	r7, #80	; 0x50
 80066d8:	46bd      	mov	sp, r7
 80066da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066de:	bf00      	nop
 80066e0:	40023800 	.word	0x40023800
 80066e4:	00f42400 	.word	0x00f42400
 80066e8:	007a1200 	.word	0x007a1200

080066ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <HAL_RCC_GetHCLKFreq+0x14>)
 80066f2:	681b      	ldr	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20000000 	.word	0x20000000

08006704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006708:	f7ff fff0 	bl	80066ec <HAL_RCC_GetHCLKFreq>
 800670c:	4602      	mov	r2, r0
 800670e:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	0a9b      	lsrs	r3, r3, #10
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	4903      	ldr	r1, [pc, #12]	; (8006728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800671a:	5ccb      	ldrb	r3, [r1, r3]
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	bd80      	pop	{r7, pc}
 8006724:	40023800 	.word	0x40023800
 8006728:	0800fb04 	.word	0x0800fb04

0800672c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	220f      	movs	r2, #15
 800673a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800673c:	4b12      	ldr	r3, [pc, #72]	; (8006788 <HAL_RCC_GetClockConfig+0x5c>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 0203 	and.w	r2, r3, #3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <HAL_RCC_GetClockConfig+0x5c>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <HAL_RCC_GetClockConfig+0x5c>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006760:	4b09      	ldr	r3, [pc, #36]	; (8006788 <HAL_RCC_GetClockConfig+0x5c>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	08db      	lsrs	r3, r3, #3
 8006766:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <HAL_RCC_GetClockConfig+0x60>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 020f 	and.w	r2, r3, #15
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	601a      	str	r2, [r3, #0]
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40023800 	.word	0x40023800
 800678c:	40023c00 	.word	0x40023c00

08006790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10b      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d105      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d075      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067c4:	4b91      	ldr	r3, [pc, #580]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ca:	f7fc fea9 	bl	8003520 <HAL_GetTick>
 80067ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067d0:	e008      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067d2:	f7fc fea5 	bl	8003520 <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e189      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067e4:	4b8a      	ldr	r3, [pc, #552]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1f0      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d009      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	019a      	lsls	r2, r3, #6
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	071b      	lsls	r3, r3, #28
 8006808:	4981      	ldr	r1, [pc, #516]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800680a:	4313      	orrs	r3, r2
 800680c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01f      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800681c:	4b7c      	ldr	r3, [pc, #496]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800681e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006822:	0f1b      	lsrs	r3, r3, #28
 8006824:	f003 0307 	and.w	r3, r3, #7
 8006828:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	019a      	lsls	r2, r3, #6
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	061b      	lsls	r3, r3, #24
 8006836:	431a      	orrs	r2, r3
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	071b      	lsls	r3, r3, #28
 800683c:	4974      	ldr	r1, [pc, #464]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800683e:	4313      	orrs	r3, r2
 8006840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006844:	4b72      	ldr	r3, [pc, #456]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800684a:	f023 021f 	bic.w	r2, r3, #31
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	3b01      	subs	r3, #1
 8006854:	496e      	ldr	r1, [pc, #440]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006856:	4313      	orrs	r3, r2
 8006858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00d      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	019a      	lsls	r2, r3, #6
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	061b      	lsls	r3, r3, #24
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	071b      	lsls	r3, r3, #28
 800687c:	4964      	ldr	r1, [pc, #400]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800687e:	4313      	orrs	r3, r2
 8006880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006884:	4b61      	ldr	r3, [pc, #388]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006886:	2201      	movs	r2, #1
 8006888:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800688a:	f7fc fe49 	bl	8003520 <HAL_GetTick>
 800688e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006890:	e008      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006892:	f7fc fe45 	bl	8003520 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d901      	bls.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068a0:	2303      	movs	r3, #3
 80068a2:	e129      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068a4:	4b5a      	ldr	r3, [pc, #360]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0f0      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d105      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d079      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80068c8:	4b52      	ldr	r3, [pc, #328]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80068ce:	f7fc fe27 	bl	8003520 <HAL_GetTick>
 80068d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068d4:	e008      	b.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068d6:	f7fc fe23 	bl	8003520 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d901      	bls.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e107      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80068e8:	4b49      	ldr	r3, [pc, #292]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f4:	d0ef      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0304 	and.w	r3, r3, #4
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d020      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006902:	4b43      	ldr	r3, [pc, #268]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	0f1b      	lsrs	r3, r3, #28
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	019a      	lsls	r2, r3, #6
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695b      	ldr	r3, [r3, #20]
 800691a:	061b      	lsls	r3, r3, #24
 800691c:	431a      	orrs	r2, r3
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	071b      	lsls	r3, r3, #28
 8006922:	493b      	ldr	r1, [pc, #236]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006924:	4313      	orrs	r3, r2
 8006926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800692a:	4b39      	ldr	r3, [pc, #228]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800692c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006930:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	3b01      	subs	r3, #1
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	4934      	ldr	r1, [pc, #208]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01e      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006950:	4b2f      	ldr	r3, [pc, #188]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006956:	0e1b      	lsrs	r3, r3, #24
 8006958:	f003 030f 	and.w	r3, r3, #15
 800695c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	019a      	lsls	r2, r3, #6
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	061b      	lsls	r3, r3, #24
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	071b      	lsls	r3, r3, #28
 8006970:	4927      	ldr	r1, [pc, #156]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006972:	4313      	orrs	r3, r2
 8006974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006978:	4b25      	ldr	r3, [pc, #148]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800697a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800697e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	4922      	ldr	r1, [pc, #136]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006988:	4313      	orrs	r3, r2
 800698a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800698e:	4b21      	ldr	r3, [pc, #132]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006990:	2201      	movs	r2, #1
 8006992:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006994:	f7fc fdc4 	bl	8003520 <HAL_GetTick>
 8006998:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800699a:	e008      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800699c:	f7fc fdc0 	bl	8003520 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d901      	bls.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e0a4      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80069ae:	4b18      	ldr	r3, [pc, #96]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ba:	d1ef      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 808b 	beq.w	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
 80069ce:	4b10      	ldr	r3, [pc, #64]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	4a0f      	ldr	r2, [pc, #60]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d8:	6413      	str	r3, [r2, #64]	; 0x40
 80069da:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a0b      	ldr	r2, [pc, #44]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80069ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069f2:	f7fc fd95 	bl	8003520 <HAL_GetTick>
 80069f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80069f8:	e010      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80069fa:	f7fc fd91 	bl	8003520 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d909      	bls.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e075      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006a0c:	42470068 	.word	0x42470068
 8006a10:	40023800 	.word	0x40023800
 8006a14:	42470070 	.word	0x42470070
 8006a18:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a1c:	4b38      	ldr	r3, [pc, #224]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0e8      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a28:	4b36      	ldr	r3, [pc, #216]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a30:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02f      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d028      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a46:	4b2f      	ldr	r3, [pc, #188]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a50:	4b2d      	ldr	r3, [pc, #180]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a56:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a5c:	4a29      	ldr	r2, [pc, #164]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a62:	4b28      	ldr	r3, [pc, #160]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d114      	bne.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a6e:	f7fc fd57 	bl	8003520 <HAL_GetTick>
 8006a72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a74:	e00a      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a76:	f7fc fd53 	bl	8003520 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e035      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a8c:	4b1d      	ldr	r3, [pc, #116]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0ee      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa4:	d10d      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006aa6:	4b17      	ldr	r3, [pc, #92]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aba:	4912      	ldr	r1, [pc, #72]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	608b      	str	r3, [r1, #8]
 8006ac0:	e005      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006ac2:	4b10      	ldr	r3, [pc, #64]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	4a0f      	ldr	r2, [pc, #60]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ac8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006acc:	6093      	str	r3, [r2, #8]
 8006ace:	4b0d      	ldr	r3, [pc, #52]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ad0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ada:	490a      	ldr	r1, [pc, #40]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d004      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006af2:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006af4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40007000 	.word	0x40007000
 8006b04:	40023800 	.word	0x40023800
 8006b08:	42470e40 	.word	0x42470e40
 8006b0c:	424711e0 	.word	0x424711e0

08006b10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e025      	b.n	8006b70 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d106      	bne.n	8006b3e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f81d 	bl	8006b78 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f001 f919 	bl	8007d88 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	f001 f96e 	bl	8007e42 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}

08006b78 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b086      	sub	sp, #24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b9e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d101      	bne.n	8006baa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e021      	b.n	8006bee <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d002      	beq.n	8006bb6 <HAL_SDRAM_SendCommand+0x2a>
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
 8006bb2:	2b05      	cmp	r3, #5
 8006bb4:	d118      	bne.n	8006be8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	68b9      	ldr	r1, [r7, #8]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f001 f9a4 	bl	8007f14 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d104      	bne.n	8006bde <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2205      	movs	r2, #5
 8006bd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006bdc:	e006      	b.n	8006bec <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006be6:	e001      	b.n	8006bec <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e000      	b.n	8006bee <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}

08006bf6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006bf6:	b580      	push	{r7, lr}
 8006bf8:	b082      	sub	sp, #8
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d101      	bne.n	8006c10 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e016      	b.n	8006c3e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d10f      	bne.n	8006c3c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f001 f9af 	bl	8007f8e <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006c3c:	2301      	movs	r3, #1
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b082      	sub	sp, #8
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e07b      	b.n	8006d50 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d108      	bne.n	8006c72 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c68:	d009      	beq.n	8006c7e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	61da      	str	r2, [r3, #28]
 8006c70:	e005      	b.n	8006c7e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d106      	bne.n	8006c9e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f885 	bl	8006da8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	ea42 0103 	orr.w	r1, r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	f003 0104 	and.w	r1, r3, #4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	f003 0210 	and.w	r2, r3, #16
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69da      	ldr	r2, [r3, #28]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e01a      	b.n	8006da0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2202      	movs	r2, #2
 8006d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d80:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f81a 	bl	8006dbc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	603b      	str	r3, [r7, #0]
 8006ddc:	4613      	mov	r3, r2
 8006dde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d101      	bne.n	8006df2 <HAL_SPI_Transmit+0x22>
 8006dee:	2302      	movs	r3, #2
 8006df0:	e126      	b.n	8007040 <HAL_SPI_Transmit+0x270>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dfa:	f7fc fb91 	bl	8003520 <HAL_GetTick>
 8006dfe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e00:	88fb      	ldrh	r3, [r7, #6]
 8006e02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d002      	beq.n	8006e16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e10:	2302      	movs	r3, #2
 8006e12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e14:	e10b      	b.n	800702e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <HAL_SPI_Transmit+0x52>
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e26:	e102      	b.n	800702e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	88fa      	ldrh	r2, [r7, #6]
 8006e40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	88fa      	ldrh	r2, [r7, #6]
 8006e46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e6e:	d10f      	bne.n	8006e90 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d007      	beq.n	8006eae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb6:	d14b      	bne.n	8006f50 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <HAL_SPI_Transmit+0xf6>
 8006ec0:	8afb      	ldrh	r3, [r7, #22]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d13e      	bne.n	8006f44 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	881a      	ldrh	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	1c9a      	adds	r2, r3, #2
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006eea:	e02b      	b.n	8006f44 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d112      	bne.n	8006f20 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	881a      	ldrh	r2, [r3, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	1c9a      	adds	r2, r3, #2
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f1e:	e011      	b.n	8006f44 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f20:	f7fc fafe 	bl	8003520 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d803      	bhi.n	8006f38 <HAL_SPI_Transmit+0x168>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d102      	bne.n	8006f3e <HAL_SPI_Transmit+0x16e>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d102      	bne.n	8006f44 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f42:	e074      	b.n	800702e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1ce      	bne.n	8006eec <HAL_SPI_Transmit+0x11c>
 8006f4e:	e04c      	b.n	8006fea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <HAL_SPI_Transmit+0x18e>
 8006f58:	8afb      	ldrh	r3, [r7, #22]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d140      	bne.n	8006fe0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	7812      	ldrb	r2, [r2, #0]
 8006f6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f84:	e02c      	b.n	8006fe0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d113      	bne.n	8006fbc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	330c      	adds	r3, #12
 8006f9e:	7812      	ldrb	r2, [r2, #0]
 8006fa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fba:	e011      	b.n	8006fe0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fbc:	f7fc fab0 	bl	8003520 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d803      	bhi.n	8006fd4 <HAL_SPI_Transmit+0x204>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd2:	d102      	bne.n	8006fda <HAL_SPI_Transmit+0x20a>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fde:	e026      	b.n	800702e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1cd      	bne.n	8006f86 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	6839      	ldr	r1, [r7, #0]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fbda 	bl	80077a8 <SPI_EndRxTxTransaction>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d002      	beq.n	8007000 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007008:	2300      	movs	r3, #0
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	77fb      	strb	r3, [r7, #31]
 800702a:	e000      	b.n	800702e <HAL_SPI_Transmit+0x25e>
  }

error:
 800702c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800703e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b088      	sub	sp, #32
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007064:	d112      	bne.n	800708c <HAL_SPI_Receive+0x44>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10e      	bne.n	800708c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2204      	movs	r2, #4
 8007072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	4613      	mov	r3, r2
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 f8f1 	bl	800726a <HAL_SPI_TransmitReceive>
 8007088:	4603      	mov	r3, r0
 800708a:	e0ea      	b.n	8007262 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007092:	2b01      	cmp	r3, #1
 8007094:	d101      	bne.n	800709a <HAL_SPI_Receive+0x52>
 8007096:	2302      	movs	r3, #2
 8007098:	e0e3      	b.n	8007262 <HAL_SPI_Receive+0x21a>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070a2:	f7fc fa3d 	bl	8003520 <HAL_GetTick>
 80070a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d002      	beq.n	80070ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80070b4:	2302      	movs	r3, #2
 80070b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070b8:	e0ca      	b.n	8007250 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d002      	beq.n	80070c6 <HAL_SPI_Receive+0x7e>
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070ca:	e0c1      	b.n	8007250 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2204      	movs	r2, #4
 80070d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	88fa      	ldrh	r2, [r7, #6]
 80070ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007112:	d10f      	bne.n	8007134 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007122:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007132:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713e:	2b40      	cmp	r3, #64	; 0x40
 8007140:	d007      	beq.n	8007152 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007150:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d162      	bne.n	8007220 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800715a:	e02e      	b.n	80071ba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b01      	cmp	r3, #1
 8007168:	d115      	bne.n	8007196 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f103 020c 	add.w	r2, r3, #12
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	7812      	ldrb	r2, [r2, #0]
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718a:	b29b      	uxth	r3, r3
 800718c:	3b01      	subs	r3, #1
 800718e:	b29a      	uxth	r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007194:	e011      	b.n	80071ba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007196:	f7fc f9c3 	bl	8003520 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d803      	bhi.n	80071ae <HAL_SPI_Receive+0x166>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d102      	bne.n	80071b4 <HAL_SPI_Receive+0x16c>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d102      	bne.n	80071ba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071b8:	e04a      	b.n	8007250 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1cb      	bne.n	800715c <HAL_SPI_Receive+0x114>
 80071c4:	e031      	b.n	800722a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d113      	bne.n	80071fc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	b292      	uxth	r2, r2
 80071e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	1c9a      	adds	r2, r3, #2
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071fa:	e011      	b.n	8007220 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071fc:	f7fc f990 	bl	8003520 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d803      	bhi.n	8007214 <HAL_SPI_Receive+0x1cc>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007212:	d102      	bne.n	800721a <HAL_SPI_Receive+0x1d2>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d102      	bne.n	8007220 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800721e:	e017      	b.n	8007250 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1cd      	bne.n	80071c6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fa54 	bl	80076dc <SPI_EndRxTransaction>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2220      	movs	r2, #32
 800723e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	75fb      	strb	r3, [r7, #23]
 800724c:	e000      	b.n	8007250 <HAL_SPI_Receive+0x208>
  }

error :
 800724e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b08c      	sub	sp, #48	; 0x30
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
 8007276:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007278:	2301      	movs	r3, #1
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x26>
 800728c:	2302      	movs	r3, #2
 800728e:	e18a      	b.n	80075a6 <HAL_SPI_TransmitReceive+0x33c>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007298:	f7fc f942 	bl	8003520 <HAL_GetTick>
 800729c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80072ae:	887b      	ldrh	r3, [r7, #2]
 80072b0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80072b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d00f      	beq.n	80072da <HAL_SPI_TransmitReceive+0x70>
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072c0:	d107      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <HAL_SPI_TransmitReceive+0x68>
 80072ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d003      	beq.n	80072da <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80072d2:	2302      	movs	r3, #2
 80072d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80072d8:	e15b      	b.n	8007592 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <HAL_SPI_TransmitReceive+0x82>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_SPI_TransmitReceive+0x82>
 80072e6:	887b      	ldrh	r3, [r7, #2]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80072f2:	e14e      	b.n	8007592 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b04      	cmp	r3, #4
 80072fe:	d003      	beq.n	8007308 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2205      	movs	r2, #5
 8007304:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	887a      	ldrh	r2, [r7, #2]
 8007318:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	887a      	ldrh	r2, [r7, #2]
 800731e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	887a      	ldrh	r2, [r7, #2]
 800732a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	887a      	ldrh	r2, [r7, #2]
 8007330:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	d007      	beq.n	800735c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800735a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007364:	d178      	bne.n	8007458 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <HAL_SPI_TransmitReceive+0x10a>
 800736e:	8b7b      	ldrh	r3, [r7, #26]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d166      	bne.n	8007442 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	881a      	ldrh	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	1c9a      	adds	r2, r3, #2
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800738e:	b29b      	uxth	r3, r3
 8007390:	3b01      	subs	r3, #1
 8007392:	b29a      	uxth	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007398:	e053      	b.n	8007442 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d11b      	bne.n	80073e0 <HAL_SPI_TransmitReceive+0x176>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d016      	beq.n	80073e0 <HAL_SPI_TransmitReceive+0x176>
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d113      	bne.n	80073e0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	881a      	ldrh	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c8:	1c9a      	adds	r2, r3, #2
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d119      	bne.n	8007422 <HAL_SPI_TransmitReceive+0x1b8>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d014      	beq.n	8007422 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	b292      	uxth	r2, r2
 8007404:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	1c9a      	adds	r2, r3, #2
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800741e:	2301      	movs	r3, #1
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007422:	f7fc f87d 	bl	8003520 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800742e:	429a      	cmp	r2, r3
 8007430:	d807      	bhi.n	8007442 <HAL_SPI_TransmitReceive+0x1d8>
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007438:	d003      	beq.n	8007442 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007440:	e0a7      	b.n	8007592 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1a6      	bne.n	800739a <HAL_SPI_TransmitReceive+0x130>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1a1      	bne.n	800739a <HAL_SPI_TransmitReceive+0x130>
 8007456:	e07c      	b.n	8007552 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x1fc>
 8007460:	8b7b      	ldrh	r3, [r7, #26]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d16b      	bne.n	800753e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	330c      	adds	r3, #12
 8007470:	7812      	ldrb	r2, [r2, #0]
 8007472:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007482:	b29b      	uxth	r3, r3
 8007484:	3b01      	subs	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748c:	e057      	b.n	800753e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b02      	cmp	r3, #2
 800749a:	d11c      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x26c>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d017      	beq.n	80074d6 <HAL_SPI_TransmitReceive+0x26c>
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d114      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	330c      	adds	r3, #12
 80074b6:	7812      	ldrb	r2, [r2, #0]
 80074b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	1c5a      	adds	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d119      	bne.n	8007518 <HAL_SPI_TransmitReceive+0x2ae>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d014      	beq.n	8007518 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007500:	1c5a      	adds	r2, r3, #1
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750a:	b29b      	uxth	r3, r3
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007514:	2301      	movs	r3, #1
 8007516:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007518:	f7fc f802 	bl	8003520 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007524:	429a      	cmp	r2, r3
 8007526:	d803      	bhi.n	8007530 <HAL_SPI_TransmitReceive+0x2c6>
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752e:	d102      	bne.n	8007536 <HAL_SPI_TransmitReceive+0x2cc>
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	2b00      	cmp	r3, #0
 8007534:	d103      	bne.n	800753e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800753c:	e029      	b.n	8007592 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007542:	b29b      	uxth	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1a2      	bne.n	800748e <HAL_SPI_TransmitReceive+0x224>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d19d      	bne.n	800748e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 f926 	bl	80077a8 <SPI_EndRxTxTransaction>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d006      	beq.n	8007570 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2220      	movs	r2, #32
 800756c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800756e:	e010      	b.n	8007592 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	e000      	b.n	8007592 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007590:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3730      	adds	r7, #48	; 0x30
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075bc:	b2db      	uxtb	r3, r3
}
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075dc:	f7fb ffa0 	bl	8003520 <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	4413      	add	r3, r2
 80075ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075ec:	f7fb ff98 	bl	8003520 <HAL_GetTick>
 80075f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075f2:	4b39      	ldr	r3, [pc, #228]	; (80076d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	015b      	lsls	r3, r3, #5
 80075f8:	0d1b      	lsrs	r3, r3, #20
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	fb02 f303 	mul.w	r3, r2, r3
 8007600:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007602:	e054      	b.n	80076ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760a:	d050      	beq.n	80076ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800760c:	f7fb ff88 	bl	8003520 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	429a      	cmp	r2, r3
 800761a:	d902      	bls.n	8007622 <SPI_WaitFlagStateUntilTimeout+0x56>
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d13d      	bne.n	800769e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007630:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800763a:	d111      	bne.n	8007660 <SPI_WaitFlagStateUntilTimeout+0x94>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007644:	d004      	beq.n	8007650 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800764e:	d107      	bne.n	8007660 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800765e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007668:	d10f      	bne.n	800768a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007678:	601a      	str	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007688:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e017      	b.n	80076ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	3b01      	subs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4013      	ands	r3, r2
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	461a      	mov	r2, r3
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d19b      	bne.n	8007604 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000000 	.word	0x20000000

080076dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076f0:	d111      	bne.n	8007716 <SPI_EndRxTransaction+0x3a>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076fa:	d004      	beq.n	8007706 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007704:	d107      	bne.n	8007716 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800771e:	d12a      	bne.n	8007776 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007728:	d012      	beq.n	8007750 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2200      	movs	r2, #0
 8007732:	2180      	movs	r1, #128	; 0x80
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff ff49 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d02d      	beq.n	800779c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007744:	f043 0220 	orr.w	r2, r3, #32
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e026      	b.n	800779e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	2101      	movs	r1, #1
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7ff ff36 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01a      	beq.n	800779c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776a:	f043 0220 	orr.w	r2, r3, #32
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e013      	b.n	800779e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	2200      	movs	r2, #0
 800777e:	2101      	movs	r1, #1
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff ff23 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d007      	beq.n	800779c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007790:	f043 0220 	orr.w	r2, r3, #32
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e000      	b.n	800779e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077b4:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <SPI_EndRxTxTransaction+0x7c>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1b      	ldr	r2, [pc, #108]	; (8007828 <SPI_EndRxTxTransaction+0x80>)
 80077ba:	fba2 2303 	umull	r2, r3, r2, r3
 80077be:	0d5b      	lsrs	r3, r3, #21
 80077c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077c4:	fb02 f303 	mul.w	r3, r2, r3
 80077c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077d2:	d112      	bne.n	80077fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2200      	movs	r2, #0
 80077dc:	2180      	movs	r1, #128	; 0x80
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff fef4 	bl	80075cc <SPI_WaitFlagStateUntilTimeout>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d016      	beq.n	8007818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	f043 0220 	orr.w	r2, r3, #32
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e00f      	b.n	800781a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	3b01      	subs	r3, #1
 8007804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007810:	2b80      	cmp	r3, #128	; 0x80
 8007812:	d0f2      	beq.n	80077fa <SPI_EndRxTxTransaction+0x52>
 8007814:	e000      	b.n	8007818 <SPI_EndRxTxTransaction+0x70>
        break;
 8007816:	bf00      	nop
  }

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000000 	.word	0x20000000
 8007828:	165e9f81 	.word	0x165e9f81

0800782c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e041      	b.n	80078c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f839 	bl	80078ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3304      	adds	r3, #4
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f000 f9d8 	bl	8007c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3708      	adds	r7, #8
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
	...

080078e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d001      	beq.n	80078f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e04e      	b.n	8007996 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2202      	movs	r2, #2
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a23      	ldr	r2, [pc, #140]	; (80079a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d022      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0x80>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007922:	d01d      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0x80>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1f      	ldr	r2, [pc, #124]	; (80079a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d018      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0x80>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a1e      	ldr	r2, [pc, #120]	; (80079ac <HAL_TIM_Base_Start_IT+0xcc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d013      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0x80>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a1c      	ldr	r2, [pc, #112]	; (80079b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00e      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0x80>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a1b      	ldr	r2, [pc, #108]	; (80079b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d009      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0x80>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a19      	ldr	r2, [pc, #100]	; (80079b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d004      	beq.n	8007960 <HAL_TIM_Base_Start_IT+0x80>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a18      	ldr	r2, [pc, #96]	; (80079bc <HAL_TIM_Base_Start_IT+0xdc>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d111      	bne.n	8007984 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b06      	cmp	r3, #6
 8007970:	d010      	beq.n	8007994 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0201 	orr.w	r2, r2, #1
 8007980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007982:	e007      	b.n	8007994 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 0201 	orr.w	r2, r2, #1
 8007992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	40010400 	.word	0x40010400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40001800 	.word	0x40001800

080079c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d122      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d11b      	bne.n	8007a1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f06f 0202 	mvn.w	r2, #2
 80079ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f003 0303 	and.w	r3, r3, #3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f8ee 	bl	8007be4 <HAL_TIM_IC_CaptureCallback>
 8007a08:	e005      	b.n	8007a16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f8e0 	bl	8007bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f8f1 	bl	8007bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0304 	and.w	r3, r3, #4
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d122      	bne.n	8007a70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d11b      	bne.n	8007a70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0204 	mvn.w	r2, #4
 8007a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d003      	beq.n	8007a5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f8c4 	bl	8007be4 <HAL_TIM_IC_CaptureCallback>
 8007a5c:	e005      	b.n	8007a6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f8b6 	bl	8007bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f8c7 	bl	8007bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b08      	cmp	r3, #8
 8007a7c:	d122      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68db      	ldr	r3, [r3, #12]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d11b      	bne.n	8007ac4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f06f 0208 	mvn.w	r2, #8
 8007a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2204      	movs	r2, #4
 8007a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d003      	beq.n	8007ab2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f89a 	bl	8007be4 <HAL_TIM_IC_CaptureCallback>
 8007ab0:	e005      	b.n	8007abe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f88c 	bl	8007bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 f89d 	bl	8007bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d122      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d11b      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f06f 0210 	mvn.w	r2, #16
 8007ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2208      	movs	r2, #8
 8007aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f870 	bl	8007be4 <HAL_TIM_IC_CaptureCallback>
 8007b04:	e005      	b.n	8007b12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f862 	bl	8007bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 f873 	bl	8007bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d10e      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d107      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0201 	mvn.w	r2, #1
 8007b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7f9 fd6e 	bl	8001620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b4e:	2b80      	cmp	r3, #128	; 0x80
 8007b50:	d10e      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5c:	2b80      	cmp	r3, #128	; 0x80
 8007b5e:	d107      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f902 	bl	8007d74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b40      	cmp	r3, #64	; 0x40
 8007b7c:	d10e      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	d107      	bne.n	8007b9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f838 	bl	8007c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b20      	cmp	r3, #32
 8007ba8:	d10e      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d107      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0220 	mvn.w	r2, #32
 8007bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f8cc 	bl	8007d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bc8:	bf00      	nop
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a40      	ldr	r2, [pc, #256]	; (8007d34 <TIM_Base_SetConfig+0x114>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d013      	beq.n	8007c60 <TIM_Base_SetConfig+0x40>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c3e:	d00f      	beq.n	8007c60 <TIM_Base_SetConfig+0x40>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a3d      	ldr	r2, [pc, #244]	; (8007d38 <TIM_Base_SetConfig+0x118>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d00b      	beq.n	8007c60 <TIM_Base_SetConfig+0x40>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a3c      	ldr	r2, [pc, #240]	; (8007d3c <TIM_Base_SetConfig+0x11c>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d007      	beq.n	8007c60 <TIM_Base_SetConfig+0x40>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a3b      	ldr	r2, [pc, #236]	; (8007d40 <TIM_Base_SetConfig+0x120>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d003      	beq.n	8007c60 <TIM_Base_SetConfig+0x40>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a3a      	ldr	r2, [pc, #232]	; (8007d44 <TIM_Base_SetConfig+0x124>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d108      	bne.n	8007c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <TIM_Base_SetConfig+0x114>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d02b      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c80:	d027      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a2c      	ldr	r2, [pc, #176]	; (8007d38 <TIM_Base_SetConfig+0x118>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d023      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a2b      	ldr	r2, [pc, #172]	; (8007d3c <TIM_Base_SetConfig+0x11c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d01f      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a2a      	ldr	r2, [pc, #168]	; (8007d40 <TIM_Base_SetConfig+0x120>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d01b      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a29      	ldr	r2, [pc, #164]	; (8007d44 <TIM_Base_SetConfig+0x124>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d017      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a28      	ldr	r2, [pc, #160]	; (8007d48 <TIM_Base_SetConfig+0x128>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d013      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a27      	ldr	r2, [pc, #156]	; (8007d4c <TIM_Base_SetConfig+0x12c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d00f      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a26      	ldr	r2, [pc, #152]	; (8007d50 <TIM_Base_SetConfig+0x130>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00b      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a25      	ldr	r2, [pc, #148]	; (8007d54 <TIM_Base_SetConfig+0x134>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d007      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a24      	ldr	r2, [pc, #144]	; (8007d58 <TIM_Base_SetConfig+0x138>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d003      	beq.n	8007cd2 <TIM_Base_SetConfig+0xb2>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a23      	ldr	r2, [pc, #140]	; (8007d5c <TIM_Base_SetConfig+0x13c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d108      	bne.n	8007ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a0a      	ldr	r2, [pc, #40]	; (8007d34 <TIM_Base_SetConfig+0x114>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d003      	beq.n	8007d18 <TIM_Base_SetConfig+0xf8>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a0c      	ldr	r2, [pc, #48]	; (8007d44 <TIM_Base_SetConfig+0x124>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d103      	bne.n	8007d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	691a      	ldr	r2, [r3, #16]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2201      	movs	r2, #1
 8007d24:	615a      	str	r2, [r3, #20]
}
 8007d26:	bf00      	nop
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40010400 	.word	0x40010400
 8007d48:	40014000 	.word	0x40014000
 8007d4c:	40014400 	.word	0x40014400
 8007d50:	40014800 	.word	0x40014800
 8007d54:	40001800 	.word	0x40001800
 8007d58:	40001c00 	.word	0x40001c00
 8007d5c:	40002000 	.word	0x40002000

08007d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d68:	bf00      	nop
 8007d6a:	370c      	adds	r7, #12
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d123      	bne.n	8007de2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007da2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	6851      	ldr	r1, [r2, #4]
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	6892      	ldr	r2, [r2, #8]
 8007dae:	4311      	orrs	r1, r2
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	68d2      	ldr	r2, [r2, #12]
 8007db4:	4311      	orrs	r1, r2
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	6912      	ldr	r2, [r2, #16]
 8007dba:	4311      	orrs	r1, r2
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	6952      	ldr	r2, [r2, #20]
 8007dc0:	4311      	orrs	r1, r2
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	6992      	ldr	r2, [r2, #24]
 8007dc6:	4311      	orrs	r1, r2
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	69d2      	ldr	r2, [r2, #28]
 8007dcc:	4311      	orrs	r1, r2
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	6a12      	ldr	r2, [r2, #32]
 8007dd2:	4311      	orrs	r1, r2
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	e028      	b.n	8007e34 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	69d9      	ldr	r1, [r3, #28]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	4319      	orrs	r1, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	430b      	orrs	r3, r1
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	6851      	ldr	r1, [r2, #4]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	6892      	ldr	r2, [r2, #8]
 8007e14:	4311      	orrs	r1, r2
 8007e16:	683a      	ldr	r2, [r7, #0]
 8007e18:	68d2      	ldr	r2, [r2, #12]
 8007e1a:	4311      	orrs	r1, r2
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	6912      	ldr	r2, [r2, #16]
 8007e20:	4311      	orrs	r1, r2
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	6952      	ldr	r2, [r2, #20]
 8007e26:	4311      	orrs	r1, r2
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	6992      	ldr	r2, [r2, #24]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	431a      	orrs	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b085      	sub	sp, #20
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d128      	bne.n	8007ea6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	1e59      	subs	r1, r3, #1
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	4319      	orrs	r1, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	3b01      	subs	r3, #1
 8007e72:	021b      	lsls	r3, r3, #8
 8007e74:	4319      	orrs	r1, r3
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	031b      	lsls	r3, r3, #12
 8007e7e:	4319      	orrs	r1, r3
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	3b01      	subs	r3, #1
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	4319      	orrs	r1, r3
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	051b      	lsls	r3, r3, #20
 8007e92:	4319      	orrs	r1, r3
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	061b      	lsls	r3, r3, #24
 8007e9c:	430b      	orrs	r3, r1
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	609a      	str	r2, [r3, #8]
 8007ea4:	e02f      	b.n	8007f06 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007eae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	68d2      	ldr	r2, [r2, #12]
 8007eb6:	3a01      	subs	r2, #1
 8007eb8:	0311      	lsls	r1, r2, #12
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	6952      	ldr	r2, [r2, #20]
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	0512      	lsls	r2, r2, #20
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	1e59      	subs	r1, r3, #1
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	011b      	lsls	r3, r3, #4
 8007ee0:	4319      	orrs	r1, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	4319      	orrs	r1, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	041b      	lsls	r3, r3, #16
 8007ef4:	4319      	orrs	r1, r3
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	061b      	lsls	r3, r3, #24
 8007efe:	430b      	orrs	r3, r1
 8007f00:	431a      	orrs	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	0d9b      	lsrs	r3, r3, #22
 8007f2a:	059b      	lsls	r3, r3, #22
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	6811      	ldr	r1, [r2, #0]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	6852      	ldr	r2, [r2, #4]
 8007f34:	4311      	orrs	r1, r2
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	6892      	ldr	r2, [r2, #8]
 8007f3a:	3a01      	subs	r2, #1
 8007f3c:	0152      	lsls	r2, r2, #5
 8007f3e:	4311      	orrs	r1, r2
 8007f40:	68ba      	ldr	r2, [r7, #8]
 8007f42:	68d2      	ldr	r2, [r2, #12]
 8007f44:	0252      	lsls	r2, r2, #9
 8007f46:	430a      	orrs	r2, r1
 8007f48:	431a      	orrs	r2, r3
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8007f4e:	f7fb fae7 	bl	8003520 <HAL_GetTick>
 8007f52:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007f54:	e010      	b.n	8007f78 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d00c      	beq.n	8007f78 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <FMC_SDRAM_SendCommand+0x60>
 8007f64:	f7fb fadc 	bl	8003520 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d201      	bcs.n	8007f78 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e006      	b.n	8007f86 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b20      	cmp	r3, #32
 8007f82:	d0e8      	beq.n	8007f56 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007fa0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8007fa4:	683a      	ldr	r2, [r7, #0]
 8007fa6:	0052      	lsls	r2, r2, #1
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	f107 001c 	add.w	r0, r7, #28
 8007fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d122      	bne.n	800801a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d105      	bne.n	800800e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 fbee 	bl	80097f0 <USB_CoreReset>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
 8008018:	e01a      	b.n	8008050 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fbe2 	bl	80097f0 <USB_CoreReset>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
 8008042:	e005      	b.n	8008050 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	2b01      	cmp	r3, #1
 8008054:	d10b      	bne.n	800806e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f043 0206 	orr.w	r2, r3, #6
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f043 0220 	orr.w	r2, r3, #32
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800807a:	b004      	add	sp, #16
 800807c:	4770      	bx	lr
	...

08008080 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	4613      	mov	r3, r2
 800808c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d165      	bne.n	8008160 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4a41      	ldr	r2, [pc, #260]	; (800819c <USB_SetTurnaroundTime+0x11c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d906      	bls.n	80080aa <USB_SetTurnaroundTime+0x2a>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4a40      	ldr	r2, [pc, #256]	; (80081a0 <USB_SetTurnaroundTime+0x120>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d202      	bcs.n	80080aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80080a4:	230f      	movs	r3, #15
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	e062      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4a3c      	ldr	r2, [pc, #240]	; (80081a0 <USB_SetTurnaroundTime+0x120>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d306      	bcc.n	80080c0 <USB_SetTurnaroundTime+0x40>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4a3b      	ldr	r2, [pc, #236]	; (80081a4 <USB_SetTurnaroundTime+0x124>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d202      	bcs.n	80080c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80080ba:	230e      	movs	r3, #14
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	e057      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4a38      	ldr	r2, [pc, #224]	; (80081a4 <USB_SetTurnaroundTime+0x124>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d306      	bcc.n	80080d6 <USB_SetTurnaroundTime+0x56>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	4a37      	ldr	r2, [pc, #220]	; (80081a8 <USB_SetTurnaroundTime+0x128>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d202      	bcs.n	80080d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080d0:	230d      	movs	r3, #13
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e04c      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	4a33      	ldr	r2, [pc, #204]	; (80081a8 <USB_SetTurnaroundTime+0x128>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d306      	bcc.n	80080ec <USB_SetTurnaroundTime+0x6c>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4a32      	ldr	r2, [pc, #200]	; (80081ac <USB_SetTurnaroundTime+0x12c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d802      	bhi.n	80080ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080e6:	230c      	movs	r3, #12
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	e041      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4a2f      	ldr	r2, [pc, #188]	; (80081ac <USB_SetTurnaroundTime+0x12c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d906      	bls.n	8008102 <USB_SetTurnaroundTime+0x82>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4a2e      	ldr	r2, [pc, #184]	; (80081b0 <USB_SetTurnaroundTime+0x130>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d802      	bhi.n	8008102 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080fc:	230b      	movs	r3, #11
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	e036      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	4a2a      	ldr	r2, [pc, #168]	; (80081b0 <USB_SetTurnaroundTime+0x130>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d906      	bls.n	8008118 <USB_SetTurnaroundTime+0x98>
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4a29      	ldr	r2, [pc, #164]	; (80081b4 <USB_SetTurnaroundTime+0x134>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d802      	bhi.n	8008118 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008112:	230a      	movs	r3, #10
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	e02b      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4a26      	ldr	r2, [pc, #152]	; (80081b4 <USB_SetTurnaroundTime+0x134>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d906      	bls.n	800812e <USB_SetTurnaroundTime+0xae>
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4a25      	ldr	r2, [pc, #148]	; (80081b8 <USB_SetTurnaroundTime+0x138>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d202      	bcs.n	800812e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008128:	2309      	movs	r3, #9
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e020      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4a21      	ldr	r2, [pc, #132]	; (80081b8 <USB_SetTurnaroundTime+0x138>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d306      	bcc.n	8008144 <USB_SetTurnaroundTime+0xc4>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4a20      	ldr	r2, [pc, #128]	; (80081bc <USB_SetTurnaroundTime+0x13c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d802      	bhi.n	8008144 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800813e:	2308      	movs	r3, #8
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e015      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <USB_SetTurnaroundTime+0x13c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d906      	bls.n	800815a <USB_SetTurnaroundTime+0xda>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4a1c      	ldr	r2, [pc, #112]	; (80081c0 <USB_SetTurnaroundTime+0x140>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d202      	bcs.n	800815a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008154:	2307      	movs	r3, #7
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e00a      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800815a:	2306      	movs	r3, #6
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	e007      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008166:	2309      	movs	r3, #9
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	e001      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800816c:	2309      	movs	r3, #9
 800816e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	029b      	lsls	r3, r3, #10
 8008184:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008188:	431a      	orrs	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	00d8acbf 	.word	0x00d8acbf
 80081a0:	00e4e1c0 	.word	0x00e4e1c0
 80081a4:	00f42400 	.word	0x00f42400
 80081a8:	01067380 	.word	0x01067380
 80081ac:	011a499f 	.word	0x011a499f
 80081b0:	01312cff 	.word	0x01312cff
 80081b4:	014ca43f 	.word	0x014ca43f
 80081b8:	016e3600 	.word	0x016e3600
 80081bc:	01a6ab1f 	.word	0x01a6ab1f
 80081c0:	01e84800 	.word	0x01e84800

080081c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f043 0201 	orr.w	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f023 0201 	bic.w	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d115      	bne.n	8008256 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008236:	2001      	movs	r0, #1
 8008238:	f7fb f97e 	bl	8003538 <HAL_Delay>
      ms++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 fa45 	bl	80096d2 <USB_GetMode>
 8008248:	4603      	mov	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	d01e      	beq.n	800828c <USB_SetCurrentMode+0x84>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b31      	cmp	r3, #49	; 0x31
 8008252:	d9f0      	bls.n	8008236 <USB_SetCurrentMode+0x2e>
 8008254:	e01a      	b.n	800828c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d115      	bne.n	8008288 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008268:	2001      	movs	r0, #1
 800826a:	f7fb f965 	bl	8003538 <HAL_Delay>
      ms++;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3301      	adds	r3, #1
 8008272:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 fa2c 	bl	80096d2 <USB_GetMode>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d005      	beq.n	800828c <USB_SetCurrentMode+0x84>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b31      	cmp	r3, #49	; 0x31
 8008284:	d9f0      	bls.n	8008268 <USB_SetCurrentMode+0x60>
 8008286:	e001      	b.n	800828c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e005      	b.n	8008298 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b32      	cmp	r3, #50	; 0x32
 8008290:	d101      	bne.n	8008296 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e000      	b.n	8008298 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082a0:	b084      	sub	sp, #16
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80082ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082ba:	2300      	movs	r3, #0
 80082bc:	613b      	str	r3, [r7, #16]
 80082be:	e009      	b.n	80082d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	3340      	adds	r3, #64	; 0x40
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	3301      	adds	r3, #1
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b0e      	cmp	r3, #14
 80082d8:	d9f2      	bls.n	80082c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d11c      	bne.n	800831a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082ee:	f043 0302 	orr.w	r3, r3, #2
 80082f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	639a      	str	r2, [r3, #56]	; 0x38
 8008318:	e00b      	b.n	8008332 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008338:	461a      	mov	r2, r3
 800833a:	2300      	movs	r3, #0
 800833c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008344:	4619      	mov	r1, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834c:	461a      	mov	r2, r3
 800834e:	680b      	ldr	r3, [r1, #0]
 8008350:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	2b01      	cmp	r3, #1
 8008356:	d10c      	bne.n	8008372 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800835e:	2100      	movs	r1, #0
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f965 	bl	8008630 <USB_SetDevSpeed>
 8008366:	e008      	b.n	800837a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008368:	2101      	movs	r1, #1
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f960 	bl	8008630 <USB_SetDevSpeed>
 8008370:	e003      	b.n	800837a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008372:	2103      	movs	r1, #3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f95b 	bl	8008630 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800837a:	2110      	movs	r1, #16
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f8f3 	bl	8008568 <USB_FlushTxFifo>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f91f 	bl	80085d0 <USB_FlushRxFifo>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a2:	461a      	mov	r2, r3
 80083a4:	2300      	movs	r3, #0
 80083a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ae:	461a      	mov	r2, r3
 80083b0:	2300      	movs	r3, #0
 80083b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	461a      	mov	r2, r3
 80083bc:	2300      	movs	r3, #0
 80083be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	e043      	b.n	800844e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083dc:	d118      	bne.n	8008410 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f0:	461a      	mov	r2, r3
 80083f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	e013      	b.n	8008422 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008406:	461a      	mov	r2, r3
 8008408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	e008      	b.n	8008422 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	461a      	mov	r2, r3
 800841e:	2300      	movs	r3, #0
 8008420:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842e:	461a      	mov	r2, r3
 8008430:	2300      	movs	r3, #0
 8008432:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	461a      	mov	r2, r3
 8008442:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008446:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3301      	adds	r3, #1
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	429a      	cmp	r2, r3
 8008454:	d3b7      	bcc.n	80083c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	e043      	b.n	80084e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800846e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008472:	d118      	bne.n	80084a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008486:	461a      	mov	r2, r3
 8008488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e013      	b.n	80084b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849c:	461a      	mov	r2, r3
 800849e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	e008      	b.n	80084b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	461a      	mov	r2, r3
 80084b4:	2300      	movs	r3, #0
 80084b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	461a      	mov	r2, r3
 80084c6:	2300      	movs	r3, #0
 80084c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d6:	461a      	mov	r2, r3
 80084d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3301      	adds	r3, #1
 80084e2:	613b      	str	r3, [r7, #16]
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d3b7      	bcc.n	800845c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800850c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	2b00      	cmp	r3, #0
 8008512:	d105      	bne.n	8008520 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f043 0210 	orr.w	r2, r3, #16
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <USB_DevInit+0x2c4>)
 8008526:	4313      	orrs	r3, r2
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f043 0208 	orr.w	r2, r3, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800853e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d107      	bne.n	8008554 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800854c:	f043 0304 	orr.w	r3, r3, #4
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008554:	7dfb      	ldrb	r3, [r7, #23]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008560:	b004      	add	sp, #16
 8008562:	4770      	bx	lr
 8008564:	803c3800 	.word	0x803c3800

08008568 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4a13      	ldr	r2, [pc, #76]	; (80085cc <USB_FlushTxFifo+0x64>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d901      	bls.n	8008588 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e01b      	b.n	80085c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	daf2      	bge.n	8008576 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	019b      	lsls	r3, r3, #6
 8008598:	f043 0220 	orr.w	r2, r3, #32
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3301      	adds	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4a08      	ldr	r2, [pc, #32]	; (80085cc <USB_FlushTxFifo+0x64>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d901      	bls.n	80085b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e006      	b.n	80085c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d0f0      	beq.n	80085a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	00030d40 	.word	0x00030d40

080085d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4a11      	ldr	r2, [pc, #68]	; (800862c <USB_FlushRxFifo+0x5c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d901      	bls.n	80085ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e018      	b.n	8008620 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	daf2      	bge.n	80085dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2210      	movs	r2, #16
 80085fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a08      	ldr	r2, [pc, #32]	; (800862c <USB_FlushRxFifo+0x5c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d901      	bls.n	8008612 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e006      	b.n	8008620 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b10      	cmp	r3, #16
 800861c:	d0f0      	beq.n	8008600 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	00030d40 	.word	0x00030d40

08008630 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008650:	4313      	orrs	r3, r2
 8008652:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008662:	b480      	push	{r7}
 8008664:	b087      	sub	sp, #28
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f003 0306 	and.w	r3, r3, #6
 800867a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]
 8008686:	e00a      	b.n	800869e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d002      	beq.n	8008694 <USB_GetDevSpeed+0x32>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b06      	cmp	r3, #6
 8008692:	d102      	bne.n	800869a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008694:	2302      	movs	r3, #2
 8008696:	75fb      	strb	r3, [r7, #23]
 8008698:	e001      	b.n	800869e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800869a:	230f      	movs	r3, #15
 800869c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800869e:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	371c      	adds	r7, #28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d13a      	bne.n	800873e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	2101      	movs	r1, #1
 80086da:	fa01 f303 	lsl.w	r3, r1, r3
 80086de:	b29b      	uxth	r3, r3
 80086e0:	68f9      	ldr	r1, [r7, #12]
 80086e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e6:	4313      	orrs	r3, r2
 80086e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d155      	bne.n	80087ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800871c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	059b      	lsls	r3, r3, #22
 8008722:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008724:	4313      	orrs	r3, r2
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	440a      	add	r2, r1
 800872e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	e036      	b.n	80087ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008744:	69da      	ldr	r2, [r3, #28]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	2101      	movs	r1, #1
 8008750:	fa01 f303 	lsl.w	r3, r1, r3
 8008754:	041b      	lsls	r3, r3, #16
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800875c:	4313      	orrs	r3, r2
 800875e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d11a      	bne.n	80087ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	791b      	ldrb	r3, [r3, #4]
 8008790:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008792:	430b      	orrs	r3, r1
 8008794:	4313      	orrs	r3, r2
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	0151      	lsls	r1, r2, #5
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	440a      	add	r2, r1
 800879e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d161      	bne.n	800889c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ee:	d11f      	bne.n	8008830 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	440a      	add	r2, r1
 8008806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800880a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800880e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800882e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	2101      	movs	r1, #1
 8008842:	fa01 f303 	lsl.w	r3, r1, r3
 8008846:	b29b      	uxth	r3, r3
 8008848:	43db      	mvns	r3, r3
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008850:	4013      	ands	r3, r2
 8008852:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	2101      	movs	r1, #1
 8008866:	fa01 f303 	lsl.w	r3, r1, r3
 800886a:	b29b      	uxth	r3, r3
 800886c:	43db      	mvns	r3, r3
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008874:	4013      	ands	r3, r2
 8008876:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	0159      	lsls	r1, r3, #5
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	440b      	add	r3, r1
 800888e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008892:	4619      	mov	r1, r3
 8008894:	4b35      	ldr	r3, [pc, #212]	; (800896c <USB_DeactivateEndpoint+0x1b0>)
 8008896:	4013      	ands	r3, r2
 8008898:	600b      	str	r3, [r1, #0]
 800889a:	e060      	b.n	800895e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b2:	d11f      	bne.n	80088f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	2101      	movs	r1, #1
 8008906:	fa01 f303 	lsl.w	r3, r1, r3
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	43db      	mvns	r3, r3
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008914:	4013      	ands	r3, r2
 8008916:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891e:	69da      	ldr	r2, [r3, #28]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	2101      	movs	r1, #1
 800892a:	fa01 f303 	lsl.w	r3, r1, r3
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	43db      	mvns	r3, r3
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008938:	4013      	ands	r3, r2
 800893a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	0159      	lsls	r1, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	440b      	add	r3, r1
 8008952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008956:	4619      	mov	r1, r3
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <USB_DeactivateEndpoint+0x1b4>)
 800895a:	4013      	ands	r3, r2
 800895c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	ec337800 	.word	0xec337800
 8008970:	eff37800 	.word	0xeff37800

08008974 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	; 0x28
 8008978:	af02      	add	r7, sp, #8
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b01      	cmp	r3, #1
 8008992:	f040 815c 	bne.w	8008c4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d132      	bne.n	8008a04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	0151      	lsls	r1, r2, #5
 80089b0:	69fa      	ldr	r2, [r7, #28]
 80089b2:	440a      	add	r2, r1
 80089b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	0151      	lsls	r1, r2, #5
 80089d4:	69fa      	ldr	r2, [r7, #28]
 80089d6:	440a      	add	r2, r1
 80089d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	0151      	lsls	r1, r2, #5
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	440a      	add	r2, r1
 80089f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089fc:	0cdb      	lsrs	r3, r3, #19
 80089fe:	04db      	lsls	r3, r3, #19
 8008a00:	6113      	str	r3, [r2, #16]
 8008a02:	e074      	b.n	8008aee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	0151      	lsls	r1, r2, #5
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	440a      	add	r2, r1
 8008a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a1e:	0cdb      	lsrs	r3, r3, #19
 8008a20:	04db      	lsls	r3, r3, #19
 8008a22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	0151      	lsls	r1, r2, #5
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	440a      	add	r2, r1
 8008a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	6999      	ldr	r1, [r3, #24]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	440b      	add	r3, r1
 8008a60:	1e59      	subs	r1, r3, #1
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a6c:	4b9d      	ldr	r3, [pc, #628]	; (8008ce4 <USB_EPStartXfer+0x370>)
 8008a6e:	400b      	ands	r3, r1
 8008a70:	69b9      	ldr	r1, [r7, #24]
 8008a72:	0148      	lsls	r0, r1, #5
 8008a74:	69f9      	ldr	r1, [r7, #28]
 8008a76:	4401      	add	r1, r0
 8008a78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a96:	69b9      	ldr	r1, [r7, #24]
 8008a98:	0148      	lsls	r0, r1, #5
 8008a9a:	69f9      	ldr	r1, [r7, #28]
 8008a9c:	4401      	add	r1, r0
 8008a9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	791b      	ldrb	r3, [r3, #4]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d11f      	bne.n	8008aee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008acc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008aec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d14b      	bne.n	8008b8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d009      	beq.n	8008b10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	791b      	ldrb	r3, [r3, #4]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d128      	bne.n	8008b6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d110      	bne.n	8008b4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	e00f      	b.n	8008b6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	e133      	b.n	8008df4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	0151      	lsls	r1, r2, #5
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	440a      	add	r2, r1
 8008ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008baa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	791b      	ldrb	r3, [r3, #4]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d015      	beq.n	8008be0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 811b 	beq.w	8008df4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	2101      	movs	r1, #1
 8008bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd4:	69f9      	ldr	r1, [r7, #28]
 8008bd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	634b      	str	r3, [r1, #52]	; 0x34
 8008bde:	e109      	b.n	8008df4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d110      	bne.n	8008c12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	e00f      	b.n	8008c32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	69fa      	ldr	r2, [r7, #28]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	6919      	ldr	r1, [r3, #16]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	b298      	uxth	r0, r3
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	4603      	mov	r3, r0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fade 	bl	8009208 <USB_WritePacket>
 8008c4c:	e0d2      	b.n	8008df4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	0151      	lsls	r1, r2, #5
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	440a      	add	r2, r1
 8008c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c68:	0cdb      	lsrs	r3, r3, #19
 8008c6a:	04db      	lsls	r3, r3, #19
 8008c6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d126      	bne.n	8008ce8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb0:	69b9      	ldr	r1, [r7, #24]
 8008cb2:	0148      	lsls	r0, r1, #5
 8008cb4:	69f9      	ldr	r1, [r7, #28]
 8008cb6:	4401      	add	r1, r0
 8008cb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cde:	6113      	str	r3, [r2, #16]
 8008ce0:	e03a      	b.n	8008d58 <USB_EPStartXfer+0x3e4>
 8008ce2:	bf00      	nop
 8008ce4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	699a      	ldr	r2, [r3, #24]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	1e5a      	subs	r2, r3, #1
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	8afa      	ldrh	r2, [r7, #22]
 8008d04:	fb03 f202 	mul.w	r2, r3, r2
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d18:	691a      	ldr	r2, [r3, #16]
 8008d1a:	8afb      	ldrh	r3, [r7, #22]
 8008d1c:	04d9      	lsls	r1, r3, #19
 8008d1e:	4b38      	ldr	r3, [pc, #224]	; (8008e00 <USB_EPStartXfer+0x48c>)
 8008d20:	400b      	ands	r3, r1
 8008d22:	69b9      	ldr	r1, [r7, #24]
 8008d24:	0148      	lsls	r0, r1, #5
 8008d26:	69f9      	ldr	r1, [r7, #28]
 8008d28:	4401      	add	r1, r0
 8008d2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d48:	69b9      	ldr	r1, [r7, #24]
 8008d4a:	0148      	lsls	r0, r1, #5
 8008d4c:	69f9      	ldr	r1, [r7, #28]
 8008d4e:	4401      	add	r1, r0
 8008d50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d54:	4313      	orrs	r3, r2
 8008d56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d10d      	bne.n	8008d7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6919      	ldr	r1, [r3, #16]
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d76:	460a      	mov	r2, r1
 8008d78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	791b      	ldrb	r3, [r3, #4]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d128      	bne.n	8008dd4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d110      	bne.n	8008db4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	0151      	lsls	r1, r2, #5
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	440a      	add	r2, r1
 8008da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	e00f      	b.n	8008dd4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	0151      	lsls	r1, r2, #5
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	440a      	add	r2, r1
 8008dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	0151      	lsls	r1, r2, #5
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	440a      	add	r2, r1
 8008dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3720      	adds	r7, #32
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	1ff80000 	.word	0x1ff80000

08008e04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	f040 80ce 	bne.w	8008fc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d132      	bne.n	8008e94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8c:	0cdb      	lsrs	r3, r3, #19
 8008e8e:	04db      	lsls	r3, r3, #19
 8008e90:	6113      	str	r3, [r2, #16]
 8008e92:	e04e      	b.n	8008f32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	0cdb      	lsrs	r3, r3, #19
 8008eb0:	04db      	lsls	r3, r3, #19
 8008eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ed6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	699a      	ldr	r2, [r3, #24]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d903      	bls.n	8008eec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	691a      	ldr	r2, [r3, #16]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f22:	6939      	ldr	r1, [r7, #16]
 8008f24:	0148      	lsls	r0, r1, #5
 8008f26:	6979      	ldr	r1, [r7, #20]
 8008f28:	4401      	add	r1, r0
 8008f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d11e      	bne.n	8008f76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	e097      	b.n	80090a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 8083 	beq.w	80090a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb6:	6979      	ldr	r1, [r7, #20]
 8008fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	634b      	str	r3, [r1, #52]	; 0x34
 8008fc0:	e071      	b.n	80090a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fdc:	0cdb      	lsrs	r3, r3, #19
 8008fde:	04db      	lsls	r3, r3, #19
 8008fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009000:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009004:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	0151      	lsls	r1, r2, #5
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	440a      	add	r2, r1
 8009034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800903c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009054:	6939      	ldr	r1, [r7, #16]
 8009056:	0148      	lsls	r0, r1, #5
 8009058:	6979      	ldr	r1, [r7, #20]
 800905a:	4401      	add	r1, r0
 800905c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009060:	4313      	orrs	r3, r2
 8009062:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d10d      	bne.n	8009086 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	6919      	ldr	r1, [r3, #16]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009082:	460a      	mov	r2, r1
 8009084:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d14a      	bne.n	8009168 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ea:	f040 8086 	bne.w	80091fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	7812      	ldrb	r2, [r2, #0]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009110:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	7812      	ldrb	r2, [r2, #0]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	440a      	add	r2, r1
 800912c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009134:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3301      	adds	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009142:	4293      	cmp	r3, r2
 8009144:	d902      	bls.n	800914c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	75fb      	strb	r3, [r7, #23]
          break;
 800914a:	e056      	b.n	80091fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009164:	d0e7      	beq.n	8009136 <USB_EPStopXfer+0x82>
 8009166:	e048      	b.n	80091fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800917c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009180:	d13b      	bne.n	80091fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	7812      	ldrb	r2, [r2, #0]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3301      	adds	r3, #1
 80091ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d902      	bls.n	80091e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	75fb      	strb	r3, [r7, #23]
          break;
 80091de:	e00c      	b.n	80091fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091f8:	d0e7      	beq.n	80091ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	371c      	adds	r7, #28
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009208:	b480      	push	{r7}
 800920a:	b089      	sub	sp, #36	; 0x24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4611      	mov	r1, r2
 8009214:	461a      	mov	r2, r3
 8009216:	460b      	mov	r3, r1
 8009218:	71fb      	strb	r3, [r7, #7]
 800921a:	4613      	mov	r3, r2
 800921c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800922a:	2b00      	cmp	r3, #0
 800922c:	d123      	bne.n	8009276 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800922e:	88bb      	ldrh	r3, [r7, #4]
 8009230:	3303      	adds	r3, #3
 8009232:	089b      	lsrs	r3, r3, #2
 8009234:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009236:	2300      	movs	r3, #0
 8009238:	61bb      	str	r3, [r7, #24]
 800923a:	e018      	b.n	800926e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	031a      	lsls	r2, r3, #12
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	4413      	add	r3, r2
 8009244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009248:	461a      	mov	r2, r3
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	3301      	adds	r3, #1
 8009254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	3301      	adds	r3, #1
 800925a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	3301      	adds	r3, #1
 8009260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	3301      	adds	r3, #1
 8009266:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	3301      	adds	r3, #1
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	429a      	cmp	r2, r3
 8009274:	d3e2      	bcc.n	800923c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3724      	adds	r7, #36	; 0x24
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009284:	b480      	push	{r7}
 8009286:	b08b      	sub	sp, #44	; 0x2c
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	089b      	lsrs	r3, r3, #2
 800929e:	b29b      	uxth	r3, r3
 80092a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80092aa:	2300      	movs	r3, #0
 80092ac:	623b      	str	r3, [r7, #32]
 80092ae:	e014      	b.n	80092da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	3301      	adds	r3, #1
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	3301      	adds	r3, #1
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	3301      	adds	r3, #1
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	3301      	adds	r3, #1
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	3301      	adds	r3, #1
 80092d8:	623b      	str	r3, [r7, #32]
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d3e6      	bcc.n	80092b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092e2:	8bfb      	ldrh	r3, [r7, #30]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01e      	beq.n	8009326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f2:	461a      	mov	r2, r3
 80092f4:	f107 0310 	add.w	r3, r7, #16
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	b2db      	uxtb	r3, r3
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	b2da      	uxtb	r2, r3
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	701a      	strb	r2, [r3, #0]
      i++;
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	3301      	adds	r3, #1
 8009312:	623b      	str	r3, [r7, #32]
      pDest++;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	3301      	adds	r3, #1
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800931a:	8bfb      	ldrh	r3, [r7, #30]
 800931c:	3b01      	subs	r3, #1
 800931e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009320:	8bfb      	ldrh	r3, [r7, #30]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1ea      	bne.n	80092fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009328:	4618      	mov	r0, r3
 800932a:	372c      	adds	r7, #44	; 0x2c
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	785b      	ldrb	r3, [r3, #1]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d12c      	bne.n	80093aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	db12      	blt.n	8009388 <USB_EPSetStall+0x54>
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00f      	beq.n	8009388 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	0151      	lsls	r1, r2, #5
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	440a      	add	r2, r1
 800937e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009386:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	440a      	add	r2, r1
 800939e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	e02b      	b.n	8009402 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	db12      	blt.n	80093e2 <USB_EPSetStall+0xae>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00f      	beq.n	80093e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	0151      	lsls	r1, r2, #5
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	440a      	add	r2, r1
 80093d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	0151      	lsls	r1, r2, #5
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	440a      	add	r2, r1
 80093f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009400:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d128      	bne.n	800947e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	440a      	add	r2, r1
 8009442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009446:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800944a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	791b      	ldrb	r3, [r3, #4]
 8009450:	2b03      	cmp	r3, #3
 8009452:	d003      	beq.n	800945c <USB_EPClearStall+0x4c>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	791b      	ldrb	r3, [r3, #4]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d138      	bne.n	80094ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	e027      	b.n	80094ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	440a      	add	r2, r1
 8009494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800949c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	791b      	ldrb	r3, [r3, #4]
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d003      	beq.n	80094ae <USB_EPClearStall+0x9e>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	791b      	ldrb	r3, [r3, #4]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d10f      	bne.n	80094ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	0151      	lsls	r1, r2, #5
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	440a      	add	r2, r1
 80094c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80094fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009510:	68f9      	ldr	r1, [r7, #12]
 8009512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009516:	4313      	orrs	r3, r2
 8009518:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009556:	f023 0302 	bic.w	r3, r3, #2
 800955a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800956a:	b480      	push	{r7}
 800956c:	b085      	sub	sp, #20
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009584:	f023 0303 	bic.w	r3, r3, #3
 8009588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009598:	f043 0302 	orr.w	r3, r3, #2
 800959c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	4013      	ands	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095c4:	68fb      	ldr	r3, [r7, #12]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	4013      	ands	r3, r2
 80095f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	0c1b      	lsrs	r3, r3, #16
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	4013      	ands	r3, r2
 8009628:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	b29b      	uxth	r3, r3
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	4013      	ands	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009668:	68bb      	ldr	r3, [r7, #8]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009676:	b480      	push	{r7}
 8009678:	b087      	sub	sp, #28
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009698:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	fa22 f303 	lsr.w	r3, r2, r3
 80096a6:	01db      	lsls	r3, r3, #7
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	4013      	ands	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096c4:	68bb      	ldr	r3, [r7, #8]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	f003 0301 	and.w	r3, r3, #1
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009708:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800970c:	f023 0307 	bic.w	r3, r3, #7
 8009710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	460b      	mov	r3, r1
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	333c      	adds	r3, #60	; 0x3c
 800974a:	3304      	adds	r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4a26      	ldr	r2, [pc, #152]	; (80097ec <USB_EP0_OutStart+0xb8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d90a      	bls.n	800976e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009768:	d101      	bne.n	800976e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	e037      	b.n	80097de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	461a      	mov	r2, r3
 8009776:	2300      	movs	r3, #0
 8009778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800978c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800979c:	f043 0318 	orr.w	r3, r3, #24
 80097a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80097b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80097b6:	7afb      	ldrb	r3, [r7, #11]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d10f      	bne.n	80097dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c2:	461a      	mov	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80097da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	4f54300a 	.word	0x4f54300a

080097f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3301      	adds	r3, #1
 8009800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4a13      	ldr	r2, [pc, #76]	; (8009854 <USB_CoreReset+0x64>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d901      	bls.n	800980e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e01b      	b.n	8009846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	daf2      	bge.n	80097fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f043 0201 	orr.w	r2, r3, #1
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4a09      	ldr	r2, [pc, #36]	; (8009854 <USB_CoreReset+0x64>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d901      	bls.n	8009838 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e006      	b.n	8009846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b01      	cmp	r3, #1
 8009842:	d0f0      	beq.n	8009826 <USB_CoreReset+0x36>

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	00030d40 	.word	0x00030d40

08009858 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009864:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009868:	f005 fbbc 	bl	800efe4 <USBD_static_malloc>
 800986c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d109      	bne.n	8009888 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	32b0      	adds	r2, #176	; 0xb0
 800987e:	2100      	movs	r1, #0
 8009880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009884:	2302      	movs	r3, #2
 8009886:	e0d4      	b.n	8009a32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009888:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800988c:	2100      	movs	r1, #0
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f005 fc0c 	bl	800f0ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32b0      	adds	r2, #176	; 0xb0
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	32b0      	adds	r2, #176	; 0xb0
 80098ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	7c1b      	ldrb	r3, [r3, #16]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d138      	bne.n	8009932 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098c0:	4b5e      	ldr	r3, [pc, #376]	; (8009a3c <USBD_CDC_Init+0x1e4>)
 80098c2:	7819      	ldrb	r1, [r3, #0]
 80098c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098c8:	2202      	movs	r2, #2
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f005 fa67 	bl	800ed9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098d0:	4b5a      	ldr	r3, [pc, #360]	; (8009a3c <USBD_CDC_Init+0x1e4>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	f003 020f 	and.w	r2, r3, #15
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	440b      	add	r3, r1
 80098e4:	3324      	adds	r3, #36	; 0x24
 80098e6:	2201      	movs	r2, #1
 80098e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80098ea:	4b55      	ldr	r3, [pc, #340]	; (8009a40 <USBD_CDC_Init+0x1e8>)
 80098ec:	7819      	ldrb	r1, [r3, #0]
 80098ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098f2:	2202      	movs	r2, #2
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f005 fa52 	bl	800ed9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80098fa:	4b51      	ldr	r3, [pc, #324]	; (8009a40 <USBD_CDC_Init+0x1e8>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 020f 	and.w	r2, r3, #15
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009912:	2201      	movs	r2, #1
 8009914:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009916:	4b4b      	ldr	r3, [pc, #300]	; (8009a44 <USBD_CDC_Init+0x1ec>)
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	f003 020f 	and.w	r2, r3, #15
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	440b      	add	r3, r1
 800992a:	3326      	adds	r3, #38	; 0x26
 800992c:	2210      	movs	r2, #16
 800992e:	801a      	strh	r2, [r3, #0]
 8009930:	e035      	b.n	800999e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009932:	4b42      	ldr	r3, [pc, #264]	; (8009a3c <USBD_CDC_Init+0x1e4>)
 8009934:	7819      	ldrb	r1, [r3, #0]
 8009936:	2340      	movs	r3, #64	; 0x40
 8009938:	2202      	movs	r2, #2
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f005 fa2f 	bl	800ed9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009940:	4b3e      	ldr	r3, [pc, #248]	; (8009a3c <USBD_CDC_Init+0x1e4>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	f003 020f 	and.w	r2, r3, #15
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	4613      	mov	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	3324      	adds	r3, #36	; 0x24
 8009956:	2201      	movs	r2, #1
 8009958:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800995a:	4b39      	ldr	r3, [pc, #228]	; (8009a40 <USBD_CDC_Init+0x1e8>)
 800995c:	7819      	ldrb	r1, [r3, #0]
 800995e:	2340      	movs	r3, #64	; 0x40
 8009960:	2202      	movs	r2, #2
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f005 fa1b 	bl	800ed9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009968:	4b35      	ldr	r3, [pc, #212]	; (8009a40 <USBD_CDC_Init+0x1e8>)
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	f003 020f 	and.w	r2, r3, #15
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	440b      	add	r3, r1
 800997c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009980:	2201      	movs	r2, #1
 8009982:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009984:	4b2f      	ldr	r3, [pc, #188]	; (8009a44 <USBD_CDC_Init+0x1ec>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	f003 020f 	and.w	r2, r3, #15
 800998c:	6879      	ldr	r1, [r7, #4]
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	440b      	add	r3, r1
 8009998:	3326      	adds	r3, #38	; 0x26
 800999a:	2210      	movs	r2, #16
 800999c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800999e:	4b29      	ldr	r3, [pc, #164]	; (8009a44 <USBD_CDC_Init+0x1ec>)
 80099a0:	7819      	ldrb	r1, [r3, #0]
 80099a2:	2308      	movs	r3, #8
 80099a4:	2203      	movs	r2, #3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f005 f9f9 	bl	800ed9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80099ac:	4b25      	ldr	r3, [pc, #148]	; (8009a44 <USBD_CDC_Init+0x1ec>)
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	f003 020f 	and.w	r2, r3, #15
 80099b4:	6879      	ldr	r1, [r7, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4413      	add	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	440b      	add	r3, r1
 80099c0:	3324      	adds	r3, #36	; 0x24
 80099c2:	2201      	movs	r2, #1
 80099c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	33b0      	adds	r3, #176	; 0xb0
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80099fc:	2302      	movs	r3, #2
 80099fe:	e018      	b.n	8009a32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	7c1b      	ldrb	r3, [r3, #16]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a08:	4b0d      	ldr	r3, [pc, #52]	; (8009a40 <USBD_CDC_Init+0x1e8>)
 8009a0a:	7819      	ldrb	r1, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f005 fab0 	bl	800ef7c <USBD_LL_PrepareReceive>
 8009a1c:	e008      	b.n	8009a30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a1e:	4b08      	ldr	r3, [pc, #32]	; (8009a40 <USBD_CDC_Init+0x1e8>)
 8009a20:	7819      	ldrb	r1, [r3, #0]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a28:	2340      	movs	r3, #64	; 0x40
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f005 faa6 	bl	800ef7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2000010f 	.word	0x2000010f
 8009a40:	20000110 	.word	0x20000110
 8009a44:	20000111 	.word	0x20000111

08009a48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a54:	4b3a      	ldr	r3, [pc, #232]	; (8009b40 <USBD_CDC_DeInit+0xf8>)
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f005 f9c5 	bl	800edea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a60:	4b37      	ldr	r3, [pc, #220]	; (8009b40 <USBD_CDC_DeInit+0xf8>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	f003 020f 	and.w	r2, r3, #15
 8009a68:	6879      	ldr	r1, [r7, #4]
 8009a6a:	4613      	mov	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	009b      	lsls	r3, r3, #2
 8009a72:	440b      	add	r3, r1
 8009a74:	3324      	adds	r3, #36	; 0x24
 8009a76:	2200      	movs	r2, #0
 8009a78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a7a:	4b32      	ldr	r3, [pc, #200]	; (8009b44 <USBD_CDC_DeInit+0xfc>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f005 f9b2 	bl	800edea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009a86:	4b2f      	ldr	r3, [pc, #188]	; (8009b44 <USBD_CDC_DeInit+0xfc>)
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	f003 020f 	and.w	r2, r3, #15
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	4613      	mov	r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	440b      	add	r3, r1
 8009a9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009aa2:	4b29      	ldr	r3, [pc, #164]	; (8009b48 <USBD_CDC_DeInit+0x100>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f005 f99e 	bl	800edea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009aae:	4b26      	ldr	r3, [pc, #152]	; (8009b48 <USBD_CDC_DeInit+0x100>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	f003 020f 	and.w	r2, r3, #15
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	440b      	add	r3, r1
 8009ac2:	3324      	adds	r3, #36	; 0x24
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ac8:	4b1f      	ldr	r3, [pc, #124]	; (8009b48 <USBD_CDC_DeInit+0x100>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	f003 020f 	and.w	r2, r3, #15
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	440b      	add	r3, r1
 8009adc:	3326      	adds	r3, #38	; 0x26
 8009ade:	2200      	movs	r2, #0
 8009ae0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	32b0      	adds	r2, #176	; 0xb0
 8009aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d01f      	beq.n	8009b34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	33b0      	adds	r3, #176	; 0xb0
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	32b0      	adds	r2, #176	; 0xb0
 8009b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f005 fa72 	bl	800f000 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	32b0      	adds	r2, #176	; 0xb0
 8009b26:	2100      	movs	r1, #0
 8009b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	2000010f 	.word	0x2000010f
 8009b44:	20000110 	.word	0x20000110
 8009b48:	20000111 	.word	0x20000111

08009b4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	32b0      	adds	r2, #176	; 0xb0
 8009b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d101      	bne.n	8009b7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e0bf      	b.n	8009cfc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d050      	beq.n	8009c2a <USBD_CDC_Setup+0xde>
 8009b88:	2b20      	cmp	r3, #32
 8009b8a:	f040 80af 	bne.w	8009cec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	88db      	ldrh	r3, [r3, #6]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d03a      	beq.n	8009c0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	b25b      	sxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	da1b      	bge.n	8009bd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	33b0      	adds	r3, #176	; 0xb0
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009bb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bb8:	683a      	ldr	r2, [r7, #0]
 8009bba:	88d2      	ldrh	r2, [r2, #6]
 8009bbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	88db      	ldrh	r3, [r3, #6]
 8009bc2:	2b07      	cmp	r3, #7
 8009bc4:	bf28      	it	cs
 8009bc6:	2307      	movcs	r3, #7
 8009bc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	89fa      	ldrh	r2, [r7, #14]
 8009bce:	4619      	mov	r1, r3
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 fd89 	bl	800b6e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009bd6:	e090      	b.n	8009cfa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	785a      	ldrb	r2, [r3, #1]
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	88db      	ldrh	r3, [r3, #6]
 8009be6:	2b3f      	cmp	r3, #63	; 0x3f
 8009be8:	d803      	bhi.n	8009bf2 <USBD_CDC_Setup+0xa6>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	88db      	ldrh	r3, [r3, #6]
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	e000      	b.n	8009bf4 <USBD_CDC_Setup+0xa8>
 8009bf2:	2240      	movs	r2, #64	; 0x40
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009bfa:	6939      	ldr	r1, [r7, #16]
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009c02:	461a      	mov	r2, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 fd9b 	bl	800b740 <USBD_CtlPrepareRx>
      break;
 8009c0a:	e076      	b.n	8009cfa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	33b0      	adds	r3, #176	; 0xb0
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	7850      	ldrb	r0, [r2, #1]
 8009c22:	2200      	movs	r2, #0
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	4798      	blx	r3
      break;
 8009c28:	e067      	b.n	8009cfa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	2b0b      	cmp	r3, #11
 8009c30:	d851      	bhi.n	8009cd6 <USBD_CDC_Setup+0x18a>
 8009c32:	a201      	add	r2, pc, #4	; (adr r2, 8009c38 <USBD_CDC_Setup+0xec>)
 8009c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c38:	08009c69 	.word	0x08009c69
 8009c3c:	08009ce5 	.word	0x08009ce5
 8009c40:	08009cd7 	.word	0x08009cd7
 8009c44:	08009cd7 	.word	0x08009cd7
 8009c48:	08009cd7 	.word	0x08009cd7
 8009c4c:	08009cd7 	.word	0x08009cd7
 8009c50:	08009cd7 	.word	0x08009cd7
 8009c54:	08009cd7 	.word	0x08009cd7
 8009c58:	08009cd7 	.word	0x08009cd7
 8009c5c:	08009cd7 	.word	0x08009cd7
 8009c60:	08009c93 	.word	0x08009c93
 8009c64:	08009cbd 	.word	0x08009cbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d107      	bne.n	8009c84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c74:	f107 030a 	add.w	r3, r7, #10
 8009c78:	2202      	movs	r2, #2
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 fd33 	bl	800b6e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c82:	e032      	b.n	8009cea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 fcbd 	bl	800b606 <USBD_CtlError>
            ret = USBD_FAIL;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	75fb      	strb	r3, [r7, #23]
          break;
 8009c90:	e02b      	b.n	8009cea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b03      	cmp	r3, #3
 8009c9c:	d107      	bne.n	8009cae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009c9e:	f107 030d 	add.w	r3, r7, #13
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f001 fd1e 	bl	800b6e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cac:	e01d      	b.n	8009cea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 fca8 	bl	800b606 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8009cba:	e016      	b.n	8009cea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d00f      	beq.n	8009ce8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 fc9b 	bl	800b606 <USBD_CtlError>
            ret = USBD_FAIL;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cd4:	e008      	b.n	8009ce8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f001 fc94 	bl	800b606 <USBD_CtlError>
          ret = USBD_FAIL;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ce2:	e002      	b.n	8009cea <USBD_CDC_Setup+0x19e>
          break;
 8009ce4:	bf00      	nop
 8009ce6:	e008      	b.n	8009cfa <USBD_CDC_Setup+0x1ae>
          break;
 8009ce8:	bf00      	nop
      }
      break;
 8009cea:	e006      	b.n	8009cfa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 fc89 	bl	800b606 <USBD_CtlError>
      ret = USBD_FAIL;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8009cf8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	32b0      	adds	r2, #176	; 0xb0
 8009d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e065      	b.n	8009dfa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	32b0      	adds	r2, #176	; 0xb0
 8009d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	f003 020f 	and.w	r2, r3, #15
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4613      	mov	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	440b      	add	r3, r1
 8009d50:	3318      	adds	r3, #24
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d02f      	beq.n	8009db8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d58:	78fb      	ldrb	r3, [r7, #3]
 8009d5a:	f003 020f 	and.w	r2, r3, #15
 8009d5e:	6879      	ldr	r1, [r7, #4]
 8009d60:	4613      	mov	r3, r2
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	4413      	add	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	440b      	add	r3, r1
 8009d6a:	3318      	adds	r3, #24
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	f003 010f 	and.w	r1, r3, #15
 8009d74:	68f8      	ldr	r0, [r7, #12]
 8009d76:	460b      	mov	r3, r1
 8009d78:	00db      	lsls	r3, r3, #3
 8009d7a:	440b      	add	r3, r1
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4403      	add	r3, r0
 8009d80:	3348      	adds	r3, #72	; 0x48
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d88:	fb01 f303 	mul.w	r3, r1, r3
 8009d8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d112      	bne.n	8009db8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009d92:	78fb      	ldrb	r3, [r7, #3]
 8009d94:	f003 020f 	and.w	r2, r3, #15
 8009d98:	6879      	ldr	r1, [r7, #4]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	3318      	adds	r3, #24
 8009da6:	2200      	movs	r2, #0
 8009da8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009daa:	78f9      	ldrb	r1, [r7, #3]
 8009dac:	2300      	movs	r3, #0
 8009dae:	2200      	movs	r2, #0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f005 f8c2 	bl	800ef3a <USBD_LL_Transmit>
 8009db6:	e01f      	b.n	8009df8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	33b0      	adds	r3, #176	; 0xb0
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d010      	beq.n	8009df8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	33b0      	adds	r3, #176	; 0xb0
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009df4:	78fa      	ldrb	r2, [r7, #3]
 8009df6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	32b0      	adds	r2, #176	; 0xb0
 8009e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	32b0      	adds	r2, #176	; 0xb0
 8009e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e01a      	b.n	8009e6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f005 f8c0 	bl	800efbe <USBD_LL_GetRxDataSize>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	33b0      	adds	r3, #176	; 0xb0
 8009e50:	009b      	lsls	r3, r3, #2
 8009e52:	4413      	add	r3, r2
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e64:	4611      	mov	r1, r2
 8009e66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	32b0      	adds	r2, #176	; 0xb0
 8009e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e90:	2303      	movs	r3, #3
 8009e92:	e025      	b.n	8009ee0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	33b0      	adds	r3, #176	; 0xb0
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01a      	beq.n	8009ede <USBD_CDC_EP0_RxReady+0x6c>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009eae:	2bff      	cmp	r3, #255	; 0xff
 8009eb0:	d015      	beq.n	8009ede <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	33b0      	adds	r3, #176	; 0xb0
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009eca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ecc:	68fa      	ldr	r2, [r7, #12]
 8009ece:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009ed2:	b292      	uxth	r2, r2
 8009ed4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	22ff      	movs	r2, #255	; 0xff
 8009eda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ef0:	2182      	movs	r1, #130	; 0x82
 8009ef2:	4818      	ldr	r0, [pc, #96]	; (8009f54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009ef4:	f000 fd4f 	bl	800a996 <USBD_GetEpDesc>
 8009ef8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009efa:	2101      	movs	r1, #1
 8009efc:	4815      	ldr	r0, [pc, #84]	; (8009f54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009efe:	f000 fd4a 	bl	800a996 <USBD_GetEpDesc>
 8009f02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f04:	2181      	movs	r1, #129	; 0x81
 8009f06:	4813      	ldr	r0, [pc, #76]	; (8009f54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f08:	f000 fd45 	bl	800a996 <USBD_GetEpDesc>
 8009f0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2210      	movs	r2, #16
 8009f18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d006      	beq.n	8009f2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f28:	711a      	strb	r2, [r3, #4]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d006      	beq.n	8009f42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f3c:	711a      	strb	r2, [r3, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2243      	movs	r2, #67	; 0x43
 8009f46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f48:	4b02      	ldr	r3, [pc, #8]	; (8009f54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	200000cc 	.word	0x200000cc

08009f58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f60:	2182      	movs	r1, #130	; 0x82
 8009f62:	4818      	ldr	r0, [pc, #96]	; (8009fc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f64:	f000 fd17 	bl	800a996 <USBD_GetEpDesc>
 8009f68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	4815      	ldr	r0, [pc, #84]	; (8009fc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f6e:	f000 fd12 	bl	800a996 <USBD_GetEpDesc>
 8009f72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f74:	2181      	movs	r1, #129	; 0x81
 8009f76:	4813      	ldr	r0, [pc, #76]	; (8009fc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f78:	f000 fd0d 	bl	800a996 <USBD_GetEpDesc>
 8009f7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	2210      	movs	r2, #16
 8009f88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d006      	beq.n	8009f9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2200      	movs	r2, #0
 8009f94:	711a      	strb	r2, [r3, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f042 0202 	orr.w	r2, r2, #2
 8009f9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d006      	beq.n	8009fb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	711a      	strb	r2, [r3, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	f042 0202 	orr.w	r2, r2, #2
 8009fb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2243      	movs	r2, #67	; 0x43
 8009fb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fb8:	4b02      	ldr	r3, [pc, #8]	; (8009fc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3718      	adds	r7, #24
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	200000cc 	.word	0x200000cc

08009fc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fd0:	2182      	movs	r1, #130	; 0x82
 8009fd2:	4818      	ldr	r0, [pc, #96]	; (800a034 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fd4:	f000 fcdf 	bl	800a996 <USBD_GetEpDesc>
 8009fd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fda:	2101      	movs	r1, #1
 8009fdc:	4815      	ldr	r0, [pc, #84]	; (800a034 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fde:	f000 fcda 	bl	800a996 <USBD_GetEpDesc>
 8009fe2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fe4:	2181      	movs	r1, #129	; 0x81
 8009fe6:	4813      	ldr	r0, [pc, #76]	; (800a034 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fe8:	f000 fcd5 	bl	800a996 <USBD_GetEpDesc>
 8009fec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d002      	beq.n	8009ffa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	2210      	movs	r2, #16
 8009ff8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d006      	beq.n	800a00e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	2200      	movs	r2, #0
 800a004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a008:	711a      	strb	r2, [r3, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d006      	beq.n	800a022 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a01c:	711a      	strb	r2, [r3, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2243      	movs	r2, #67	; 0x43
 800a026:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a028:	4b02      	ldr	r3, [pc, #8]	; (800a034 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3718      	adds	r7, #24
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	200000cc 	.word	0x200000cc

0800a038 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	220a      	movs	r2, #10
 800a044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a046:	4b03      	ldr	r3, [pc, #12]	; (800a054 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a048:	4618      	mov	r0, r3
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr
 800a054:	20000088 	.word	0x20000088

0800a058 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d101      	bne.n	800a06c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a068:	2303      	movs	r3, #3
 800a06a:	e009      	b.n	800a080 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	33b0      	adds	r3, #176	; 0xb0
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b087      	sub	sp, #28
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	32b0      	adds	r2, #176	; 0xb0
 800a0a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e008      	b.n	800a0c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	371c      	adds	r7, #28
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr

0800a0d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b085      	sub	sp, #20
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	32b0      	adds	r2, #176	; 0xb0
 800a0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e004      	b.n	800a0fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	32b0      	adds	r2, #176	; 0xb0
 800a11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a122:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a124:	2301      	movs	r3, #1
 800a126:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	32b0      	adds	r2, #176	; 0xb0
 800a132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d101      	bne.n	800a13e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a13a:	2303      	movs	r3, #3
 800a13c:	e025      	b.n	800a18a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a144:	2b00      	cmp	r3, #0
 800a146:	d11f      	bne.n	800a188 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a150:	4b10      	ldr	r3, [pc, #64]	; (800a194 <USBD_CDC_TransmitPacket+0x88>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	f003 020f 	and.w	r2, r3, #15
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	4613      	mov	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	4413      	add	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4403      	add	r3, r0
 800a16a:	3318      	adds	r3, #24
 800a16c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a16e:	4b09      	ldr	r3, [pc, #36]	; (800a194 <USBD_CDC_TransmitPacket+0x88>)
 800a170:	7819      	ldrb	r1, [r3, #0]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f004 fedb 	bl	800ef3a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a184:	2300      	movs	r3, #0
 800a186:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	2000010f 	.word	0x2000010f

0800a198 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	32b0      	adds	r2, #176	; 0xb0
 800a1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	32b0      	adds	r2, #176	; 0xb0
 800a1ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e018      	b.n	800a1f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	7c1b      	ldrb	r3, [r3, #16]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10a      	bne.n	800a1e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1ce:	4b0c      	ldr	r3, [pc, #48]	; (800a200 <USBD_CDC_ReceivePacket+0x68>)
 800a1d0:	7819      	ldrb	r1, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f004 fecd 	bl	800ef7c <USBD_LL_PrepareReceive>
 800a1e2:	e008      	b.n	800a1f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a1e4:	4b06      	ldr	r3, [pc, #24]	; (800a200 <USBD_CDC_ReceivePacket+0x68>)
 800a1e6:	7819      	ldrb	r1, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1ee:	2340      	movs	r3, #64	; 0x40
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f004 fec3 	bl	800ef7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	20000110 	.word	0x20000110

0800a204 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d101      	bne.n	800a21c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a218:	2303      	movs	r3, #3
 800a21a:	e01f      	b.n	800a25c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d003      	beq.n	800a242 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	79fa      	ldrb	r2, [r7, #7]
 800a24e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f004 fd37 	bl	800ecc4 <USBD_LL_Init>
 800a256:	4603      	mov	r3, r0
 800a258:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a278:	2303      	movs	r3, #3
 800a27a:	e025      	b.n	800a2c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	32ae      	adds	r2, #174	; 0xae
 800a28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00f      	beq.n	800a2b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	32ae      	adds	r2, #174	; 0xae
 800a2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a8:	f107 020e 	add.w	r2, r7, #14
 800a2ac:	4610      	mov	r0, r2
 800a2ae:	4798      	blx	r3
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f004 fd45 	bl	800ed68 <USBD_LL_Start>
 800a2de:	4603      	mov	r3, r0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	460b      	mov	r3, r1
 800a308:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a314:	2b00      	cmp	r3, #0
 800a316:	d009      	beq.n	800a32c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	78fa      	ldrb	r2, [r7, #3]
 800a322:	4611      	mov	r1, r2
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	4798      	blx	r3
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	4611      	mov	r1, r2
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a35c:	2303      	movs	r3, #3
 800a35e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a360:	7bfb      	ldrb	r3, [r7, #15]
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}

0800a36a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b084      	sub	sp, #16
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 f908 	bl	800b592 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a390:	461a      	mov	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a39e:	f003 031f 	and.w	r3, r3, #31
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	d01a      	beq.n	800a3dc <USBD_LL_SetupStage+0x72>
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d822      	bhi.n	800a3f0 <USBD_LL_SetupStage+0x86>
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <USBD_LL_SetupStage+0x4a>
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d00a      	beq.n	800a3c8 <USBD_LL_SetupStage+0x5e>
 800a3b2:	e01d      	b.n	800a3f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 fb5f 	bl	800aa80 <USBD_StdDevReq>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c6:	e020      	b.n	800a40a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fbc7 	bl	800ab64 <USBD_StdItfReq>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a3da:	e016      	b.n	800a40a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fc29 	bl	800ac3c <USBD_StdEPReq>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ee:	e00c      	b.n	800a40a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a3f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f004 fd12 	bl	800ee28 <USBD_LL_StallEP>
 800a404:	4603      	mov	r3, r0
 800a406:	73fb      	strb	r3, [r7, #15]
      break;
 800a408:	bf00      	nop
  }

  return ret;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	460b      	mov	r3, r1
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a426:	7afb      	ldrb	r3, [r7, #11]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d16e      	bne.n	800a50a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a432:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	f040 8098 	bne.w	800a570 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d913      	bls.n	800a474 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	1ad2      	subs	r2, r2, r3
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	68da      	ldr	r2, [r3, #12]
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	4293      	cmp	r3, r2
 800a464:	bf28      	it	cs
 800a466:	4613      	movcs	r3, r2
 800a468:	461a      	mov	r2, r3
 800a46a:	6879      	ldr	r1, [r7, #4]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f001 f984 	bl	800b77a <USBD_CtlContinueRx>
 800a472:	e07d      	b.n	800a570 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a47a:	f003 031f 	and.w	r3, r3, #31
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d014      	beq.n	800a4ac <USBD_LL_DataOutStage+0x98>
 800a482:	2b02      	cmp	r3, #2
 800a484:	d81d      	bhi.n	800a4c2 <USBD_LL_DataOutStage+0xae>
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <USBD_LL_DataOutStage+0x7c>
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d003      	beq.n	800a496 <USBD_LL_DataOutStage+0x82>
 800a48e:	e018      	b.n	800a4c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	75bb      	strb	r3, [r7, #22]
            break;
 800a494:	e018      	b.n	800a4c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 fa5e 	bl	800a962 <USBD_CoreFindIF>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	75bb      	strb	r3, [r7, #22]
            break;
 800a4aa:	e00d      	b.n	800a4c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fa60 	bl	800a97c <USBD_CoreFindEP>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	75bb      	strb	r3, [r7, #22]
            break;
 800a4c0:	e002      	b.n	800a4c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a4c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a4c8:	7dbb      	ldrb	r3, [r7, #22]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d119      	bne.n	800a502 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b03      	cmp	r3, #3
 800a4d8:	d113      	bne.n	800a502 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a4da:	7dba      	ldrb	r2, [r7, #22]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	32ae      	adds	r2, #174	; 0xae
 800a4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00b      	beq.n	800a502 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a4ea:	7dba      	ldrb	r2, [r7, #22]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a4f2:	7dba      	ldrb	r2, [r7, #22]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	32ae      	adds	r2, #174	; 0xae
 800a4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f001 f94a 	bl	800b79c <USBD_CtlSendStatus>
 800a508:	e032      	b.n	800a570 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a50a:	7afb      	ldrb	r3, [r7, #11]
 800a50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a510:	b2db      	uxtb	r3, r3
 800a512:	4619      	mov	r1, r3
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f000 fa31 	bl	800a97c <USBD_CoreFindEP>
 800a51a:	4603      	mov	r3, r0
 800a51c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a51e:	7dbb      	ldrb	r3, [r7, #22]
 800a520:	2bff      	cmp	r3, #255	; 0xff
 800a522:	d025      	beq.n	800a570 <USBD_LL_DataOutStage+0x15c>
 800a524:	7dbb      	ldrb	r3, [r7, #22]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d122      	bne.n	800a570 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a530:	b2db      	uxtb	r3, r3
 800a532:	2b03      	cmp	r3, #3
 800a534:	d117      	bne.n	800a566 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a536:	7dba      	ldrb	r2, [r7, #22]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	32ae      	adds	r2, #174	; 0xae
 800a53c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00f      	beq.n	800a566 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a546:	7dba      	ldrb	r2, [r7, #22]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a54e:	7dba      	ldrb	r2, [r7, #22]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	32ae      	adds	r2, #174	; 0xae
 800a554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	7afa      	ldrb	r2, [r7, #11]
 800a55c:	4611      	mov	r1, r2
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	4798      	blx	r3
 800a562:	4603      	mov	r3, r0
 800a564:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a566:	7dfb      	ldrb	r3, [r7, #23]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
 800a56e:	e000      	b.n	800a572 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a570:	2300      	movs	r3, #0
}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b086      	sub	sp, #24
 800a57e:	af00      	add	r7, sp, #0
 800a580:	60f8      	str	r0, [r7, #12]
 800a582:	460b      	mov	r3, r1
 800a584:	607a      	str	r2, [r7, #4]
 800a586:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a588:	7afb      	ldrb	r3, [r7, #11]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d16f      	bne.n	800a66e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	3314      	adds	r3, #20
 800a592:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d15a      	bne.n	800a654 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	689a      	ldr	r2, [r3, #8]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d914      	bls.n	800a5d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	689a      	ldr	r2, [r3, #8]
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	1ad2      	subs	r2, r2, r3
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f001 f8ac 	bl	800b71e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f004 fcd5 	bl	800ef7c <USBD_LL_PrepareReceive>
 800a5d2:	e03f      	b.n	800a654 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d11c      	bne.n	800a61a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d316      	bcc.n	800a61a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d20f      	bcs.n	800a61a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f001 f88d 	bl	800b71e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a60c:	2300      	movs	r3, #0
 800a60e:	2200      	movs	r2, #0
 800a610:	2100      	movs	r1, #0
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f004 fcb2 	bl	800ef7c <USBD_LL_PrepareReceive>
 800a618:	e01c      	b.n	800a654 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b03      	cmp	r3, #3
 800a624:	d10f      	bne.n	800a646 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d009      	beq.n	800a646 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	68f8      	ldr	r0, [r7, #12]
 800a644:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a646:	2180      	movs	r1, #128	; 0x80
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f004 fbed 	bl	800ee28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f001 f8b7 	bl	800b7c2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d03a      	beq.n	800a6d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	f7ff fe42 	bl	800a2e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a66c:	e032      	b.n	800a6d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a66e:	7afb      	ldrb	r3, [r7, #11]
 800a670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a674:	b2db      	uxtb	r3, r3
 800a676:	4619      	mov	r1, r3
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 f97f 	bl	800a97c <USBD_CoreFindEP>
 800a67e:	4603      	mov	r3, r0
 800a680:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a682:	7dfb      	ldrb	r3, [r7, #23]
 800a684:	2bff      	cmp	r3, #255	; 0xff
 800a686:	d025      	beq.n	800a6d4 <USBD_LL_DataInStage+0x15a>
 800a688:	7dfb      	ldrb	r3, [r7, #23]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d122      	bne.n	800a6d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b03      	cmp	r3, #3
 800a698:	d11c      	bne.n	800a6d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a69a:	7dfa      	ldrb	r2, [r7, #23]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	32ae      	adds	r2, #174	; 0xae
 800a6a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d014      	beq.n	800a6d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a6aa:	7dfa      	ldrb	r2, [r7, #23]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a6b2:	7dfa      	ldrb	r2, [r7, #23]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	32ae      	adds	r2, #174	; 0xae
 800a6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	7afa      	ldrb	r2, [r7, #11]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	4798      	blx	r3
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a6ca:	7dbb      	ldrb	r3, [r7, #22]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d001      	beq.n	800a6d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a6d0:	7dbb      	ldrb	r3, [r7, #22]
 800a6d2:	e000      	b.n	800a6d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3718      	adds	r7, #24
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d014      	beq.n	800a744 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00e      	beq.n	800a744 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	6852      	ldr	r2, [r2, #4]
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	4611      	mov	r1, r2
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	4798      	blx	r3
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a740:	2303      	movs	r3, #3
 800a742:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a744:	2340      	movs	r3, #64	; 0x40
 800a746:	2200      	movs	r2, #0
 800a748:	2100      	movs	r1, #0
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f004 fb27 	bl	800ed9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2240      	movs	r2, #64	; 0x40
 800a75c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a760:	2340      	movs	r3, #64	; 0x40
 800a762:	2200      	movs	r2, #0
 800a764:	2180      	movs	r1, #128	; 0x80
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f004 fb19 	bl	800ed9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2240      	movs	r2, #64	; 0x40
 800a776:	621a      	str	r2, [r3, #32]

  return ret;
 800a778:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	460b      	mov	r3, r1
 800a78c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	78fa      	ldrb	r2, [r7, #3]
 800a792:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b083      	sub	sp, #12
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b0:	b2da      	uxtb	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2204      	movs	r2, #4
 800a7bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b083      	sub	sp, #12
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b04      	cmp	r3, #4
 800a7e0:	d106      	bne.n	800a7f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a7e8:	b2da      	uxtb	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b082      	sub	sp, #8
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d110      	bne.n	800a834 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d00b      	beq.n	800a834 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a822:	69db      	ldr	r3, [r3, #28]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d005      	beq.n	800a834 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b082      	sub	sp, #8
 800a842:	af00      	add	r7, sp, #0
 800a844:	6078      	str	r0, [r7, #4]
 800a846:	460b      	mov	r3, r1
 800a848:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	32ae      	adds	r2, #174	; 0xae
 800a854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e01c      	b.n	800a89a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b03      	cmp	r3, #3
 800a86a:	d115      	bne.n	800a898 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	32ae      	adds	r2, #174	; 0xae
 800a876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00b      	beq.n	800a898 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	32ae      	adds	r2, #174	; 0xae
 800a88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	4611      	mov	r1, r2
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	32ae      	adds	r2, #174	; 0xae
 800a8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a8c0:	2303      	movs	r3, #3
 800a8c2:	e01c      	b.n	800a8fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d115      	bne.n	800a8fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	32ae      	adds	r2, #174	; 0xae
 800a8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00b      	beq.n	800a8fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	32ae      	adds	r2, #174	; 0xae
 800a8ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a906:	b480      	push	{r7}
 800a908:	b083      	sub	sp, #12
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00e      	beq.n	800a958 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6852      	ldr	r2, [r2, #4]
 800a946:	b2d2      	uxtb	r2, r2
 800a948:	4611      	mov	r1, r2
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	4798      	blx	r3
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a954:	2303      	movs	r3, #3
 800a956:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a958:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}

0800a962 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a962:	b480      	push	{r7}
 800a964:	b083      	sub	sp, #12
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	460b      	mov	r3, r1
 800a96c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a96e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a970:	4618      	mov	r0, r3
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	460b      	mov	r3, r1
 800a986:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a988:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b086      	sub	sp, #24
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	460b      	mov	r3, r1
 800a9a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	885b      	ldrh	r3, [r3, #2]
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d920      	bls.n	800aa00 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a9c6:	e013      	b.n	800a9f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a9c8:	f107 030a 	add.w	r3, r7, #10
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6978      	ldr	r0, [r7, #20]
 800a9d0:	f000 f81b 	bl	800aa0a <USBD_GetNextDesc>
 800a9d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	785b      	ldrb	r3, [r3, #1]
 800a9da:	2b05      	cmp	r3, #5
 800a9dc:	d108      	bne.n	800a9f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	789b      	ldrb	r3, [r3, #2]
 800a9e6:	78fa      	ldrb	r2, [r7, #3]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d008      	beq.n	800a9fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	885b      	ldrh	r3, [r3, #2]
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	897b      	ldrh	r3, [r7, #10]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d8e5      	bhi.n	800a9c8 <USBD_GetEpDesc+0x32>
 800a9fc:	e000      	b.n	800aa00 <USBD_GetEpDesc+0x6a>
          break;
 800a9fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aa00:	693b      	ldr	r3, [r7, #16]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3718      	adds	r7, #24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b085      	sub	sp, #20
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	881a      	ldrh	r2, [r3, #0]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	4413      	add	r3, r2
 800aa24:	b29a      	uxth	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4413      	add	r3, r2
 800aa34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa36:	68fb      	ldr	r3, [r7, #12]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa62:	8a3b      	ldrh	r3, [r7, #16]
 800aa64:	021b      	lsls	r3, r3, #8
 800aa66:	b21a      	sxth	r2, r3
 800aa68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	b21b      	sxth	r3, r3
 800aa70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa72:	89fb      	ldrh	r3, [r7, #14]
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	371c      	adds	r7, #28
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa96:	2b40      	cmp	r3, #64	; 0x40
 800aa98:	d005      	beq.n	800aaa6 <USBD_StdDevReq+0x26>
 800aa9a:	2b40      	cmp	r3, #64	; 0x40
 800aa9c:	d857      	bhi.n	800ab4e <USBD_StdDevReq+0xce>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00f      	beq.n	800aac2 <USBD_StdDevReq+0x42>
 800aaa2:	2b20      	cmp	r3, #32
 800aaa4:	d153      	bne.n	800ab4e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	32ae      	adds	r2, #174	; 0xae
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	4798      	blx	r3
 800aabc:	4603      	mov	r3, r0
 800aabe:	73fb      	strb	r3, [r7, #15]
      break;
 800aac0:	e04a      	b.n	800ab58 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	785b      	ldrb	r3, [r3, #1]
 800aac6:	2b09      	cmp	r3, #9
 800aac8:	d83b      	bhi.n	800ab42 <USBD_StdDevReq+0xc2>
 800aaca:	a201      	add	r2, pc, #4	; (adr r2, 800aad0 <USBD_StdDevReq+0x50>)
 800aacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad0:	0800ab25 	.word	0x0800ab25
 800aad4:	0800ab39 	.word	0x0800ab39
 800aad8:	0800ab43 	.word	0x0800ab43
 800aadc:	0800ab2f 	.word	0x0800ab2f
 800aae0:	0800ab43 	.word	0x0800ab43
 800aae4:	0800ab03 	.word	0x0800ab03
 800aae8:	0800aaf9 	.word	0x0800aaf9
 800aaec:	0800ab43 	.word	0x0800ab43
 800aaf0:	0800ab1b 	.word	0x0800ab1b
 800aaf4:	0800ab0d 	.word	0x0800ab0d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fa3c 	bl	800af78 <USBD_GetDescriptor>
          break;
 800ab00:	e024      	b.n	800ab4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fba1 	bl	800b24c <USBD_SetAddress>
          break;
 800ab0a:	e01f      	b.n	800ab4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ab0c:	6839      	ldr	r1, [r7, #0]
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fbe0 	bl	800b2d4 <USBD_SetConfig>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]
          break;
 800ab18:	e018      	b.n	800ab4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ab1a:	6839      	ldr	r1, [r7, #0]
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fc83 	bl	800b428 <USBD_GetConfig>
          break;
 800ab22:	e013      	b.n	800ab4c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ab24:	6839      	ldr	r1, [r7, #0]
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f000 fcb4 	bl	800b494 <USBD_GetStatus>
          break;
 800ab2c:	e00e      	b.n	800ab4c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 fce3 	bl	800b4fc <USBD_SetFeature>
          break;
 800ab36:	e009      	b.n	800ab4c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fd07 	bl	800b54e <USBD_ClrFeature>
          break;
 800ab40:	e004      	b.n	800ab4c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ab42:	6839      	ldr	r1, [r7, #0]
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fd5e 	bl	800b606 <USBD_CtlError>
          break;
 800ab4a:	bf00      	nop
      }
      break;
 800ab4c:	e004      	b.n	800ab58 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fd58 	bl	800b606 <USBD_CtlError>
      break;
 800ab56:	bf00      	nop
  }

  return ret;
 800ab58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop

0800ab64 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab7a:	2b40      	cmp	r3, #64	; 0x40
 800ab7c:	d005      	beq.n	800ab8a <USBD_StdItfReq+0x26>
 800ab7e:	2b40      	cmp	r3, #64	; 0x40
 800ab80:	d852      	bhi.n	800ac28 <USBD_StdItfReq+0xc4>
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <USBD_StdItfReq+0x26>
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	d14e      	bne.n	800ac28 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab90:	b2db      	uxtb	r3, r3
 800ab92:	3b01      	subs	r3, #1
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d840      	bhi.n	800ac1a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	889b      	ldrh	r3, [r3, #4]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d836      	bhi.n	800ac10 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	889b      	ldrh	r3, [r3, #4]
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f7ff fed9 	bl	800a962 <USBD_CoreFindIF>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	2bff      	cmp	r3, #255	; 0xff
 800abb8:	d01d      	beq.n	800abf6 <USBD_StdItfReq+0x92>
 800abba:	7bbb      	ldrb	r3, [r7, #14]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d11a      	bne.n	800abf6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800abc0:	7bba      	ldrb	r2, [r7, #14]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	32ae      	adds	r2, #174	; 0xae
 800abc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00f      	beq.n	800abf0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800abd0:	7bba      	ldrb	r2, [r7, #14]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800abd8:	7bba      	ldrb	r2, [r7, #14]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	32ae      	adds	r2, #174	; 0xae
 800abde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	4798      	blx	r3
 800abea:	4603      	mov	r3, r0
 800abec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abee:	e004      	b.n	800abfa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800abf0:	2303      	movs	r3, #3
 800abf2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800abf4:	e001      	b.n	800abfa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800abf6:	2303      	movs	r3, #3
 800abf8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	88db      	ldrh	r3, [r3, #6]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d110      	bne.n	800ac24 <USBD_StdItfReq+0xc0>
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10d      	bne.n	800ac24 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fdc7 	bl	800b79c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ac0e:	e009      	b.n	800ac24 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fcf7 	bl	800b606 <USBD_CtlError>
          break;
 800ac18:	e004      	b.n	800ac24 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fcf2 	bl	800b606 <USBD_CtlError>
          break;
 800ac22:	e000      	b.n	800ac26 <USBD_StdItfReq+0xc2>
          break;
 800ac24:	bf00      	nop
      }
      break;
 800ac26:	e004      	b.n	800ac32 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fceb 	bl	800b606 <USBD_CtlError>
      break;
 800ac30:	bf00      	nop
  }

  return ret;
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	889b      	ldrh	r3, [r3, #4]
 800ac4e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac58:	2b40      	cmp	r3, #64	; 0x40
 800ac5a:	d007      	beq.n	800ac6c <USBD_StdEPReq+0x30>
 800ac5c:	2b40      	cmp	r3, #64	; 0x40
 800ac5e:	f200 817f 	bhi.w	800af60 <USBD_StdEPReq+0x324>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d02a      	beq.n	800acbc <USBD_StdEPReq+0x80>
 800ac66:	2b20      	cmp	r3, #32
 800ac68:	f040 817a 	bne.w	800af60 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff fe83 	bl	800a97c <USBD_CoreFindEP>
 800ac76:	4603      	mov	r3, r0
 800ac78:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac7a:	7b7b      	ldrb	r3, [r7, #13]
 800ac7c:	2bff      	cmp	r3, #255	; 0xff
 800ac7e:	f000 8174 	beq.w	800af6a <USBD_StdEPReq+0x32e>
 800ac82:	7b7b      	ldrb	r3, [r7, #13]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f040 8170 	bne.w	800af6a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac8a:	7b7a      	ldrb	r2, [r7, #13]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ac92:	7b7a      	ldrb	r2, [r7, #13]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	32ae      	adds	r2, #174	; 0xae
 800ac98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac9c:	689b      	ldr	r3, [r3, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f000 8163 	beq.w	800af6a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aca4:	7b7a      	ldrb	r2, [r7, #13]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	32ae      	adds	r2, #174	; 0xae
 800acaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
 800acb6:	4603      	mov	r3, r0
 800acb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800acba:	e156      	b.n	800af6a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	785b      	ldrb	r3, [r3, #1]
 800acc0:	2b03      	cmp	r3, #3
 800acc2:	d008      	beq.n	800acd6 <USBD_StdEPReq+0x9a>
 800acc4:	2b03      	cmp	r3, #3
 800acc6:	f300 8145 	bgt.w	800af54 <USBD_StdEPReq+0x318>
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 809b 	beq.w	800ae06 <USBD_StdEPReq+0x1ca>
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d03c      	beq.n	800ad4e <USBD_StdEPReq+0x112>
 800acd4:	e13e      	b.n	800af54 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d002      	beq.n	800ace8 <USBD_StdEPReq+0xac>
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d016      	beq.n	800ad14 <USBD_StdEPReq+0xd8>
 800ace6:	e02c      	b.n	800ad42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00d      	beq.n	800ad0a <USBD_StdEPReq+0xce>
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	2b80      	cmp	r3, #128	; 0x80
 800acf2:	d00a      	beq.n	800ad0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f004 f895 	bl	800ee28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acfe:	2180      	movs	r1, #128	; 0x80
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f004 f891 	bl	800ee28 <USBD_LL_StallEP>
 800ad06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad08:	e020      	b.n	800ad4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fc7a 	bl	800b606 <USBD_CtlError>
              break;
 800ad12:	e01b      	b.n	800ad4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	885b      	ldrh	r3, [r3, #2]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d10e      	bne.n	800ad3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ad1c:	7bbb      	ldrb	r3, [r7, #14]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <USBD_StdEPReq+0xfe>
 800ad22:	7bbb      	ldrb	r3, [r7, #14]
 800ad24:	2b80      	cmp	r3, #128	; 0x80
 800ad26:	d008      	beq.n	800ad3a <USBD_StdEPReq+0xfe>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	88db      	ldrh	r3, [r3, #6]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d104      	bne.n	800ad3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f004 f877 	bl	800ee28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fd2e 	bl	800b79c <USBD_CtlSendStatus>

              break;
 800ad40:	e004      	b.n	800ad4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fc5e 	bl	800b606 <USBD_CtlError>
              break;
 800ad4a:	bf00      	nop
          }
          break;
 800ad4c:	e107      	b.n	800af5e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b02      	cmp	r3, #2
 800ad58:	d002      	beq.n	800ad60 <USBD_StdEPReq+0x124>
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d016      	beq.n	800ad8c <USBD_StdEPReq+0x150>
 800ad5e:	e04b      	b.n	800adf8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad60:	7bbb      	ldrb	r3, [r7, #14]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00d      	beq.n	800ad82 <USBD_StdEPReq+0x146>
 800ad66:	7bbb      	ldrb	r3, [r7, #14]
 800ad68:	2b80      	cmp	r3, #128	; 0x80
 800ad6a:	d00a      	beq.n	800ad82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f004 f859 	bl	800ee28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad76:	2180      	movs	r1, #128	; 0x80
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f004 f855 	bl	800ee28 <USBD_LL_StallEP>
 800ad7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad80:	e040      	b.n	800ae04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fc3e 	bl	800b606 <USBD_CtlError>
              break;
 800ad8a:	e03b      	b.n	800ae04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	885b      	ldrh	r3, [r3, #2]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d136      	bne.n	800ae02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
 800ad96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f004 f85f 	bl	800ee66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fcf7 	bl	800b79c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800adae:	7bbb      	ldrb	r3, [r7, #14]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff fde2 	bl	800a97c <USBD_CoreFindEP>
 800adb8:	4603      	mov	r3, r0
 800adba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adbc:	7b7b      	ldrb	r3, [r7, #13]
 800adbe:	2bff      	cmp	r3, #255	; 0xff
 800adc0:	d01f      	beq.n	800ae02 <USBD_StdEPReq+0x1c6>
 800adc2:	7b7b      	ldrb	r3, [r7, #13]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d11c      	bne.n	800ae02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800adc8:	7b7a      	ldrb	r2, [r7, #13]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800add0:	7b7a      	ldrb	r2, [r7, #13]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	32ae      	adds	r2, #174	; 0xae
 800add6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d010      	beq.n	800ae02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ade0:	7b7a      	ldrb	r2, [r7, #13]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	32ae      	adds	r2, #174	; 0xae
 800ade6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4798      	blx	r3
 800adf2:	4603      	mov	r3, r0
 800adf4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800adf6:	e004      	b.n	800ae02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f000 fc03 	bl	800b606 <USBD_CtlError>
              break;
 800ae00:	e000      	b.n	800ae04 <USBD_StdEPReq+0x1c8>
              break;
 800ae02:	bf00      	nop
          }
          break;
 800ae04:	e0ab      	b.n	800af5e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d002      	beq.n	800ae18 <USBD_StdEPReq+0x1dc>
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d032      	beq.n	800ae7c <USBD_StdEPReq+0x240>
 800ae16:	e097      	b.n	800af48 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d007      	beq.n	800ae2e <USBD_StdEPReq+0x1f2>
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
 800ae20:	2b80      	cmp	r3, #128	; 0x80
 800ae22:	d004      	beq.n	800ae2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ae24:	6839      	ldr	r1, [r7, #0]
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f000 fbed 	bl	800b606 <USBD_CtlError>
                break;
 800ae2c:	e091      	b.n	800af52 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	da0b      	bge.n	800ae4e <USBD_StdEPReq+0x212>
 800ae36:	7bbb      	ldrb	r3, [r7, #14]
 800ae38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae3c:	4613      	mov	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4413      	add	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	3310      	adds	r3, #16
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	4413      	add	r3, r2
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	e00b      	b.n	800ae66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae4e:	7bbb      	ldrb	r3, [r7, #14]
 800ae50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae54:	4613      	mov	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	4413      	add	r3, r2
 800ae64:	3304      	adds	r3, #4
 800ae66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	2202      	movs	r2, #2
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fc37 	bl	800b6e8 <USBD_CtlSendData>
              break;
 800ae7a:	e06a      	b.n	800af52 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	da11      	bge.n	800aea8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	f003 020f 	and.w	r2, r3, #15
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	440b      	add	r3, r1
 800ae96:	3324      	adds	r3, #36	; 0x24
 800ae98:	881b      	ldrh	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d117      	bne.n	800aece <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fbb0 	bl	800b606 <USBD_CtlError>
                  break;
 800aea6:	e054      	b.n	800af52 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	f003 020f 	and.w	r2, r3, #15
 800aeae:	6879      	ldr	r1, [r7, #4]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	440b      	add	r3, r1
 800aeba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d104      	bne.n	800aece <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aec4:	6839      	ldr	r1, [r7, #0]
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f000 fb9d 	bl	800b606 <USBD_CtlError>
                  break;
 800aecc:	e041      	b.n	800af52 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aece:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	da0b      	bge.n	800aeee <USBD_StdEPReq+0x2b2>
 800aed6:	7bbb      	ldrb	r3, [r7, #14]
 800aed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	3310      	adds	r3, #16
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	4413      	add	r3, r2
 800aeea:	3304      	adds	r3, #4
 800aeec:	e00b      	b.n	800af06 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aef4:	4613      	mov	r3, r2
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	4413      	add	r3, r2
 800af04:	3304      	adds	r3, #4
 800af06:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af08:	7bbb      	ldrb	r3, [r7, #14]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d002      	beq.n	800af14 <USBD_StdEPReq+0x2d8>
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	2b80      	cmp	r3, #128	; 0x80
 800af12:	d103      	bne.n	800af1c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2200      	movs	r2, #0
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	e00e      	b.n	800af3a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f003 ffbf 	bl	800eea4 <USBD_LL_IsStallEP>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	e002      	b.n	800af3a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2202      	movs	r2, #2
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f000 fbd1 	bl	800b6e8 <USBD_CtlSendData>
              break;
 800af46:	e004      	b.n	800af52 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 fb5b 	bl	800b606 <USBD_CtlError>
              break;
 800af50:	bf00      	nop
          }
          break;
 800af52:	e004      	b.n	800af5e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fb55 	bl	800b606 <USBD_CtlError>
          break;
 800af5c:	bf00      	nop
      }
      break;
 800af5e:	e005      	b.n	800af6c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 fb4f 	bl	800b606 <USBD_CtlError>
      break;
 800af68:	e000      	b.n	800af6c <USBD_StdEPReq+0x330>
      break;
 800af6a:	bf00      	nop
  }

  return ret;
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af86:	2300      	movs	r3, #0
 800af88:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	885b      	ldrh	r3, [r3, #2]
 800af92:	0a1b      	lsrs	r3, r3, #8
 800af94:	b29b      	uxth	r3, r3
 800af96:	3b01      	subs	r3, #1
 800af98:	2b06      	cmp	r3, #6
 800af9a:	f200 8128 	bhi.w	800b1ee <USBD_GetDescriptor+0x276>
 800af9e:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <USBD_GetDescriptor+0x2c>)
 800afa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa4:	0800afc1 	.word	0x0800afc1
 800afa8:	0800afd9 	.word	0x0800afd9
 800afac:	0800b019 	.word	0x0800b019
 800afb0:	0800b1ef 	.word	0x0800b1ef
 800afb4:	0800b1ef 	.word	0x0800b1ef
 800afb8:	0800b18f 	.word	0x0800b18f
 800afbc:	0800b1bb 	.word	0x0800b1bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	7c12      	ldrb	r2, [r2, #16]
 800afcc:	f107 0108 	add.w	r1, r7, #8
 800afd0:	4610      	mov	r0, r2
 800afd2:	4798      	blx	r3
 800afd4:	60f8      	str	r0, [r7, #12]
      break;
 800afd6:	e112      	b.n	800b1fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	7c1b      	ldrb	r3, [r3, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10d      	bne.n	800affc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800afe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe8:	f107 0208 	add.w	r2, r7, #8
 800afec:	4610      	mov	r0, r2
 800afee:	4798      	blx	r3
 800aff0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	3301      	adds	r3, #1
 800aff6:	2202      	movs	r2, #2
 800aff8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800affa:	e100      	b.n	800b1fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b004:	f107 0208 	add.w	r2, r7, #8
 800b008:	4610      	mov	r0, r2
 800b00a:	4798      	blx	r3
 800b00c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3301      	adds	r3, #1
 800b012:	2202      	movs	r2, #2
 800b014:	701a      	strb	r2, [r3, #0]
      break;
 800b016:	e0f2      	b.n	800b1fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	885b      	ldrh	r3, [r3, #2]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b05      	cmp	r3, #5
 800b020:	f200 80ac 	bhi.w	800b17c <USBD_GetDescriptor+0x204>
 800b024:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <USBD_GetDescriptor+0xb4>)
 800b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02a:	bf00      	nop
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b079 	.word	0x0800b079
 800b034:	0800b0ad 	.word	0x0800b0ad
 800b038:	0800b0e1 	.word	0x0800b0e1
 800b03c:	0800b115 	.word	0x0800b115
 800b040:	0800b149 	.word	0x0800b149
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00b      	beq.n	800b068 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	7c12      	ldrb	r2, [r2, #16]
 800b05c:	f107 0108 	add.w	r1, r7, #8
 800b060:	4610      	mov	r0, r2
 800b062:	4798      	blx	r3
 800b064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b066:	e091      	b.n	800b18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 facb 	bl	800b606 <USBD_CtlError>
            err++;
 800b070:	7afb      	ldrb	r3, [r7, #11]
 800b072:	3301      	adds	r3, #1
 800b074:	72fb      	strb	r3, [r7, #11]
          break;
 800b076:	e089      	b.n	800b18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00b      	beq.n	800b09c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	7c12      	ldrb	r2, [r2, #16]
 800b090:	f107 0108 	add.w	r1, r7, #8
 800b094:	4610      	mov	r0, r2
 800b096:	4798      	blx	r3
 800b098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b09a:	e077      	b.n	800b18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fab1 	bl	800b606 <USBD_CtlError>
            err++;
 800b0a4:	7afb      	ldrb	r3, [r7, #11]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0aa:	e06f      	b.n	800b18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b2:	68db      	ldr	r3, [r3, #12]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00b      	beq.n	800b0d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	7c12      	ldrb	r2, [r2, #16]
 800b0c4:	f107 0108 	add.w	r1, r7, #8
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	4798      	blx	r3
 800b0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ce:	e05d      	b.n	800b18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fa97 	bl	800b606 <USBD_CtlError>
            err++;
 800b0d8:	7afb      	ldrb	r3, [r7, #11]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b0de:	e055      	b.n	800b18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00b      	beq.n	800b104 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f2:	691b      	ldr	r3, [r3, #16]
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	7c12      	ldrb	r2, [r2, #16]
 800b0f8:	f107 0108 	add.w	r1, r7, #8
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	4798      	blx	r3
 800b100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b102:	e043      	b.n	800b18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 fa7d 	bl	800b606 <USBD_CtlError>
            err++;
 800b10c:	7afb      	ldrb	r3, [r7, #11]
 800b10e:	3301      	adds	r3, #1
 800b110:	72fb      	strb	r3, [r7, #11]
          break;
 800b112:	e03b      	b.n	800b18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	7c12      	ldrb	r2, [r2, #16]
 800b12c:	f107 0108 	add.w	r1, r7, #8
 800b130:	4610      	mov	r0, r2
 800b132:	4798      	blx	r3
 800b134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b136:	e029      	b.n	800b18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fa63 	bl	800b606 <USBD_CtlError>
            err++;
 800b140:	7afb      	ldrb	r3, [r7, #11]
 800b142:	3301      	adds	r3, #1
 800b144:	72fb      	strb	r3, [r7, #11]
          break;
 800b146:	e021      	b.n	800b18c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00b      	beq.n	800b16c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	7c12      	ldrb	r2, [r2, #16]
 800b160:	f107 0108 	add.w	r1, r7, #8
 800b164:	4610      	mov	r0, r2
 800b166:	4798      	blx	r3
 800b168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b16a:	e00f      	b.n	800b18c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa49 	bl	800b606 <USBD_CtlError>
            err++;
 800b174:	7afb      	ldrb	r3, [r7, #11]
 800b176:	3301      	adds	r3, #1
 800b178:	72fb      	strb	r3, [r7, #11]
          break;
 800b17a:	e007      	b.n	800b18c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b17c:	6839      	ldr	r1, [r7, #0]
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 fa41 	bl	800b606 <USBD_CtlError>
          err++;
 800b184:	7afb      	ldrb	r3, [r7, #11]
 800b186:	3301      	adds	r3, #1
 800b188:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b18a:	bf00      	nop
      }
      break;
 800b18c:	e037      	b.n	800b1fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	7c1b      	ldrb	r3, [r3, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d109      	bne.n	800b1aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19e:	f107 0208 	add.w	r2, r7, #8
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	4798      	blx	r3
 800b1a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1a8:	e029      	b.n	800b1fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b1aa:	6839      	ldr	r1, [r7, #0]
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 fa2a 	bl	800b606 <USBD_CtlError>
        err++;
 800b1b2:	7afb      	ldrb	r3, [r7, #11]
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	72fb      	strb	r3, [r7, #11]
      break;
 800b1b8:	e021      	b.n	800b1fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	7c1b      	ldrb	r3, [r3, #16]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10d      	bne.n	800b1de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1ca:	f107 0208 	add.w	r2, r7, #8
 800b1ce:	4610      	mov	r0, r2
 800b1d0:	4798      	blx	r3
 800b1d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	2207      	movs	r2, #7
 800b1da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b1dc:	e00f      	b.n	800b1fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fa10 	bl	800b606 <USBD_CtlError>
        err++;
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	3301      	adds	r3, #1
 800b1ea:	72fb      	strb	r3, [r7, #11]
      break;
 800b1ec:	e007      	b.n	800b1fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 fa08 	bl	800b606 <USBD_CtlError>
      err++;
 800b1f6:	7afb      	ldrb	r3, [r7, #11]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	72fb      	strb	r3, [r7, #11]
      break;
 800b1fc:	bf00      	nop
  }

  if (err != 0U)
 800b1fe:	7afb      	ldrb	r3, [r7, #11]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d11e      	bne.n	800b242 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	88db      	ldrh	r3, [r3, #6]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d016      	beq.n	800b23a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b20c:	893b      	ldrh	r3, [r7, #8]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00e      	beq.n	800b230 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	88da      	ldrh	r2, [r3, #6]
 800b216:	893b      	ldrh	r3, [r7, #8]
 800b218:	4293      	cmp	r3, r2
 800b21a:	bf28      	it	cs
 800b21c:	4613      	movcs	r3, r2
 800b21e:	b29b      	uxth	r3, r3
 800b220:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b222:	893b      	ldrh	r3, [r7, #8]
 800b224:	461a      	mov	r2, r3
 800b226:	68f9      	ldr	r1, [r7, #12]
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fa5d 	bl	800b6e8 <USBD_CtlSendData>
 800b22e:	e009      	b.n	800b244 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f9e7 	bl	800b606 <USBD_CtlError>
 800b238:	e004      	b.n	800b244 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 faae 	bl	800b79c <USBD_CtlSendStatus>
 800b240:	e000      	b.n	800b244 <USBD_GetDescriptor+0x2cc>
    return;
 800b242:	bf00      	nop
  }
}
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop

0800b24c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	889b      	ldrh	r3, [r3, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d131      	bne.n	800b2c2 <USBD_SetAddress+0x76>
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	88db      	ldrh	r3, [r3, #6]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d12d      	bne.n	800b2c2 <USBD_SetAddress+0x76>
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	885b      	ldrh	r3, [r3, #2]
 800b26a:	2b7f      	cmp	r3, #127	; 0x7f
 800b26c:	d829      	bhi.n	800b2c2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	885b      	ldrh	r3, [r3, #2]
 800b272:	b2db      	uxtb	r3, r3
 800b274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b278:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b280:	b2db      	uxtb	r3, r3
 800b282:	2b03      	cmp	r3, #3
 800b284:	d104      	bne.n	800b290 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f9bc 	bl	800b606 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b28e:	e01d      	b.n	800b2cc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	7bfa      	ldrb	r2, [r7, #15]
 800b294:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f003 fe2d 	bl	800eefc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 fa7a 	bl	800b79c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d004      	beq.n	800b2b8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2b6:	e009      	b.n	800b2cc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c0:	e004      	b.n	800b2cc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 f99e 	bl	800b606 <USBD_CtlError>
  }
}
 800b2ca:	bf00      	nop
 800b2cc:	bf00      	nop
 800b2ce:	3710      	adds	r7, #16
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	885b      	ldrh	r3, [r3, #2]
 800b2e6:	b2da      	uxtb	r2, r3
 800b2e8:	4b4e      	ldr	r3, [pc, #312]	; (800b424 <USBD_SetConfig+0x150>)
 800b2ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b2ec:	4b4d      	ldr	r3, [pc, #308]	; (800b424 <USBD_SetConfig+0x150>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d905      	bls.n	800b300 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 f985 	bl	800b606 <USBD_CtlError>
    return USBD_FAIL;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e08c      	b.n	800b41a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b02      	cmp	r3, #2
 800b30a:	d002      	beq.n	800b312 <USBD_SetConfig+0x3e>
 800b30c:	2b03      	cmp	r3, #3
 800b30e:	d029      	beq.n	800b364 <USBD_SetConfig+0x90>
 800b310:	e075      	b.n	800b3fe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b312:	4b44      	ldr	r3, [pc, #272]	; (800b424 <USBD_SetConfig+0x150>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d020      	beq.n	800b35c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b31a:	4b42      	ldr	r3, [pc, #264]	; (800b424 <USBD_SetConfig+0x150>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	461a      	mov	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b324:	4b3f      	ldr	r3, [pc, #252]	; (800b424 <USBD_SetConfig+0x150>)
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7fe ffe7 	bl	800a2fe <USBD_SetClassConfig>
 800b330:	4603      	mov	r3, r0
 800b332:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d008      	beq.n	800b34c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b33a:	6839      	ldr	r1, [r7, #0]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f962 	bl	800b606 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2202      	movs	r2, #2
 800b346:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b34a:	e065      	b.n	800b418 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fa25 	bl	800b79c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2203      	movs	r2, #3
 800b356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b35a:	e05d      	b.n	800b418 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fa1d 	bl	800b79c <USBD_CtlSendStatus>
      break;
 800b362:	e059      	b.n	800b418 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b364:	4b2f      	ldr	r3, [pc, #188]	; (800b424 <USBD_SetConfig+0x150>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d112      	bne.n	800b392 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b374:	4b2b      	ldr	r3, [pc, #172]	; (800b424 <USBD_SetConfig+0x150>)
 800b376:	781b      	ldrb	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b37e:	4b29      	ldr	r3, [pc, #164]	; (800b424 <USBD_SetConfig+0x150>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	4619      	mov	r1, r3
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7fe ffd6 	bl	800a336 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fa06 	bl	800b79c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b390:	e042      	b.n	800b418 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b392:	4b24      	ldr	r3, [pc, #144]	; (800b424 <USBD_SetConfig+0x150>)
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d02a      	beq.n	800b3f6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7fe ffc4 	bl	800a336 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b3ae:	4b1d      	ldr	r3, [pc, #116]	; (800b424 <USBD_SetConfig+0x150>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	461a      	mov	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3b8:	4b1a      	ldr	r3, [pc, #104]	; (800b424 <USBD_SetConfig+0x150>)
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fe ff9d 	bl	800a2fe <USBD_SetClassConfig>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00f      	beq.n	800b3ee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f918 	bl	800b606 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7fe ffa9 	bl	800a336 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2202      	movs	r2, #2
 800b3e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3ec:	e014      	b.n	800b418 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 f9d4 	bl	800b79c <USBD_CtlSendStatus>
      break;
 800b3f4:	e010      	b.n	800b418 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f9d0 	bl	800b79c <USBD_CtlSendStatus>
      break;
 800b3fc:	e00c      	b.n	800b418 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f900 	bl	800b606 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b406:	4b07      	ldr	r3, [pc, #28]	; (800b424 <USBD_SetConfig+0x150>)
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7fe ff92 	bl	800a336 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b412:	2303      	movs	r3, #3
 800b414:	73fb      	strb	r3, [r7, #15]
      break;
 800b416:	bf00      	nop
  }

  return ret;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	20000f08 	.word	0x20000f08

0800b428 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	88db      	ldrh	r3, [r3, #6]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d004      	beq.n	800b444 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 f8e2 	bl	800b606 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b442:	e023      	b.n	800b48c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b02      	cmp	r3, #2
 800b44e:	dc02      	bgt.n	800b456 <USBD_GetConfig+0x2e>
 800b450:	2b00      	cmp	r3, #0
 800b452:	dc03      	bgt.n	800b45c <USBD_GetConfig+0x34>
 800b454:	e015      	b.n	800b482 <USBD_GetConfig+0x5a>
 800b456:	2b03      	cmp	r3, #3
 800b458:	d00b      	beq.n	800b472 <USBD_GetConfig+0x4a>
 800b45a:	e012      	b.n	800b482 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3308      	adds	r3, #8
 800b466:	2201      	movs	r2, #1
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f93c 	bl	800b6e8 <USBD_CtlSendData>
        break;
 800b470:	e00c      	b.n	800b48c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3304      	adds	r3, #4
 800b476:	2201      	movs	r2, #1
 800b478:	4619      	mov	r1, r3
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f934 	bl	800b6e8 <USBD_CtlSendData>
        break;
 800b480:	e004      	b.n	800b48c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f8be 	bl	800b606 <USBD_CtlError>
        break;
 800b48a:	bf00      	nop
}
 800b48c:	bf00      	nop
 800b48e:	3708      	adds	r7, #8
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d81e      	bhi.n	800b4ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	88db      	ldrh	r3, [r3, #6]
 800b4b0:	2b02      	cmp	r3, #2
 800b4b2:	d004      	beq.n	800b4be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b4b4:	6839      	ldr	r1, [r7, #0]
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 f8a5 	bl	800b606 <USBD_CtlError>
        break;
 800b4bc:	e01a      	b.n	800b4f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d005      	beq.n	800b4da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	f043 0202 	orr.w	r2, r3, #2
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	2202      	movs	r2, #2
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f900 	bl	800b6e8 <USBD_CtlSendData>
      break;
 800b4e8:	e004      	b.n	800b4f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f88a 	bl	800b606 <USBD_CtlError>
      break;
 800b4f2:	bf00      	nop
  }
}
 800b4f4:	bf00      	nop
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	885b      	ldrh	r3, [r3, #2]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d107      	bne.n	800b51e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f940 	bl	800b79c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b51c:	e013      	b.n	800b546 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	885b      	ldrh	r3, [r3, #2]
 800b522:	2b02      	cmp	r3, #2
 800b524:	d10b      	bne.n	800b53e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	889b      	ldrh	r3, [r3, #4]
 800b52a:	0a1b      	lsrs	r3, r3, #8
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f930 	bl	800b79c <USBD_CtlSendStatus>
}
 800b53c:	e003      	b.n	800b546 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f860 	bl	800b606 <USBD_CtlError>
}
 800b546:	bf00      	nop
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b082      	sub	sp, #8
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	3b01      	subs	r3, #1
 800b562:	2b02      	cmp	r3, #2
 800b564:	d80b      	bhi.n	800b57e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	885b      	ldrh	r3, [r3, #2]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d10c      	bne.n	800b588 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f910 	bl	800b79c <USBD_CtlSendStatus>
      }
      break;
 800b57c:	e004      	b.n	800b588 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f840 	bl	800b606 <USBD_CtlError>
      break;
 800b586:	e000      	b.n	800b58a <USBD_ClrFeature+0x3c>
      break;
 800b588:	bf00      	nop
  }
}
 800b58a:	bf00      	nop
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	781a      	ldrb	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	781a      	ldrb	r2, [r3, #0]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f7ff fa41 	bl	800aa44 <SWAPBYTE>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7ff fa34 	bl	800aa44 <SWAPBYTE>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f7ff fa27 	bl	800aa44 <SWAPBYTE>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	80da      	strh	r2, [r3, #6]
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b082      	sub	sp, #8
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b610:	2180      	movs	r1, #128	; 0x80
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f003 fc08 	bl	800ee28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b618:	2100      	movs	r1, #0
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f003 fc04 	bl	800ee28 <USBD_LL_StallEP>
}
 800b620:	bf00      	nop
 800b622:	3708      	adds	r7, #8
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}

0800b628 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b634:	2300      	movs	r3, #0
 800b636:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d036      	beq.n	800b6ac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b642:	6938      	ldr	r0, [r7, #16]
 800b644:	f000 f836 	bl	800b6b4 <USBD_GetLen>
 800b648:	4603      	mov	r3, r0
 800b64a:	3301      	adds	r3, #1
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	68ba      	ldr	r2, [r7, #8]
 800b65a:	4413      	add	r3, r2
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	7812      	ldrb	r2, [r2, #0]
 800b660:	701a      	strb	r2, [r3, #0]
  idx++;
 800b662:	7dfb      	ldrb	r3, [r7, #23]
 800b664:	3301      	adds	r3, #1
 800b666:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	4413      	add	r3, r2
 800b66e:	2203      	movs	r2, #3
 800b670:	701a      	strb	r2, [r3, #0]
  idx++;
 800b672:	7dfb      	ldrb	r3, [r7, #23]
 800b674:	3301      	adds	r3, #1
 800b676:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b678:	e013      	b.n	800b6a2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b67a:	7dfb      	ldrb	r3, [r7, #23]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	4413      	add	r3, r2
 800b680:	693a      	ldr	r2, [r7, #16]
 800b682:	7812      	ldrb	r2, [r2, #0]
 800b684:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	3301      	adds	r3, #1
 800b68a:	613b      	str	r3, [r7, #16]
    idx++;
 800b68c:	7dfb      	ldrb	r3, [r7, #23]
 800b68e:	3301      	adds	r3, #1
 800b690:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b692:	7dfb      	ldrb	r3, [r7, #23]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	4413      	add	r3, r2
 800b698:	2200      	movs	r2, #0
 800b69a:	701a      	strb	r2, [r3, #0]
    idx++;
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
 800b69e:	3301      	adds	r3, #1
 800b6a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1e7      	bne.n	800b67a <USBD_GetString+0x52>
 800b6aa:	e000      	b.n	800b6ae <USBD_GetString+0x86>
    return;
 800b6ac:	bf00      	nop
  }
}
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b6c4:	e005      	b.n	800b6d2 <USBD_GetLen+0x1e>
  {
    len++;
 800b6c6:	7bfb      	ldrb	r3, [r7, #15]
 800b6c8:	3301      	adds	r3, #1
 800b6ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	781b      	ldrb	r3, [r3, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d1f5      	bne.n	800b6c6 <USBD_GetLen+0x12>
  }

  return len;
 800b6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	2100      	movs	r1, #0
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f003 fc13 	bl	800ef3a <USBD_LL_Transmit>

  return USBD_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b084      	sub	sp, #16
 800b722:	af00      	add	r7, sp, #0
 800b724:	60f8      	str	r0, [r7, #12]
 800b726:	60b9      	str	r1, [r7, #8]
 800b728:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68ba      	ldr	r2, [r7, #8]
 800b72e:	2100      	movs	r1, #0
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f003 fc02 	bl	800ef3a <USBD_LL_Transmit>

  return USBD_OK;
 800b736:	2300      	movs	r3, #0
}
 800b738:	4618      	mov	r0, r3
 800b73a:	3710      	adds	r7, #16
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2203      	movs	r2, #3
 800b750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	2100      	movs	r1, #0
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f003 fc06 	bl	800ef7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b770:	2300      	movs	r3, #0
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}

0800b77a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b77a:	b580      	push	{r7, lr}
 800b77c:	b084      	sub	sp, #16
 800b77e:	af00      	add	r7, sp, #0
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	2100      	movs	r1, #0
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f003 fbf5 	bl	800ef7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2204      	movs	r2, #4
 800b7a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f003 fbc1 	bl	800ef3a <USBD_LL_Transmit>

  return USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2205      	movs	r2, #5
 800b7ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f003 fbcf 	bl	800ef7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b7f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b7fa:	2b84      	cmp	r3, #132	; 0x84
 800b7fc:	d005      	beq.n	800b80a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b7fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	4413      	add	r3, r2
 800b806:	3303      	adds	r3, #3
 800b808:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b80a:	68fb      	ldr	r3, [r7, #12]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3714      	adds	r7, #20
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr

0800b818 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b81e:	f3ef 8305 	mrs	r3, IPSR
 800b822:	607b      	str	r3, [r7, #4]
  return(result);
 800b824:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b826:	2b00      	cmp	r3, #0
 800b828:	bf14      	ite	ne
 800b82a:	2301      	movne	r3, #1
 800b82c:	2300      	moveq	r3, #0
 800b82e:	b2db      	uxtb	r3, r3
}
 800b830:	4618      	mov	r0, r3
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b840:	f001 fbc2 	bl	800cfc8 <vTaskStartScheduler>
  
  return osOK;
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	bd80      	pop	{r7, pc}

0800b84a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b84a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b84c:	b089      	sub	sp, #36	; 0x24
 800b84e:	af04      	add	r7, sp, #16
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d020      	beq.n	800b89e <osThreadCreate+0x54>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d01c      	beq.n	800b89e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685c      	ldr	r4, [r3, #4]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	691e      	ldr	r6, [r3, #16]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b876:	4618      	mov	r0, r3
 800b878:	f7ff ffb6 	bl	800b7e8 <makeFreeRtosPriority>
 800b87c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b886:	9202      	str	r2, [sp, #8]
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	9100      	str	r1, [sp, #0]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	4632      	mov	r2, r6
 800b890:	4629      	mov	r1, r5
 800b892:	4620      	mov	r0, r4
 800b894:	f001 f9d0 	bl	800cc38 <xTaskCreateStatic>
 800b898:	4603      	mov	r3, r0
 800b89a:	60fb      	str	r3, [r7, #12]
 800b89c:	e01c      	b.n	800b8d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685c      	ldr	r4, [r3, #4]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8aa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7ff ff98 	bl	800b7e8 <makeFreeRtosPriority>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	9301      	str	r3, [sp, #4]
 800b8c0:	9200      	str	r2, [sp, #0]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	4632      	mov	r2, r6
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f001 fa12 	bl	800ccf2 <xTaskCreate>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d001      	beq.n	800b8d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e000      	b.n	800b8da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <osDelay+0x16>
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	e000      	b.n	800b8fa <osDelay+0x18>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f001 fb30 	bl	800cf60 <vTaskDelay>
  
  return osOK;
 800b900:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
	...

0800b90c <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af02      	add	r7, sp, #8
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800b916:	2300      	movs	r3, #0
 800b918:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800b91e:	f7ff ff7b 	bl	800b818 <inHandlerMode>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01c      	beq.n	800b962 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	f107 0208 	add.w	r2, r7, #8
 800b92e:	f107 030c 	add.w	r3, r7, #12
 800b932:	9300      	str	r3, [sp, #0]
 800b934:	4613      	mov	r3, r2
 800b936:	2201      	movs	r2, #1
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f002 f8f7 	bl	800db2c <xTaskGenericNotifyFromISR>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b01      	cmp	r3, #1
 800b942:	d002      	beq.n	800b94a <osSignalSet+0x3e>
      return 0x80000000;
 800b944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b948:	e019      	b.n	800b97e <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d015      	beq.n	800b97c <osSignalSet+0x70>
 800b950:	4b0d      	ldr	r3, [pc, #52]	; (800b988 <osSignalSet+0x7c>)
 800b952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b956:	601a      	str	r2, [r3, #0]
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	e00c      	b.n	800b97c <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800b962:	6839      	ldr	r1, [r7, #0]
 800b964:	f107 0308 	add.w	r3, r7, #8
 800b968:	2201      	movs	r2, #1
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f002 f828 	bl	800d9c0 <xTaskGenericNotify>
 800b970:	4603      	mov	r3, r0
 800b972:	2b01      	cmp	r3, #1
 800b974:	d002      	beq.n	800b97c <osSignalSet+0x70>
    return 0x80000000;
 800b976:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b97a:	e000      	b.n	800b97e <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800b97c:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	e000ed04 	.word	0xe000ed04

0800b98c <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800b98c:	b590      	push	{r4, r7, lr}
 800b98e:	b089      	sub	sp, #36	; 0x24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800b998:	2300      	movs	r3, #0
 800b99a:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a6:	d103      	bne.n	800b9b0 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	e009      	b.n	800b9c4 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d006      	beq.n	800b9c4 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d101      	bne.n	800b9c4 <osSignalWait+0x38>
      ticks = 1;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800b9c4:	f7ff ff28 	bl	800b818 <inHandlerMode>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d002      	beq.n	800b9d4 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800b9ce:	2382      	movs	r3, #130	; 0x82
 800b9d0:	613b      	str	r3, [r7, #16]
 800b9d2:	e01b      	b.n	800ba0c <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800b9d4:	68b9      	ldr	r1, [r7, #8]
 800b9d6:	f107 0310 	add.w	r3, r7, #16
 800b9da:	1d1a      	adds	r2, r3, #4
 800b9dc:	69fb      	ldr	r3, [r7, #28]
 800b9de:	2000      	movs	r0, #0
 800b9e0:	f001 ff94 	bl	800d90c <xTaskNotifyWait>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d008      	beq.n	800b9fc <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <osSignalWait+0x6a>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	613b      	str	r3, [r7, #16]
 800b9f4:	e00a      	b.n	800ba0c <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800b9f6:	2340      	movs	r3, #64	; 0x40
 800b9f8:	613b      	str	r3, [r7, #16]
 800b9fa:	e007      	b.n	800ba0c <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	da02      	bge.n	800ba08 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800ba02:	2386      	movs	r3, #134	; 0x86
 800ba04:	613b      	str	r3, [r7, #16]
 800ba06:	e001      	b.n	800ba0c <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800ba08:	2308      	movs	r3, #8
 800ba0a:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	461c      	mov	r4, r3
 800ba10:	f107 0310 	add.w	r3, r7, #16
 800ba14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ba18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	3724      	adds	r7, #36	; 0x24
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd90      	pop	{r4, r7, pc}

0800ba24 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	3303      	adds	r3, #3
 800ba32:	f023 0303 	bic.w	r3, r3, #3
 800ba36:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800ba38:	2014      	movs	r0, #20
 800ba3a:	f002 fc05 	bl	800e248 <pvPortMalloc>
 800ba3e:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d046      	beq.n	800bad4 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2200      	movs	r2, #0
 800ba58:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f002 fbf2 	bl	800e248 <pvPortMalloc>
 800ba64:	4602      	mov	r2, r0
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800ba6a:	697b      	ldr	r3, [r7, #20]
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d02b      	beq.n	800baca <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	fb02 f303 	mul.w	r3, r2, r3
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f002 fbe3 	bl	800e248 <pvPortMalloc>
 800ba82:	4602      	mov	r2, r0
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d011      	beq.n	800bab4 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ba90:	2300      	movs	r3, #0
 800ba92:	613b      	str	r3, [r7, #16]
 800ba94:	e008      	b.n	800baa8 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	2200      	movs	r2, #0
 800baa0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	3301      	adds	r3, #1
 800baa6:	613b      	str	r3, [r7, #16]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d3f1      	bcc.n	800ba96 <osPoolCreate+0x72>
 800bab2:	e00f      	b.n	800bad4 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	4618      	mov	r0, r3
 800baba:	f002 fc91 	bl	800e3e0 <vPortFree>
        vPortFree(thePool);
 800babe:	6978      	ldr	r0, [r7, #20]
 800bac0:	f002 fc8e 	bl	800e3e0 <vPortFree>
        thePool = NULL;
 800bac4:	2300      	movs	r3, #0
 800bac6:	617b      	str	r3, [r7, #20]
 800bac8:	e004      	b.n	800bad4 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800baca:	6978      	ldr	r0, [r7, #20]
 800bacc:	f002 fc88 	bl	800e3e0 <vPortFree>
      thePool = NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800bad4:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3718      	adds	r7, #24
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b08a      	sub	sp, #40	; 0x28
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800bae6:	2300      	movs	r3, #0
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800baea:	2300      	movs	r3, #0
 800baec:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800baee:	f7ff fe93 	bl	800b818 <inHandlerMode>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d00e      	beq.n	800bb16 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800baf8:	f3ef 8211 	mrs	r2, BASEPRI
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	617a      	str	r2, [r7, #20]
 800bb0e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bb10:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb12:	627b      	str	r3, [r7, #36]	; 0x24
 800bb14:	e001      	b.n	800bb1a <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800bb16:	f002 fa75 	bl	800e004 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	61fb      	str	r3, [r7, #28]
 800bb1e:	e029      	b.n	800bb74 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	691a      	ldr	r2, [r3, #16]
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	4413      	add	r3, r2
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	6892      	ldr	r2, [r2, #8]
 800bb2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb30:	fb01 f202 	mul.w	r2, r1, r2
 800bb34:	1a9b      	subs	r3, r3, r2
 800bb36:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	4413      	add	r3, r2
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d113      	bne.n	800bb6e <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	685a      	ldr	r2, [r3, #4]
 800bb4a:	69bb      	ldr	r3, [r7, #24]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	2201      	movs	r2, #1
 800bb50:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4619      	mov	r1, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	69ba      	ldr	r2, [r7, #24]
 800bb5e:	fb02 f303 	mul.w	r3, r2, r3
 800bb62:	440b      	add	r3, r1
 800bb64:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	69ba      	ldr	r2, [r7, #24]
 800bb6a:	611a      	str	r2, [r3, #16]
      break;
 800bb6c:	e007      	b.n	800bb7e <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	3301      	adds	r3, #1
 800bb72:	61fb      	str	r3, [r7, #28]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	69fa      	ldr	r2, [r7, #28]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d3d0      	bcc.n	800bb20 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800bb7e:	f7ff fe4b 	bl	800b818 <inHandlerMode>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d005      	beq.n	800bb94 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800bb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb92:	e001      	b.n	800bb98 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800bb94:	f002 fa66 	bl	800e064 <vPortExitCritical>
  }
  
  return p;
 800bb98:	6a3b      	ldr	r3, [r7, #32]
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3728      	adds	r7, #40	; 0x28
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b085      	sub	sp, #20
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <osPoolFree+0x14>
    return osErrorParameter;
 800bbb2:	2380      	movs	r3, #128	; 0x80
 800bbb4:	e030      	b.n	800bc18 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <osPoolFree+0x1e>
    return osErrorParameter;
 800bbbc:	2380      	movs	r3, #128	; 0x80
 800bbbe:	e02b      	b.n	800bc18 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d201      	bcs.n	800bbce <osPoolFree+0x2c>
    return osErrorParameter;
 800bbca:	2380      	movs	r3, #128	; 0x80
 800bbcc:	e024      	b.n	800bc18 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	6812      	ldr	r2, [r2, #0]
 800bbd4:	1a9b      	subs	r3, r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	68da      	ldr	r2, [r3, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbe2:	fb01 f202 	mul.w	r2, r1, r2
 800bbe6:	1a9b      	subs	r3, r3, r2
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <osPoolFree+0x4e>
    return osErrorParameter;
 800bbec:	2380      	movs	r3, #128	; 0x80
 800bbee:	e013      	b.n	800bc18 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbfa:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d301      	bcc.n	800bc0a <osPoolFree+0x68>
    return osErrorParameter;
 800bc06:	2380      	movs	r3, #128	; 0x80
 800bc08:	e006      	b.n	800bc18 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	685a      	ldr	r2, [r3, #4]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4413      	add	r3, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bc24:	b590      	push	{r4, r7, lr}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d011      	beq.n	800bc5a <osMessageCreate+0x36>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d00d      	beq.n	800bc5a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6818      	ldr	r0, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6859      	ldr	r1, [r3, #4]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	689a      	ldr	r2, [r3, #8]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68db      	ldr	r3, [r3, #12]
 800bc4e:	2400      	movs	r4, #0
 800bc50:	9400      	str	r4, [sp, #0]
 800bc52:	f000 fb15 	bl	800c280 <xQueueGenericCreateStatic>
 800bc56:	4603      	mov	r3, r0
 800bc58:	e008      	b.n	800bc6c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6818      	ldr	r0, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	4619      	mov	r1, r3
 800bc66:	f000 fb83 	bl	800c370 <xQueueGenericCreate>
 800bc6a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd90      	pop	{r4, r7, pc}

0800bc74 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b086      	sub	sp, #24
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bc80:	2300      	movs	r3, #0
 800bc82:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d101      	bne.n	800bc92 <osMessagePut+0x1e>
    ticks = 1;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bc92:	f7ff fdc1 	bl	800b818 <inHandlerMode>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d018      	beq.n	800bcce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bc9c:	f107 0210 	add.w	r2, r7, #16
 800bca0:	f107 0108 	add.w	r1, r7, #8
 800bca4:	2300      	movs	r3, #0
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f000 fcba 	bl	800c620 <xQueueGenericSendFromISR>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b01      	cmp	r3, #1
 800bcb0:	d001      	beq.n	800bcb6 <osMessagePut+0x42>
      return osErrorOS;
 800bcb2:	23ff      	movs	r3, #255	; 0xff
 800bcb4:	e018      	b.n	800bce8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d014      	beq.n	800bce6 <osMessagePut+0x72>
 800bcbc:	4b0c      	ldr	r3, [pc, #48]	; (800bcf0 <osMessagePut+0x7c>)
 800bcbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	e00b      	b.n	800bce6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bcce:	f107 0108 	add.w	r1, r7, #8
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	697a      	ldr	r2, [r7, #20]
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 fba4 	bl	800c424 <xQueueGenericSend>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	d001      	beq.n	800bce6 <osMessagePut+0x72>
      return osErrorOS;
 800bce2:	23ff      	movs	r3, #255	; 0xff
 800bce4:	e000      	b.n	800bce8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bce6:	2300      	movs	r3, #0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3718      	adds	r7, #24
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	e000ed04 	.word	0xe000ed04

0800bcf4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bcf4:	b590      	push	{r4, r7, lr}
 800bcf6:	b08b      	sub	sp, #44	; 0x2c
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bd04:	2300      	movs	r3, #0
 800bd06:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d10a      	bne.n	800bd24 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bd0e:	2380      	movs	r3, #128	; 0x80
 800bd10:	617b      	str	r3, [r7, #20]
    return event;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	461c      	mov	r4, r3
 800bd16:	f107 0314 	add.w	r3, r7, #20
 800bd1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd22:	e054      	b.n	800bdce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bd24:	2300      	movs	r3, #0
 800bd26:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd32:	d103      	bne.n	800bd3c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800bd34:	f04f 33ff 	mov.w	r3, #4294967295
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
 800bd3a:	e009      	b.n	800bd50 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d006      	beq.n	800bd50 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d101      	bne.n	800bd50 <osMessageGet+0x5c>
      ticks = 1;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bd50:	f7ff fd62 	bl	800b818 <inHandlerMode>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d01c      	beq.n	800bd94 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800bd5a:	f107 0220 	add.w	r2, r7, #32
 800bd5e:	f107 0314 	add.w	r3, r7, #20
 800bd62:	3304      	adds	r3, #4
 800bd64:	4619      	mov	r1, r3
 800bd66:	68b8      	ldr	r0, [r7, #8]
 800bd68:	f000 fdd6 	bl	800c918 <xQueueReceiveFromISR>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d102      	bne.n	800bd78 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800bd72:	2310      	movs	r3, #16
 800bd74:	617b      	str	r3, [r7, #20]
 800bd76:	e001      	b.n	800bd7c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d01d      	beq.n	800bdbe <osMessageGet+0xca>
 800bd82:	4b15      	ldr	r3, [pc, #84]	; (800bdd8 <osMessageGet+0xe4>)
 800bd84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	f3bf 8f4f 	dsb	sy
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	e014      	b.n	800bdbe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800bd94:	f107 0314 	add.w	r3, r7, #20
 800bd98:	3304      	adds	r3, #4
 800bd9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	68b8      	ldr	r0, [r7, #8]
 800bda0:	f000 fcda 	bl	800c758 <xQueueReceive>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d102      	bne.n	800bdb0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800bdaa:	2310      	movs	r3, #16
 800bdac:	617b      	str	r3, [r7, #20]
 800bdae:	e006      	b.n	800bdbe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d101      	bne.n	800bdba <osMessageGet+0xc6>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e000      	b.n	800bdbc <osMessageGet+0xc8>
 800bdba:	2340      	movs	r3, #64	; 0x40
 800bdbc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	461c      	mov	r4, r3
 800bdc2:	f107 0314 	add.w	r3, r7, #20
 800bdc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bdca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	372c      	adds	r7, #44	; 0x2c
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd90      	pop	{r4, r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800bddc:	b590      	push	{r4, r7, lr}
 800bdde:	b087      	sub	sp, #28
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	60fb      	str	r3, [r7, #12]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	613b      	str	r3, [r7, #16]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	689c      	ldr	r4, [r3, #8]
 800bdfa:	200c      	movs	r0, #12
 800bdfc:	f002 fa24 	bl	800e248 <pvPortMalloc>
 800be00:	4603      	mov	r3, r0
 800be02:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <osMailCreate+0x36>
    return NULL;
 800be0e:	2300      	movs	r3, #0
 800be10:	e038      	b.n	800be84 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6818      	ldr	r0, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	689b      	ldr	r3, [r3, #8]
 800be24:	681c      	ldr	r4, [r3, #0]
 800be26:	2200      	movs	r2, #0
 800be28:	2104      	movs	r1, #4
 800be2a:	f000 faa1 	bl	800c370 <xQueueGenericCreate>
 800be2e:	4603      	mov	r3, r0
 800be30:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d107      	bne.n	800be4e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4618      	mov	r0, r3
 800be46:	f002 facb 	bl	800e3e0 <vPortFree>
    return NULL;
 800be4a:	2300      	movs	r3, #0
 800be4c:	e01a      	b.n	800be84 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	681c      	ldr	r4, [r3, #0]
 800be54:	f107 030c 	add.w	r3, r7, #12
 800be58:	4618      	mov	r0, r3
 800be5a:	f7ff fde3 	bl	800ba24 <osPoolCreate>
 800be5e:	4603      	mov	r3, r0
 800be60:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d107      	bne.n	800be7e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4618      	mov	r0, r3
 800be76:	f002 fab3 	bl	800e3e0 <vPortFree>
    return NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	e002      	b.n	800be84 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800be84:	4618      	mov	r0, r3
 800be86:	371c      	adds	r7, #28
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd90      	pop	{r4, r7, pc}

0800be8c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <osMailAlloc+0x14>
    return NULL;
 800be9c:	2300      	movs	r3, #0
 800be9e:	e006      	b.n	800beae <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7ff fe1a 	bl	800bade <osPoolAlloc>
 800beaa:	60f8      	str	r0, [r7, #12]
  
  return p;
 800beac:	68fb      	ldr	r3, [r7, #12]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d101      	bne.n	800becc <osMailPut+0x14>
    return osErrorParameter;
 800bec8:	2380      	movs	r3, #128	; 0x80
 800beca:	e02c      	b.n	800bf26 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800becc:	2300      	movs	r3, #0
 800bece:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800bed0:	f7ff fca2 	bl	800b818 <inHandlerMode>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d018      	beq.n	800bf0c <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6858      	ldr	r0, [r3, #4]
 800bede:	f107 020c 	add.w	r2, r7, #12
 800bee2:	4639      	mov	r1, r7
 800bee4:	2300      	movs	r3, #0
 800bee6:	f000 fb9b 	bl	800c620 <xQueueGenericSendFromISR>
 800beea:	4603      	mov	r3, r0
 800beec:	2b01      	cmp	r3, #1
 800beee:	d001      	beq.n	800bef4 <osMailPut+0x3c>
      return osErrorOS;
 800bef0:	23ff      	movs	r3, #255	; 0xff
 800bef2:	e018      	b.n	800bf26 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d014      	beq.n	800bf24 <osMailPut+0x6c>
 800befa:	4b0d      	ldr	r3, [pc, #52]	; (800bf30 <osMailPut+0x78>)
 800befc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	f3bf 8f4f 	dsb	sy
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	e00b      	b.n	800bf24 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6858      	ldr	r0, [r3, #4]
 800bf10:	4639      	mov	r1, r7
 800bf12:	2300      	movs	r3, #0
 800bf14:	2200      	movs	r2, #0
 800bf16:	f000 fa85 	bl	800c424 <xQueueGenericSend>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d001      	beq.n	800bf24 <osMailPut+0x6c>
      return osErrorOS;
 800bf20:	23ff      	movs	r3, #255	; 0xff
 800bf22:	e000      	b.n	800bf26 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800bf24:	2300      	movs	r3, #0
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3710      	adds	r7, #16
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800bf34:	b590      	push	{r4, r7, lr}
 800bf36:	b08b      	sub	sp, #44	; 0x2c
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d10a      	bne.n	800bf60 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800bf4a:	2380      	movs	r3, #128	; 0x80
 800bf4c:	617b      	str	r3, [r7, #20]
    return event;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	461c      	mov	r4, r3
 800bf52:	f107 0314 	add.w	r3, r7, #20
 800bf56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bf5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf5e:	e056      	b.n	800c00e <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800bf60:	2300      	movs	r3, #0
 800bf62:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6e:	d103      	bne.n	800bf78 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800bf70:	f04f 33ff 	mov.w	r3, #4294967295
 800bf74:	627b      	str	r3, [r7, #36]	; 0x24
 800bf76:	e009      	b.n	800bf8c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d006      	beq.n	800bf8c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d101      	bne.n	800bf8c <osMailGet+0x58>
      ticks = 1;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800bf8c:	f7ff fc44 	bl	800b818 <inHandlerMode>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d01d      	beq.n	800bfd2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	6858      	ldr	r0, [r3, #4]
 800bf9a:	f107 0220 	add.w	r2, r7, #32
 800bf9e:	f107 0314 	add.w	r3, r7, #20
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	f000 fcb7 	bl	800c918 <xQueueReceiveFromISR>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d102      	bne.n	800bfb6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	617b      	str	r3, [r7, #20]
 800bfb4:	e001      	b.n	800bfba <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d01e      	beq.n	800bffe <osMailGet+0xca>
 800bfc0:	4b15      	ldr	r3, [pc, #84]	; (800c018 <osMailGet+0xe4>)
 800bfc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfc6:	601a      	str	r2, [r3, #0]
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	e015      	b.n	800bffe <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	6858      	ldr	r0, [r3, #4]
 800bfd6:	f107 0314 	add.w	r3, r7, #20
 800bfda:	3304      	adds	r3, #4
 800bfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfde:	4619      	mov	r1, r3
 800bfe0:	f000 fbba 	bl	800c758 <xQueueReceive>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b01      	cmp	r3, #1
 800bfe8:	d102      	bne.n	800bff0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800bfea:	2320      	movs	r3, #32
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	e006      	b.n	800bffe <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d101      	bne.n	800bffa <osMailGet+0xc6>
 800bff6:	2300      	movs	r3, #0
 800bff8:	e000      	b.n	800bffc <osMailGet+0xc8>
 800bffa:	2340      	movs	r3, #64	; 0x40
 800bffc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	461c      	mov	r4, r3
 800c002:	f107 0314 	add.w	r3, r7, #20
 800c006:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c00a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	372c      	adds	r7, #44	; 0x2c
 800c012:	46bd      	mov	sp, r7
 800c014:	bd90      	pop	{r4, r7, pc}
 800c016:	bf00      	nop
 800c018:	e000ed04 	.word	0xe000ed04

0800c01c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <osMailFree+0x14>
    return osErrorParameter;
 800c02c:	2380      	movs	r3, #128	; 0x80
 800c02e:	e006      	b.n	800c03e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	4618      	mov	r0, r3
 800c038:	f7ff fdb3 	bl	800bba2 <osPoolFree>
 800c03c:	4603      	mov	r3, r0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c046:	b480      	push	{r7}
 800c048:	b083      	sub	sp, #12
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f103 0208 	add.w	r2, r3, #8
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f04f 32ff 	mov.w	r2, #4294967295
 800c05e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f103 0208 	add.w	r2, r3, #8
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f103 0208 	add.w	r2, r3, #8
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c07a:	bf00      	nop
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	68fa      	ldr	r2, [r7, #12]
 800c0b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	601a      	str	r2, [r3, #0]
}
 800c0dc:	bf00      	nop
 800c0de:	3714      	adds	r7, #20
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fe:	d103      	bne.n	800c108 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	691b      	ldr	r3, [r3, #16]
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	e00c      	b.n	800c122 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	3308      	adds	r3, #8
 800c10c:	60fb      	str	r3, [r7, #12]
 800c10e:	e002      	b.n	800c116 <vListInsert+0x2e>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	60fb      	str	r3, [r7, #12]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d2f6      	bcs.n	800c110 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	685a      	ldr	r2, [r3, #4]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	683a      	ldr	r2, [r7, #0]
 800c130:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	68fa      	ldr	r2, [r7, #12]
 800c136:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	1c5a      	adds	r2, r3, #1
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	601a      	str	r2, [r3, #0]
}
 800c14e:	bf00      	nop
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c15a:	b480      	push	{r7}
 800c15c:	b085      	sub	sp, #20
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	691b      	ldr	r3, [r3, #16]
 800c166:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	6892      	ldr	r2, [r2, #8]
 800c170:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	6852      	ldr	r2, [r2, #4]
 800c17a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	429a      	cmp	r2, r3
 800c184:	d103      	bne.n	800c18e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	689a      	ldr	r2, [r3, #8]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	1e5a      	subs	r2, r3, #1
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr
	...

0800c1b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10a      	bne.n	800c1da <xQueueGenericReset+0x2a>
	__asm volatile
 800c1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	60bb      	str	r3, [r7, #8]
}
 800c1d6:	bf00      	nop
 800c1d8:	e7fe      	b.n	800c1d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c1da:	f001 ff13 	bl	800e004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e6:	68f9      	ldr	r1, [r7, #12]
 800c1e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c1ea:	fb01 f303 	mul.w	r3, r1, r3
 800c1ee:	441a      	add	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681a      	ldr	r2, [r3, #0]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681a      	ldr	r2, [r3, #0]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20a:	3b01      	subs	r3, #1
 800c20c:	68f9      	ldr	r1, [r7, #12]
 800c20e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c210:	fb01 f303 	mul.w	r3, r1, r3
 800c214:	441a      	add	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	22ff      	movs	r2, #255	; 0xff
 800c21e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	22ff      	movs	r2, #255	; 0xff
 800c226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d114      	bne.n	800c25a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01a      	beq.n	800c26e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	3310      	adds	r3, #16
 800c23c:	4618      	mov	r0, r3
 800c23e:	f001 f905 	bl	800d44c <xTaskRemoveFromEventList>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d012      	beq.n	800c26e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c248:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <xQueueGenericReset+0xcc>)
 800c24a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c24e:	601a      	str	r2, [r3, #0]
 800c250:	f3bf 8f4f 	dsb	sy
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	e009      	b.n	800c26e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	3310      	adds	r3, #16
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff fef1 	bl	800c046 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	3324      	adds	r3, #36	; 0x24
 800c268:	4618      	mov	r0, r3
 800c26a:	f7ff feec 	bl	800c046 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c26e:	f001 fef9 	bl	800e064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c272:	2301      	movs	r3, #1
}
 800c274:	4618      	mov	r0, r3
 800c276:	3710      	adds	r7, #16
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	e000ed04 	.word	0xe000ed04

0800c280 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c280:	b580      	push	{r7, lr}
 800c282:	b08e      	sub	sp, #56	; 0x38
 800c284:	af02      	add	r7, sp, #8
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d10a      	bne.n	800c2aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c298:	f383 8811 	msr	BASEPRI, r3
 800c29c:	f3bf 8f6f 	isb	sy
 800c2a0:	f3bf 8f4f 	dsb	sy
 800c2a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c2a6:	bf00      	nop
 800c2a8:	e7fe      	b.n	800c2a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10a      	bne.n	800c2c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <xQueueGenericCreateStatic+0x52>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d001      	beq.n	800c2d6 <xQueueGenericCreateStatic+0x56>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e000      	b.n	800c2d8 <xQueueGenericCreateStatic+0x58>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d10a      	bne.n	800c2f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	623b      	str	r3, [r7, #32]
}
 800c2ee:	bf00      	nop
 800c2f0:	e7fe      	b.n	800c2f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d102      	bne.n	800c2fe <xQueueGenericCreateStatic+0x7e>
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <xQueueGenericCreateStatic+0x82>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e000      	b.n	800c304 <xQueueGenericCreateStatic+0x84>
 800c302:	2300      	movs	r3, #0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10a      	bne.n	800c31e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c30c:	f383 8811 	msr	BASEPRI, r3
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	f3bf 8f4f 	dsb	sy
 800c318:	61fb      	str	r3, [r7, #28]
}
 800c31a:	bf00      	nop
 800c31c:	e7fe      	b.n	800c31c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c31e:	2348      	movs	r3, #72	; 0x48
 800c320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	2b48      	cmp	r3, #72	; 0x48
 800c326:	d00a      	beq.n	800c33e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32c:	f383 8811 	msr	BASEPRI, r3
 800c330:	f3bf 8f6f 	isb	sy
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	61bb      	str	r3, [r7, #24]
}
 800c33a:	bf00      	nop
 800c33c:	e7fe      	b.n	800c33c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c33e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d00d      	beq.n	800c366 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c352:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	4613      	mov	r3, r2
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	68b9      	ldr	r1, [r7, #8]
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f000 f83f 	bl	800c3e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c368:	4618      	mov	r0, r3
 800c36a:	3730      	adds	r7, #48	; 0x30
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c370:	b580      	push	{r7, lr}
 800c372:	b08a      	sub	sp, #40	; 0x28
 800c374:	af02      	add	r7, sp, #8
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	4613      	mov	r3, r2
 800c37c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10a      	bne.n	800c39a <xQueueGenericCreate+0x2a>
	__asm volatile
 800c384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c388:	f383 8811 	msr	BASEPRI, r3
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	613b      	str	r3, [r7, #16]
}
 800c396:	bf00      	nop
 800c398:	e7fe      	b.n	800c398 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	fb02 f303 	mul.w	r3, r2, r3
 800c3a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c3a4:	69fb      	ldr	r3, [r7, #28]
 800c3a6:	3348      	adds	r3, #72	; 0x48
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f001 ff4d 	bl	800e248 <pvPortMalloc>
 800c3ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c3b0:	69bb      	ldr	r3, [r7, #24]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d011      	beq.n	800c3da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	3348      	adds	r3, #72	; 0x48
 800c3be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3c8:	79fa      	ldrb	r2, [r7, #7]
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	697a      	ldr	r2, [r7, #20]
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 f805 	bl	800c3e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c3da:	69bb      	ldr	r3, [r7, #24]
	}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3720      	adds	r7, #32
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d103      	bne.n	800c400 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	69ba      	ldr	r2, [r7, #24]
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	e002      	b.n	800c406 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	68fa      	ldr	r2, [r7, #12]
 800c40a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c412:	2101      	movs	r1, #1
 800c414:	69b8      	ldr	r0, [r7, #24]
 800c416:	f7ff fecb 	bl	800c1b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c41a:	bf00      	nop
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
	...

0800c424 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08e      	sub	sp, #56	; 0x38
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c432:	2300      	movs	r3, #0
 800c434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d10a      	bne.n	800c456 <xQueueGenericSend+0x32>
	__asm volatile
 800c440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c444:	f383 8811 	msr	BASEPRI, r3
 800c448:	f3bf 8f6f 	isb	sy
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c452:	bf00      	nop
 800c454:	e7fe      	b.n	800c454 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d103      	bne.n	800c464 <xQueueGenericSend+0x40>
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <xQueueGenericSend+0x44>
 800c464:	2301      	movs	r3, #1
 800c466:	e000      	b.n	800c46a <xQueueGenericSend+0x46>
 800c468:	2300      	movs	r3, #0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10a      	bne.n	800c484 <xQueueGenericSend+0x60>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	2b02      	cmp	r3, #2
 800c488:	d103      	bne.n	800c492 <xQueueGenericSend+0x6e>
 800c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d101      	bne.n	800c496 <xQueueGenericSend+0x72>
 800c492:	2301      	movs	r3, #1
 800c494:	e000      	b.n	800c498 <xQueueGenericSend+0x74>
 800c496:	2300      	movs	r3, #0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d10a      	bne.n	800c4b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800c49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	623b      	str	r3, [r7, #32]
}
 800c4ae:	bf00      	nop
 800c4b0:	e7fe      	b.n	800c4b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4b2:	f001 f987 	bl	800d7c4 <xTaskGetSchedulerState>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <xQueueGenericSend+0x9e>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <xQueueGenericSend+0xa2>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e000      	b.n	800c4c8 <xQueueGenericSend+0xa4>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d10a      	bne.n	800c4e2 <xQueueGenericSend+0xbe>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d0:	f383 8811 	msr	BASEPRI, r3
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	f3bf 8f4f 	dsb	sy
 800c4dc:	61fb      	str	r3, [r7, #28]
}
 800c4de:	bf00      	nop
 800c4e0:	e7fe      	b.n	800c4e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4e2:	f001 fd8f 	bl	800e004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d302      	bcc.n	800c4f8 <xQueueGenericSend+0xd4>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d129      	bne.n	800c54c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c4f8:	683a      	ldr	r2, [r7, #0]
 800c4fa:	68b9      	ldr	r1, [r7, #8]
 800c4fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c4fe:	f000 fa8b 	bl	800ca18 <prvCopyDataToQueue>
 800c502:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d010      	beq.n	800c52e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	3324      	adds	r3, #36	; 0x24
 800c510:	4618      	mov	r0, r3
 800c512:	f000 ff9b 	bl	800d44c <xTaskRemoveFromEventList>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d013      	beq.n	800c544 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c51c:	4b3f      	ldr	r3, [pc, #252]	; (800c61c <xQueueGenericSend+0x1f8>)
 800c51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	f3bf 8f6f 	isb	sy
 800c52c:	e00a      	b.n	800c544 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d007      	beq.n	800c544 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c534:	4b39      	ldr	r3, [pc, #228]	; (800c61c <xQueueGenericSend+0x1f8>)
 800c536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53a:	601a      	str	r2, [r3, #0]
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c544:	f001 fd8e 	bl	800e064 <vPortExitCritical>
				return pdPASS;
 800c548:	2301      	movs	r3, #1
 800c54a:	e063      	b.n	800c614 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d103      	bne.n	800c55a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c552:	f001 fd87 	bl	800e064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c556:	2300      	movs	r3, #0
 800c558:	e05c      	b.n	800c614 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d106      	bne.n	800c56e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c560:	f107 0314 	add.w	r3, r7, #20
 800c564:	4618      	mov	r0, r3
 800c566:	f000 ffd3 	bl	800d510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c56a:	2301      	movs	r3, #1
 800c56c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c56e:	f001 fd79 	bl	800e064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c572:	f000 fd89 	bl	800d088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c576:	f001 fd45 	bl	800e004 <vPortEnterCritical>
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c580:	b25b      	sxtb	r3, r3
 800c582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c586:	d103      	bne.n	800c590 <xQueueGenericSend+0x16c>
 800c588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58a:	2200      	movs	r2, #0
 800c58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c596:	b25b      	sxtb	r3, r3
 800c598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59c:	d103      	bne.n	800c5a6 <xQueueGenericSend+0x182>
 800c59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c5a6:	f001 fd5d 	bl	800e064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5aa:	1d3a      	adds	r2, r7, #4
 800c5ac:	f107 0314 	add.w	r3, r7, #20
 800c5b0:	4611      	mov	r1, r2
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f000 ffc2 	bl	800d53c <xTaskCheckForTimeOut>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d124      	bne.n	800c608 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5c0:	f000 fb22 	bl	800cc08 <prvIsQueueFull>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d018      	beq.n	800c5fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	3310      	adds	r3, #16
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 ff16 	bl	800d404 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c5d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5da:	f000 faad 	bl	800cb38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c5de:	f000 fd61 	bl	800d0a4 <xTaskResumeAll>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f47f af7c 	bne.w	800c4e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c5ea:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <xQueueGenericSend+0x1f8>)
 800c5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	e772      	b.n	800c4e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c5fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5fe:	f000 fa9b 	bl	800cb38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c602:	f000 fd4f 	bl	800d0a4 <xTaskResumeAll>
 800c606:	e76c      	b.n	800c4e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c60a:	f000 fa95 	bl	800cb38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c60e:	f000 fd49 	bl	800d0a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c612:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c614:	4618      	mov	r0, r3
 800c616:	3738      	adds	r7, #56	; 0x38
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	e000ed04 	.word	0xe000ed04

0800c620 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b090      	sub	sp, #64	; 0x40
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
 800c62c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10a      	bne.n	800c64e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63c:	f383 8811 	msr	BASEPRI, r3
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c64a:	bf00      	nop
 800c64c:	e7fe      	b.n	800c64c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d103      	bne.n	800c65c <xQueueGenericSendFromISR+0x3c>
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d101      	bne.n	800c660 <xQueueGenericSendFromISR+0x40>
 800c65c:	2301      	movs	r3, #1
 800c65e:	e000      	b.n	800c662 <xQueueGenericSendFromISR+0x42>
 800c660:	2300      	movs	r3, #0
 800c662:	2b00      	cmp	r3, #0
 800c664:	d10a      	bne.n	800c67c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	f383 8811 	msr	BASEPRI, r3
 800c66e:	f3bf 8f6f 	isb	sy
 800c672:	f3bf 8f4f 	dsb	sy
 800c676:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c678:	bf00      	nop
 800c67a:	e7fe      	b.n	800c67a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d103      	bne.n	800c68a <xQueueGenericSendFromISR+0x6a>
 800c682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c686:	2b01      	cmp	r3, #1
 800c688:	d101      	bne.n	800c68e <xQueueGenericSendFromISR+0x6e>
 800c68a:	2301      	movs	r3, #1
 800c68c:	e000      	b.n	800c690 <xQueueGenericSendFromISR+0x70>
 800c68e:	2300      	movs	r3, #0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d10a      	bne.n	800c6aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	623b      	str	r3, [r7, #32]
}
 800c6a6:	bf00      	nop
 800c6a8:	e7fe      	b.n	800c6a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6aa:	f001 fd8d 	bl	800e1c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c6ae:	f3ef 8211 	mrs	r2, BASEPRI
 800c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	61fa      	str	r2, [r7, #28]
 800c6c4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c6c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c6c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d302      	bcc.n	800c6dc <xQueueGenericSendFromISR+0xbc>
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d12f      	bne.n	800c73c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	68b9      	ldr	r1, [r7, #8]
 800c6f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c6f2:	f000 f991 	bl	800ca18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c6f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6fe:	d112      	bne.n	800c726 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c704:	2b00      	cmp	r3, #0
 800c706:	d016      	beq.n	800c736 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	3324      	adds	r3, #36	; 0x24
 800c70c:	4618      	mov	r0, r3
 800c70e:	f000 fe9d 	bl	800d44c <xTaskRemoveFromEventList>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00e      	beq.n	800c736 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00b      	beq.n	800c736 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2201      	movs	r2, #1
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	e007      	b.n	800c736 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c726:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c72a:	3301      	adds	r3, #1
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	b25a      	sxtb	r2, r3
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c736:	2301      	movs	r3, #1
 800c738:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c73a:	e001      	b.n	800c740 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c73c:	2300      	movs	r3, #0
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c742:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f383 8811 	msr	BASEPRI, r3
}
 800c74a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3740      	adds	r7, #64	; 0x40
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b08c      	sub	sp, #48	; 0x30
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c764:	2300      	movs	r3, #0
 800c766:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10a      	bne.n	800c788 <xQueueReceive+0x30>
	__asm volatile
 800c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	623b      	str	r3, [r7, #32]
}
 800c784:	bf00      	nop
 800c786:	e7fe      	b.n	800c786 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d103      	bne.n	800c796 <xQueueReceive+0x3e>
 800c78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <xQueueReceive+0x42>
 800c796:	2301      	movs	r3, #1
 800c798:	e000      	b.n	800c79c <xQueueReceive+0x44>
 800c79a:	2300      	movs	r3, #0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10a      	bne.n	800c7b6 <xQueueReceive+0x5e>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	61fb      	str	r3, [r7, #28]
}
 800c7b2:	bf00      	nop
 800c7b4:	e7fe      	b.n	800c7b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7b6:	f001 f805 	bl	800d7c4 <xTaskGetSchedulerState>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d102      	bne.n	800c7c6 <xQueueReceive+0x6e>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d101      	bne.n	800c7ca <xQueueReceive+0x72>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e000      	b.n	800c7cc <xQueueReceive+0x74>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d10a      	bne.n	800c7e6 <xQueueReceive+0x8e>
	__asm volatile
 800c7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d4:	f383 8811 	msr	BASEPRI, r3
 800c7d8:	f3bf 8f6f 	isb	sy
 800c7dc:	f3bf 8f4f 	dsb	sy
 800c7e0:	61bb      	str	r3, [r7, #24]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c7e6:	f001 fc0d 	bl	800e004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d01f      	beq.n	800c836 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7f6:	68b9      	ldr	r1, [r7, #8]
 800c7f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7fa:	f000 f977 	bl	800caec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	1e5a      	subs	r2, r3, #1
 800c802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c804:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00f      	beq.n	800c82e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	3310      	adds	r3, #16
 800c812:	4618      	mov	r0, r3
 800c814:	f000 fe1a 	bl	800d44c <xTaskRemoveFromEventList>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d007      	beq.n	800c82e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c81e:	4b3d      	ldr	r3, [pc, #244]	; (800c914 <xQueueReceive+0x1bc>)
 800c820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c82e:	f001 fc19 	bl	800e064 <vPortExitCritical>
				return pdPASS;
 800c832:	2301      	movs	r3, #1
 800c834:	e069      	b.n	800c90a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d103      	bne.n	800c844 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c83c:	f001 fc12 	bl	800e064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c840:	2300      	movs	r3, #0
 800c842:	e062      	b.n	800c90a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d106      	bne.n	800c858 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c84a:	f107 0310 	add.w	r3, r7, #16
 800c84e:	4618      	mov	r0, r3
 800c850:	f000 fe5e 	bl	800d510 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c854:	2301      	movs	r3, #1
 800c856:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c858:	f001 fc04 	bl	800e064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c85c:	f000 fc14 	bl	800d088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c860:	f001 fbd0 	bl	800e004 <vPortEnterCritical>
 800c864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c86a:	b25b      	sxtb	r3, r3
 800c86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c870:	d103      	bne.n	800c87a <xQueueReceive+0x122>
 800c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c880:	b25b      	sxtb	r3, r3
 800c882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c886:	d103      	bne.n	800c890 <xQueueReceive+0x138>
 800c888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c88a:	2200      	movs	r2, #0
 800c88c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c890:	f001 fbe8 	bl	800e064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c894:	1d3a      	adds	r2, r7, #4
 800c896:	f107 0310 	add.w	r3, r7, #16
 800c89a:	4611      	mov	r1, r2
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 fe4d 	bl	800d53c <xTaskCheckForTimeOut>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d123      	bne.n	800c8f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8aa:	f000 f997 	bl	800cbdc <prvIsQueueEmpty>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d017      	beq.n	800c8e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b6:	3324      	adds	r3, #36	; 0x24
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 fda1 	bl	800d404 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c8c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c4:	f000 f938 	bl	800cb38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c8c8:	f000 fbec 	bl	800d0a4 <xTaskResumeAll>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d189      	bne.n	800c7e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c8d2:	4b10      	ldr	r3, [pc, #64]	; (800c914 <xQueueReceive+0x1bc>)
 800c8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d8:	601a      	str	r2, [r3, #0]
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	e780      	b.n	800c7e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c8e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8e6:	f000 f927 	bl	800cb38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8ea:	f000 fbdb 	bl	800d0a4 <xTaskResumeAll>
 800c8ee:	e77a      	b.n	800c7e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8f2:	f000 f921 	bl	800cb38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8f6:	f000 fbd5 	bl	800d0a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8fc:	f000 f96e 	bl	800cbdc <prvIsQueueEmpty>
 800c900:	4603      	mov	r3, r0
 800c902:	2b00      	cmp	r3, #0
 800c904:	f43f af6f 	beq.w	800c7e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c908:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3730      	adds	r7, #48	; 0x30
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	e000ed04 	.word	0xe000ed04

0800c918 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b08e      	sub	sp, #56	; 0x38
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	623b      	str	r3, [r7, #32]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d103      	bne.n	800c952 <xQueueReceiveFromISR+0x3a>
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d101      	bne.n	800c956 <xQueueReceiveFromISR+0x3e>
 800c952:	2301      	movs	r3, #1
 800c954:	e000      	b.n	800c958 <xQueueReceiveFromISR+0x40>
 800c956:	2300      	movs	r3, #0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10a      	bne.n	800c972 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	61fb      	str	r3, [r7, #28]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c972:	f001 fc29 	bl	800e1c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c976:	f3ef 8211 	mrs	r2, BASEPRI
 800c97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c97e:	f383 8811 	msr	BASEPRI, r3
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	f3bf 8f4f 	dsb	sy
 800c98a:	61ba      	str	r2, [r7, #24]
 800c98c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c98e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c990:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c996:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d02f      	beq.n	800c9fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c9ac:	f000 f89e 	bl	800caec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b2:	1e5a      	subs	r2, r3, #1
 800c9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c9b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c0:	d112      	bne.n	800c9e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d016      	beq.n	800c9f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9cc:	3310      	adds	r3, #16
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 fd3c 	bl	800d44c <xTaskRemoveFromEventList>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00e      	beq.n	800c9f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00b      	beq.n	800c9f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	e007      	b.n	800c9f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c9e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	b25a      	sxtb	r2, r3
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c9fc:	e001      	b.n	800ca02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	637b      	str	r3, [r7, #52]	; 0x34
 800ca02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca04:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f383 8811 	msr	BASEPRI, r3
}
 800ca0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3738      	adds	r7, #56	; 0x38
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca24:	2300      	movs	r3, #0
 800ca26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10d      	bne.n	800ca52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d14d      	bne.n	800cada <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	4618      	mov	r0, r3
 800ca44:	f000 fedc 	bl	800d800 <xTaskPriorityDisinherit>
 800ca48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	609a      	str	r2, [r3, #8]
 800ca50:	e043      	b.n	800cada <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d119      	bne.n	800ca8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6858      	ldr	r0, [r3, #4]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca60:	461a      	mov	r2, r3
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	f002 fb56 	bl	800f114 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca70:	441a      	add	r2, r3
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d32b      	bcc.n	800cada <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	605a      	str	r2, [r3, #4]
 800ca8a:	e026      	b.n	800cada <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	68d8      	ldr	r0, [r3, #12]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca94:	461a      	mov	r2, r3
 800ca96:	68b9      	ldr	r1, [r7, #8]
 800ca98:	f002 fb3c 	bl	800f114 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	68da      	ldr	r2, [r3, #12]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caa4:	425b      	negs	r3, r3
 800caa6:	441a      	add	r2, r3
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	68da      	ldr	r2, [r3, #12]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d207      	bcs.n	800cac8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	689a      	ldr	r2, [r3, #8]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac0:	425b      	negs	r3, r3
 800cac2:	441a      	add	r2, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d105      	bne.n	800cada <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	3b01      	subs	r3, #1
 800cad8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	1c5a      	adds	r2, r3, #1
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cae2:	697b      	ldr	r3, [r7, #20]
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3718      	adds	r7, #24
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d018      	beq.n	800cb30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68da      	ldr	r2, [r3, #12]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb06:	441a      	add	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	68da      	ldr	r2, [r3, #12]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d303      	bcc.n	800cb20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	68d9      	ldr	r1, [r3, #12]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb28:	461a      	mov	r2, r3
 800cb2a:	6838      	ldr	r0, [r7, #0]
 800cb2c:	f002 faf2 	bl	800f114 <memcpy>
	}
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb40:	f001 fa60 	bl	800e004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb4c:	e011      	b.n	800cb72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d012      	beq.n	800cb7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	3324      	adds	r3, #36	; 0x24
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f000 fc76 	bl	800d44c <xTaskRemoveFromEventList>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d001      	beq.n	800cb6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb66:	f000 fd4b 	bl	800d600 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	dce9      	bgt.n	800cb4e <prvUnlockQueue+0x16>
 800cb7a:	e000      	b.n	800cb7e <prvUnlockQueue+0x46>
					break;
 800cb7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	22ff      	movs	r2, #255	; 0xff
 800cb82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cb86:	f001 fa6d 	bl	800e064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb8a:	f001 fa3b 	bl	800e004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb96:	e011      	b.n	800cbbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	691b      	ldr	r3, [r3, #16]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d012      	beq.n	800cbc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3310      	adds	r3, #16
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 fc51 	bl	800d44c <xTaskRemoveFromEventList>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cbb0:	f000 fd26 	bl	800d600 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cbb4:	7bbb      	ldrb	r3, [r7, #14]
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	dce9      	bgt.n	800cb98 <prvUnlockQueue+0x60>
 800cbc4:	e000      	b.n	800cbc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cbc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	22ff      	movs	r2, #255	; 0xff
 800cbcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cbd0:	f001 fa48 	bl	800e064 <vPortExitCritical>
}
 800cbd4:	bf00      	nop
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbe4:	f001 fa0e 	bl	800e004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d102      	bne.n	800cbf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	60fb      	str	r3, [r7, #12]
 800cbf4:	e001      	b.n	800cbfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbfa:	f001 fa33 	bl	800e064 <vPortExitCritical>

	return xReturn;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc10:	f001 f9f8 	bl	800e004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d102      	bne.n	800cc26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc20:	2301      	movs	r3, #1
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	e001      	b.n	800cc2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc2a:	f001 fa1b 	bl	800e064 <vPortExitCritical>

	return xReturn;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08e      	sub	sp, #56	; 0x38
 800cc3c:	af04      	add	r7, sp, #16
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	623b      	str	r3, [r7, #32]
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10a      	bne.n	800cc7e <xTaskCreateStatic+0x46>
	__asm volatile
 800cc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	61fb      	str	r3, [r7, #28]
}
 800cc7a:	bf00      	nop
 800cc7c:	e7fe      	b.n	800cc7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc7e:	2354      	movs	r3, #84	; 0x54
 800cc80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2b54      	cmp	r3, #84	; 0x54
 800cc86:	d00a      	beq.n	800cc9e <xTaskCreateStatic+0x66>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	61bb      	str	r3, [r7, #24]
}
 800cc9a:	bf00      	nop
 800cc9c:	e7fe      	b.n	800cc9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d01e      	beq.n	800cce4 <xTaskCreateStatic+0xac>
 800cca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01b      	beq.n	800cce4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ccb4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	2202      	movs	r2, #2
 800ccba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	9303      	str	r3, [sp, #12]
 800ccc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc4:	9302      	str	r3, [sp, #8]
 800ccc6:	f107 0314 	add.w	r3, r7, #20
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	68b9      	ldr	r1, [r7, #8]
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	f000 f850 	bl	800cd7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccde:	f000 f8d5 	bl	800ce8c <prvAddNewTaskToReadyList>
 800cce2:	e001      	b.n	800cce8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cce4:	2300      	movs	r3, #0
 800cce6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cce8:	697b      	ldr	r3, [r7, #20]
	}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3728      	adds	r7, #40	; 0x28
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ccf2:	b580      	push	{r7, lr}
 800ccf4:	b08c      	sub	sp, #48	; 0x30
 800ccf6:	af04      	add	r7, sp, #16
 800ccf8:	60f8      	str	r0, [r7, #12]
 800ccfa:	60b9      	str	r1, [r7, #8]
 800ccfc:	603b      	str	r3, [r7, #0]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd02:	88fb      	ldrh	r3, [r7, #6]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4618      	mov	r0, r3
 800cd08:	f001 fa9e 	bl	800e248 <pvPortMalloc>
 800cd0c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00e      	beq.n	800cd32 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd14:	2054      	movs	r0, #84	; 0x54
 800cd16:	f001 fa97 	bl	800e248 <pvPortMalloc>
 800cd1a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d003      	beq.n	800cd2a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	697a      	ldr	r2, [r7, #20]
 800cd26:	631a      	str	r2, [r3, #48]	; 0x30
 800cd28:	e005      	b.n	800cd36 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd2a:	6978      	ldr	r0, [r7, #20]
 800cd2c:	f001 fb58 	bl	800e3e0 <vPortFree>
 800cd30:	e001      	b.n	800cd36 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd36:	69fb      	ldr	r3, [r7, #28]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d017      	beq.n	800cd6c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd44:	88fa      	ldrh	r2, [r7, #6]
 800cd46:	2300      	movs	r3, #0
 800cd48:	9303      	str	r3, [sp, #12]
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	9302      	str	r3, [sp, #8]
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd54:	9300      	str	r3, [sp, #0]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	68b9      	ldr	r1, [r7, #8]
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	f000 f80e 	bl	800cd7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd60:	69f8      	ldr	r0, [r7, #28]
 800cd62:	f000 f893 	bl	800ce8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd66:	2301      	movs	r3, #1
 800cd68:	61bb      	str	r3, [r7, #24]
 800cd6a:	e002      	b.n	800cd72 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd6c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd70:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd72:	69bb      	ldr	r3, [r7, #24]
	}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3720      	adds	r7, #32
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
 800cd88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd94:	3b01      	subs	r3, #1
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	f023 0307 	bic.w	r3, r3, #7
 800cda2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	f003 0307 	and.w	r3, r3, #7
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	617b      	str	r3, [r7, #20]
}
 800cdc0:	bf00      	nop
 800cdc2:	e7fe      	b.n	800cdc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d01f      	beq.n	800ce0a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdca:	2300      	movs	r3, #0
 800cdcc:	61fb      	str	r3, [r7, #28]
 800cdce:	e012      	b.n	800cdf6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	7819      	ldrb	r1, [r3, #0]
 800cdd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	4413      	add	r3, r2
 800cdde:	3334      	adds	r3, #52	; 0x34
 800cde0:	460a      	mov	r2, r1
 800cde2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cde4:	68ba      	ldr	r2, [r7, #8]
 800cde6:	69fb      	ldr	r3, [r7, #28]
 800cde8:	4413      	add	r3, r2
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d006      	beq.n	800cdfe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	61fb      	str	r3, [r7, #28]
 800cdf6:	69fb      	ldr	r3, [r7, #28]
 800cdf8:	2b0f      	cmp	r3, #15
 800cdfa:	d9e9      	bls.n	800cdd0 <prvInitialiseNewTask+0x54>
 800cdfc:	e000      	b.n	800ce00 <prvInitialiseNewTask+0x84>
			{
				break;
 800cdfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ce08:	e003      	b.n	800ce12 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce14:	2b06      	cmp	r3, #6
 800ce16:	d901      	bls.n	800ce1c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce18:	2306      	movs	r3, #6
 800ce1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce26:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	3304      	adds	r3, #4
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff f927 	bl	800c086 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	3318      	adds	r3, #24
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7ff f922 	bl	800c086 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce4a:	f1c3 0207 	rsb	r2, r3, #7
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce60:	2200      	movs	r2, #0
 800ce62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce66:	683a      	ldr	r2, [r7, #0]
 800ce68:	68f9      	ldr	r1, [r7, #12]
 800ce6a:	69b8      	ldr	r0, [r7, #24]
 800ce6c:	f000 ff9e 	bl	800ddac <pxPortInitialiseStack>
 800ce70:	4602      	mov	r2, r0
 800ce72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d002      	beq.n	800ce82 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce82:	bf00      	nop
 800ce84:	3720      	adds	r7, #32
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
	...

0800ce8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce94:	f001 f8b6 	bl	800e004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce98:	4b2a      	ldr	r3, [pc, #168]	; (800cf44 <prvAddNewTaskToReadyList+0xb8>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	4a29      	ldr	r2, [pc, #164]	; (800cf44 <prvAddNewTaskToReadyList+0xb8>)
 800cea0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cea2:	4b29      	ldr	r3, [pc, #164]	; (800cf48 <prvAddNewTaskToReadyList+0xbc>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d109      	bne.n	800cebe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ceaa:	4a27      	ldr	r2, [pc, #156]	; (800cf48 <prvAddNewTaskToReadyList+0xbc>)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ceb0:	4b24      	ldr	r3, [pc, #144]	; (800cf44 <prvAddNewTaskToReadyList+0xb8>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d110      	bne.n	800ceda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ceb8:	f000 fbc6 	bl	800d648 <prvInitialiseTaskLists>
 800cebc:	e00d      	b.n	800ceda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cebe:	4b23      	ldr	r3, [pc, #140]	; (800cf4c <prvAddNewTaskToReadyList+0xc0>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d109      	bne.n	800ceda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cec6:	4b20      	ldr	r3, [pc, #128]	; (800cf48 <prvAddNewTaskToReadyList+0xbc>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d802      	bhi.n	800ceda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ced4:	4a1c      	ldr	r2, [pc, #112]	; (800cf48 <prvAddNewTaskToReadyList+0xbc>)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ceda:	4b1d      	ldr	r3, [pc, #116]	; (800cf50 <prvAddNewTaskToReadyList+0xc4>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	3301      	adds	r3, #1
 800cee0:	4a1b      	ldr	r2, [pc, #108]	; (800cf50 <prvAddNewTaskToReadyList+0xc4>)
 800cee2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee8:	2201      	movs	r2, #1
 800ceea:	409a      	lsls	r2, r3
 800ceec:	4b19      	ldr	r3, [pc, #100]	; (800cf54 <prvAddNewTaskToReadyList+0xc8>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	4a18      	ldr	r2, [pc, #96]	; (800cf54 <prvAddNewTaskToReadyList+0xc8>)
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cefa:	4613      	mov	r3, r2
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	4413      	add	r3, r2
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4a15      	ldr	r2, [pc, #84]	; (800cf58 <prvAddNewTaskToReadyList+0xcc>)
 800cf04:	441a      	add	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	3304      	adds	r3, #4
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4610      	mov	r0, r2
 800cf0e:	f7ff f8c7 	bl	800c0a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf12:	f001 f8a7 	bl	800e064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf16:	4b0d      	ldr	r3, [pc, #52]	; (800cf4c <prvAddNewTaskToReadyList+0xc0>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00e      	beq.n	800cf3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf1e:	4b0a      	ldr	r3, [pc, #40]	; (800cf48 <prvAddNewTaskToReadyList+0xbc>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d207      	bcs.n	800cf3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf2c:	4b0b      	ldr	r3, [pc, #44]	; (800cf5c <prvAddNewTaskToReadyList+0xd0>)
 800cf2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf3c:	bf00      	nop
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	2000100c 	.word	0x2000100c
 800cf48:	20000f0c 	.word	0x20000f0c
 800cf4c:	20001018 	.word	0x20001018
 800cf50:	20001028 	.word	0x20001028
 800cf54:	20001014 	.word	0x20001014
 800cf58:	20000f10 	.word	0x20000f10
 800cf5c:	e000ed04 	.word	0xe000ed04

0800cf60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d017      	beq.n	800cfa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf72:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <vTaskDelay+0x60>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d00a      	beq.n	800cf90 <vTaskDelay+0x30>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	60bb      	str	r3, [r7, #8]
}
 800cf8c:	bf00      	nop
 800cf8e:	e7fe      	b.n	800cf8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf90:	f000 f87a 	bl	800d088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf94:	2100      	movs	r1, #0
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fea2 	bl	800dce0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf9c:	f000 f882 	bl	800d0a4 <xTaskResumeAll>
 800cfa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d107      	bne.n	800cfb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cfa8:	4b06      	ldr	r3, [pc, #24]	; (800cfc4 <vTaskDelay+0x64>)
 800cfaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfae:	601a      	str	r2, [r3, #0]
 800cfb0:	f3bf 8f4f 	dsb	sy
 800cfb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfb8:	bf00      	nop
 800cfba:	3710      	adds	r7, #16
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	20001034 	.word	0x20001034
 800cfc4:	e000ed04 	.word	0xe000ed04

0800cfc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08a      	sub	sp, #40	; 0x28
 800cfcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfd6:	463a      	mov	r2, r7
 800cfd8:	1d39      	adds	r1, r7, #4
 800cfda:	f107 0308 	add.w	r3, r7, #8
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7f3 fefa 	bl	8000dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfe4:	6839      	ldr	r1, [r7, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	9202      	str	r2, [sp, #8]
 800cfec:	9301      	str	r3, [sp, #4]
 800cfee:	2300      	movs	r3, #0
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	2300      	movs	r3, #0
 800cff4:	460a      	mov	r2, r1
 800cff6:	491e      	ldr	r1, [pc, #120]	; (800d070 <vTaskStartScheduler+0xa8>)
 800cff8:	481e      	ldr	r0, [pc, #120]	; (800d074 <vTaskStartScheduler+0xac>)
 800cffa:	f7ff fe1d 	bl	800cc38 <xTaskCreateStatic>
 800cffe:	4603      	mov	r3, r0
 800d000:	4a1d      	ldr	r2, [pc, #116]	; (800d078 <vTaskStartScheduler+0xb0>)
 800d002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d004:	4b1c      	ldr	r3, [pc, #112]	; (800d078 <vTaskStartScheduler+0xb0>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d00c:	2301      	movs	r3, #1
 800d00e:	617b      	str	r3, [r7, #20]
 800d010:	e001      	b.n	800d016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d012:	2300      	movs	r3, #0
 800d014:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d116      	bne.n	800d04a <vTaskStartScheduler+0x82>
	__asm volatile
 800d01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d020:	f383 8811 	msr	BASEPRI, r3
 800d024:	f3bf 8f6f 	isb	sy
 800d028:	f3bf 8f4f 	dsb	sy
 800d02c:	613b      	str	r3, [r7, #16]
}
 800d02e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d030:	4b12      	ldr	r3, [pc, #72]	; (800d07c <vTaskStartScheduler+0xb4>)
 800d032:	f04f 32ff 	mov.w	r2, #4294967295
 800d036:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d038:	4b11      	ldr	r3, [pc, #68]	; (800d080 <vTaskStartScheduler+0xb8>)
 800d03a:	2201      	movs	r2, #1
 800d03c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d03e:	4b11      	ldr	r3, [pc, #68]	; (800d084 <vTaskStartScheduler+0xbc>)
 800d040:	2200      	movs	r2, #0
 800d042:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d044:	f000 ff3c 	bl	800dec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d048:	e00e      	b.n	800d068 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d050:	d10a      	bne.n	800d068 <vTaskStartScheduler+0xa0>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	60fb      	str	r3, [r7, #12]
}
 800d064:	bf00      	nop
 800d066:	e7fe      	b.n	800d066 <vTaskStartScheduler+0x9e>
}
 800d068:	bf00      	nop
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	0800faa4 	.word	0x0800faa4
 800d074:	0800d619 	.word	0x0800d619
 800d078:	20001030 	.word	0x20001030
 800d07c:	2000102c 	.word	0x2000102c
 800d080:	20001018 	.word	0x20001018
 800d084:	20001010 	.word	0x20001010

0800d088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d088:	b480      	push	{r7}
 800d08a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d08c:	4b04      	ldr	r3, [pc, #16]	; (800d0a0 <vTaskSuspendAll+0x18>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	3301      	adds	r3, #1
 800d092:	4a03      	ldr	r2, [pc, #12]	; (800d0a0 <vTaskSuspendAll+0x18>)
 800d094:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d096:	bf00      	nop
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr
 800d0a0:	20001034 	.word	0x20001034

0800d0a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0b2:	4b41      	ldr	r3, [pc, #260]	; (800d1b8 <xTaskResumeAll+0x114>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d10a      	bne.n	800d0d0 <xTaskResumeAll+0x2c>
	__asm volatile
 800d0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0be:	f383 8811 	msr	BASEPRI, r3
 800d0c2:	f3bf 8f6f 	isb	sy
 800d0c6:	f3bf 8f4f 	dsb	sy
 800d0ca:	603b      	str	r3, [r7, #0]
}
 800d0cc:	bf00      	nop
 800d0ce:	e7fe      	b.n	800d0ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0d0:	f000 ff98 	bl	800e004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0d4:	4b38      	ldr	r3, [pc, #224]	; (800d1b8 <xTaskResumeAll+0x114>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	4a37      	ldr	r2, [pc, #220]	; (800d1b8 <xTaskResumeAll+0x114>)
 800d0dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0de:	4b36      	ldr	r3, [pc, #216]	; (800d1b8 <xTaskResumeAll+0x114>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d161      	bne.n	800d1aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0e6:	4b35      	ldr	r3, [pc, #212]	; (800d1bc <xTaskResumeAll+0x118>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d05d      	beq.n	800d1aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0ee:	e02e      	b.n	800d14e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0f0:	4b33      	ldr	r3, [pc, #204]	; (800d1c0 <xTaskResumeAll+0x11c>)
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7ff f82c 	bl	800c15a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3304      	adds	r3, #4
 800d106:	4618      	mov	r0, r3
 800d108:	f7ff f827 	bl	800c15a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d110:	2201      	movs	r2, #1
 800d112:	409a      	lsls	r2, r3
 800d114:	4b2b      	ldr	r3, [pc, #172]	; (800d1c4 <xTaskResumeAll+0x120>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4313      	orrs	r3, r2
 800d11a:	4a2a      	ldr	r2, [pc, #168]	; (800d1c4 <xTaskResumeAll+0x120>)
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d122:	4613      	mov	r3, r2
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	4413      	add	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	4a27      	ldr	r2, [pc, #156]	; (800d1c8 <xTaskResumeAll+0x124>)
 800d12c:	441a      	add	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	3304      	adds	r3, #4
 800d132:	4619      	mov	r1, r3
 800d134:	4610      	mov	r0, r2
 800d136:	f7fe ffb3 	bl	800c0a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d13e:	4b23      	ldr	r3, [pc, #140]	; (800d1cc <xTaskResumeAll+0x128>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d144:	429a      	cmp	r2, r3
 800d146:	d302      	bcc.n	800d14e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d148:	4b21      	ldr	r3, [pc, #132]	; (800d1d0 <xTaskResumeAll+0x12c>)
 800d14a:	2201      	movs	r2, #1
 800d14c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d14e:	4b1c      	ldr	r3, [pc, #112]	; (800d1c0 <xTaskResumeAll+0x11c>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1cc      	bne.n	800d0f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d001      	beq.n	800d160 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d15c:	f000 fb12 	bl	800d784 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d160:	4b1c      	ldr	r3, [pc, #112]	; (800d1d4 <xTaskResumeAll+0x130>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d010      	beq.n	800d18e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d16c:	f000 f836 	bl	800d1dc <xTaskIncrementTick>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d002      	beq.n	800d17c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d176:	4b16      	ldr	r3, [pc, #88]	; (800d1d0 <xTaskResumeAll+0x12c>)
 800d178:	2201      	movs	r2, #1
 800d17a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3b01      	subs	r3, #1
 800d180:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1f1      	bne.n	800d16c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d188:	4b12      	ldr	r3, [pc, #72]	; (800d1d4 <xTaskResumeAll+0x130>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d18e:	4b10      	ldr	r3, [pc, #64]	; (800d1d0 <xTaskResumeAll+0x12c>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d009      	beq.n	800d1aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d196:	2301      	movs	r3, #1
 800d198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d19a:	4b0f      	ldr	r3, [pc, #60]	; (800d1d8 <xTaskResumeAll+0x134>)
 800d19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a0:	601a      	str	r2, [r3, #0]
 800d1a2:	f3bf 8f4f 	dsb	sy
 800d1a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1aa:	f000 ff5b 	bl	800e064 <vPortExitCritical>

	return xAlreadyYielded;
 800d1ae:	68bb      	ldr	r3, [r7, #8]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3710      	adds	r7, #16
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}
 800d1b8:	20001034 	.word	0x20001034
 800d1bc:	2000100c 	.word	0x2000100c
 800d1c0:	20000fcc 	.word	0x20000fcc
 800d1c4:	20001014 	.word	0x20001014
 800d1c8:	20000f10 	.word	0x20000f10
 800d1cc:	20000f0c 	.word	0x20000f0c
 800d1d0:	20001020 	.word	0x20001020
 800d1d4:	2000101c 	.word	0x2000101c
 800d1d8:	e000ed04 	.word	0xe000ed04

0800d1dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1e6:	4b4e      	ldr	r3, [pc, #312]	; (800d320 <xTaskIncrementTick+0x144>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f040 808e 	bne.w	800d30c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1f0:	4b4c      	ldr	r3, [pc, #304]	; (800d324 <xTaskIncrementTick+0x148>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1f8:	4a4a      	ldr	r2, [pc, #296]	; (800d324 <xTaskIncrementTick+0x148>)
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d120      	bne.n	800d246 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d204:	4b48      	ldr	r3, [pc, #288]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00a      	beq.n	800d224 <xTaskIncrementTick+0x48>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	603b      	str	r3, [r7, #0]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <xTaskIncrementTick+0x46>
 800d224:	4b40      	ldr	r3, [pc, #256]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	60fb      	str	r3, [r7, #12]
 800d22a:	4b40      	ldr	r3, [pc, #256]	; (800d32c <xTaskIncrementTick+0x150>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a3e      	ldr	r2, [pc, #248]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	4a3e      	ldr	r2, [pc, #248]	; (800d32c <xTaskIncrementTick+0x150>)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6013      	str	r3, [r2, #0]
 800d238:	4b3d      	ldr	r3, [pc, #244]	; (800d330 <xTaskIncrementTick+0x154>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3301      	adds	r3, #1
 800d23e:	4a3c      	ldr	r2, [pc, #240]	; (800d330 <xTaskIncrementTick+0x154>)
 800d240:	6013      	str	r3, [r2, #0]
 800d242:	f000 fa9f 	bl	800d784 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d246:	4b3b      	ldr	r3, [pc, #236]	; (800d334 <xTaskIncrementTick+0x158>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	693a      	ldr	r2, [r7, #16]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d348      	bcc.n	800d2e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d250:	4b35      	ldr	r3, [pc, #212]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d104      	bne.n	800d264 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d25a:	4b36      	ldr	r3, [pc, #216]	; (800d334 <xTaskIncrementTick+0x158>)
 800d25c:	f04f 32ff 	mov.w	r2, #4294967295
 800d260:	601a      	str	r2, [r3, #0]
					break;
 800d262:	e03e      	b.n	800d2e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d264:	4b30      	ldr	r3, [pc, #192]	; (800d328 <xTaskIncrementTick+0x14c>)
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d203      	bcs.n	800d284 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d27c:	4a2d      	ldr	r2, [pc, #180]	; (800d334 <xTaskIncrementTick+0x158>)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d282:	e02e      	b.n	800d2e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	3304      	adds	r3, #4
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe ff66 	bl	800c15a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d292:	2b00      	cmp	r3, #0
 800d294:	d004      	beq.n	800d2a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	3318      	adds	r3, #24
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fe ff5d 	bl	800c15a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	409a      	lsls	r2, r3
 800d2a8:	4b23      	ldr	r3, [pc, #140]	; (800d338 <xTaskIncrementTick+0x15c>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	4a22      	ldr	r2, [pc, #136]	; (800d338 <xTaskIncrementTick+0x15c>)
 800d2b0:	6013      	str	r3, [r2, #0]
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4413      	add	r3, r2
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	4a1f      	ldr	r2, [pc, #124]	; (800d33c <xTaskIncrementTick+0x160>)
 800d2c0:	441a      	add	r2, r3
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	3304      	adds	r3, #4
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	f7fe fee9 	bl	800c0a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d2:	4b1b      	ldr	r3, [pc, #108]	; (800d340 <xTaskIncrementTick+0x164>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d3b9      	bcc.n	800d250 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2e0:	e7b6      	b.n	800d250 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2e2:	4b17      	ldr	r3, [pc, #92]	; (800d340 <xTaskIncrementTick+0x164>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e8:	4914      	ldr	r1, [pc, #80]	; (800d33c <xTaskIncrementTick+0x160>)
 800d2ea:	4613      	mov	r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	4413      	add	r3, r2
 800d2f0:	009b      	lsls	r3, r3, #2
 800d2f2:	440b      	add	r3, r1
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d901      	bls.n	800d2fe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d2fe:	4b11      	ldr	r3, [pc, #68]	; (800d344 <xTaskIncrementTick+0x168>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d007      	beq.n	800d316 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d306:	2301      	movs	r3, #1
 800d308:	617b      	str	r3, [r7, #20]
 800d30a:	e004      	b.n	800d316 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d30c:	4b0e      	ldr	r3, [pc, #56]	; (800d348 <xTaskIncrementTick+0x16c>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	3301      	adds	r3, #1
 800d312:	4a0d      	ldr	r2, [pc, #52]	; (800d348 <xTaskIncrementTick+0x16c>)
 800d314:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d316:	697b      	ldr	r3, [r7, #20]
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3718      	adds	r7, #24
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	20001034 	.word	0x20001034
 800d324:	20001010 	.word	0x20001010
 800d328:	20000fc4 	.word	0x20000fc4
 800d32c:	20000fc8 	.word	0x20000fc8
 800d330:	20001024 	.word	0x20001024
 800d334:	2000102c 	.word	0x2000102c
 800d338:	20001014 	.word	0x20001014
 800d33c:	20000f10 	.word	0x20000f10
 800d340:	20000f0c 	.word	0x20000f0c
 800d344:	20001020 	.word	0x20001020
 800d348:	2000101c 	.word	0x2000101c

0800d34c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d34c:	b480      	push	{r7}
 800d34e:	b087      	sub	sp, #28
 800d350:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d352:	4b27      	ldr	r3, [pc, #156]	; (800d3f0 <vTaskSwitchContext+0xa4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d003      	beq.n	800d362 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d35a:	4b26      	ldr	r3, [pc, #152]	; (800d3f4 <vTaskSwitchContext+0xa8>)
 800d35c:	2201      	movs	r2, #1
 800d35e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d360:	e03f      	b.n	800d3e2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d362:	4b24      	ldr	r3, [pc, #144]	; (800d3f4 <vTaskSwitchContext+0xa8>)
 800d364:	2200      	movs	r2, #0
 800d366:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d368:	4b23      	ldr	r3, [pc, #140]	; (800d3f8 <vTaskSwitchContext+0xac>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	fab3 f383 	clz	r3, r3
 800d374:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d376:	7afb      	ldrb	r3, [r7, #11]
 800d378:	f1c3 031f 	rsb	r3, r3, #31
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	491f      	ldr	r1, [pc, #124]	; (800d3fc <vTaskSwitchContext+0xb0>)
 800d380:	697a      	ldr	r2, [r7, #20]
 800d382:	4613      	mov	r3, r2
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	440b      	add	r3, r1
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	607b      	str	r3, [r7, #4]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <vTaskSwitchContext+0x5a>
 800d3a8:	697a      	ldr	r2, [r7, #20]
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	009b      	lsls	r3, r3, #2
 800d3ae:	4413      	add	r3, r2
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	4a12      	ldr	r2, [pc, #72]	; (800d3fc <vTaskSwitchContext+0xb0>)
 800d3b4:	4413      	add	r3, r2
 800d3b6:	613b      	str	r3, [r7, #16]
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	605a      	str	r2, [r3, #4]
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	685a      	ldr	r2, [r3, #4]
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	3308      	adds	r3, #8
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d104      	bne.n	800d3d8 <vTaskSwitchContext+0x8c>
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	605a      	str	r2, [r3, #4]
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	4a08      	ldr	r2, [pc, #32]	; (800d400 <vTaskSwitchContext+0xb4>)
 800d3e0:	6013      	str	r3, [r2, #0]
}
 800d3e2:	bf00      	nop
 800d3e4:	371c      	adds	r7, #28
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	20001034 	.word	0x20001034
 800d3f4:	20001020 	.word	0x20001020
 800d3f8:	20001014 	.word	0x20001014
 800d3fc:	20000f10 	.word	0x20000f10
 800d400:	20000f0c 	.word	0x20000f0c

0800d404 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d10a      	bne.n	800d42a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d418:	f383 8811 	msr	BASEPRI, r3
 800d41c:	f3bf 8f6f 	isb	sy
 800d420:	f3bf 8f4f 	dsb	sy
 800d424:	60fb      	str	r3, [r7, #12]
}
 800d426:	bf00      	nop
 800d428:	e7fe      	b.n	800d428 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d42a:	4b07      	ldr	r3, [pc, #28]	; (800d448 <vTaskPlaceOnEventList+0x44>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3318      	adds	r3, #24
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7fe fe58 	bl	800c0e8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d438:	2101      	movs	r1, #1
 800d43a:	6838      	ldr	r0, [r7, #0]
 800d43c:	f000 fc50 	bl	800dce0 <prvAddCurrentTaskToDelayedList>
}
 800d440:	bf00      	nop
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20000f0c 	.word	0x20000f0c

0800d44c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d10a      	bne.n	800d478 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	60fb      	str	r3, [r7, #12]
}
 800d474:	bf00      	nop
 800d476:	e7fe      	b.n	800d476 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	3318      	adds	r3, #24
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fe fe6c 	bl	800c15a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d482:	4b1d      	ldr	r3, [pc, #116]	; (800d4f8 <xTaskRemoveFromEventList+0xac>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d11c      	bne.n	800d4c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	3304      	adds	r3, #4
 800d48e:	4618      	mov	r0, r3
 800d490:	f7fe fe63 	bl	800c15a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d494:	693b      	ldr	r3, [r7, #16]
 800d496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d498:	2201      	movs	r2, #1
 800d49a:	409a      	lsls	r2, r3
 800d49c:	4b17      	ldr	r3, [pc, #92]	; (800d4fc <xTaskRemoveFromEventList+0xb0>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4313      	orrs	r3, r2
 800d4a2:	4a16      	ldr	r2, [pc, #88]	; (800d4fc <xTaskRemoveFromEventList+0xb0>)
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	4413      	add	r3, r2
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	4a13      	ldr	r2, [pc, #76]	; (800d500 <xTaskRemoveFromEventList+0xb4>)
 800d4b4:	441a      	add	r2, r3
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	4610      	mov	r0, r2
 800d4be:	f7fe fdef 	bl	800c0a0 <vListInsertEnd>
 800d4c2:	e005      	b.n	800d4d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	3318      	adds	r3, #24
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	480e      	ldr	r0, [pc, #56]	; (800d504 <xTaskRemoveFromEventList+0xb8>)
 800d4cc:	f7fe fde8 	bl	800c0a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d4:	4b0c      	ldr	r3, [pc, #48]	; (800d508 <xTaskRemoveFromEventList+0xbc>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d905      	bls.n	800d4ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d4e2:	4b0a      	ldr	r3, [pc, #40]	; (800d50c <xTaskRemoveFromEventList+0xc0>)
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	601a      	str	r2, [r3, #0]
 800d4e8:	e001      	b.n	800d4ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d4ee:	697b      	ldr	r3, [r7, #20]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	20001034 	.word	0x20001034
 800d4fc:	20001014 	.word	0x20001014
 800d500:	20000f10 	.word	0x20000f10
 800d504:	20000fcc 	.word	0x20000fcc
 800d508:	20000f0c 	.word	0x20000f0c
 800d50c:	20001020 	.word	0x20001020

0800d510 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d518:	4b06      	ldr	r3, [pc, #24]	; (800d534 <vTaskInternalSetTimeOutState+0x24>)
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d520:	4b05      	ldr	r3, [pc, #20]	; (800d538 <vTaskInternalSetTimeOutState+0x28>)
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	605a      	str	r2, [r3, #4]
}
 800d528:	bf00      	nop
 800d52a:	370c      	adds	r7, #12
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	20001024 	.word	0x20001024
 800d538:	20001010 	.word	0x20001010

0800d53c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b088      	sub	sp, #32
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d550:	f383 8811 	msr	BASEPRI, r3
 800d554:	f3bf 8f6f 	isb	sy
 800d558:	f3bf 8f4f 	dsb	sy
 800d55c:	613b      	str	r3, [r7, #16]
}
 800d55e:	bf00      	nop
 800d560:	e7fe      	b.n	800d560 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d10a      	bne.n	800d57e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56c:	f383 8811 	msr	BASEPRI, r3
 800d570:	f3bf 8f6f 	isb	sy
 800d574:	f3bf 8f4f 	dsb	sy
 800d578:	60fb      	str	r3, [r7, #12]
}
 800d57a:	bf00      	nop
 800d57c:	e7fe      	b.n	800d57c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d57e:	f000 fd41 	bl	800e004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d582:	4b1d      	ldr	r3, [pc, #116]	; (800d5f8 <xTaskCheckForTimeOut+0xbc>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59a:	d102      	bne.n	800d5a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d59c:	2300      	movs	r3, #0
 800d59e:	61fb      	str	r3, [r7, #28]
 800d5a0:	e023      	b.n	800d5ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	4b15      	ldr	r3, [pc, #84]	; (800d5fc <xTaskCheckForTimeOut+0xc0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d007      	beq.n	800d5be <xTaskCheckForTimeOut+0x82>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	69ba      	ldr	r2, [r7, #24]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d302      	bcc.n	800d5be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	61fb      	str	r3, [r7, #28]
 800d5bc:	e015      	b.n	800d5ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	697a      	ldr	r2, [r7, #20]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d20b      	bcs.n	800d5e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	1ad2      	subs	r2, r2, r3
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f7ff ff9b 	bl	800d510 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	61fb      	str	r3, [r7, #28]
 800d5de:	e004      	b.n	800d5ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d5ea:	f000 fd3b 	bl	800e064 <vPortExitCritical>

	return xReturn;
 800d5ee:	69fb      	ldr	r3, [r7, #28]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3720      	adds	r7, #32
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	20001010 	.word	0x20001010
 800d5fc:	20001024 	.word	0x20001024

0800d600 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d600:	b480      	push	{r7}
 800d602:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d604:	4b03      	ldr	r3, [pc, #12]	; (800d614 <vTaskMissedYield+0x14>)
 800d606:	2201      	movs	r2, #1
 800d608:	601a      	str	r2, [r3, #0]
}
 800d60a:	bf00      	nop
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr
 800d614:	20001020 	.word	0x20001020

0800d618 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d620:	f000 f852 	bl	800d6c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d624:	4b06      	ldr	r3, [pc, #24]	; (800d640 <prvIdleTask+0x28>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d9f9      	bls.n	800d620 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <prvIdleTask+0x2c>)
 800d62e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d63c:	e7f0      	b.n	800d620 <prvIdleTask+0x8>
 800d63e:	bf00      	nop
 800d640:	20000f10 	.word	0x20000f10
 800d644:	e000ed04 	.word	0xe000ed04

0800d648 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d64e:	2300      	movs	r3, #0
 800d650:	607b      	str	r3, [r7, #4]
 800d652:	e00c      	b.n	800d66e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	4613      	mov	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4413      	add	r3, r2
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	4a12      	ldr	r2, [pc, #72]	; (800d6a8 <prvInitialiseTaskLists+0x60>)
 800d660:	4413      	add	r3, r2
 800d662:	4618      	mov	r0, r3
 800d664:	f7fe fcef 	bl	800c046 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	3301      	adds	r3, #1
 800d66c:	607b      	str	r3, [r7, #4]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b06      	cmp	r3, #6
 800d672:	d9ef      	bls.n	800d654 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d674:	480d      	ldr	r0, [pc, #52]	; (800d6ac <prvInitialiseTaskLists+0x64>)
 800d676:	f7fe fce6 	bl	800c046 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d67a:	480d      	ldr	r0, [pc, #52]	; (800d6b0 <prvInitialiseTaskLists+0x68>)
 800d67c:	f7fe fce3 	bl	800c046 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d680:	480c      	ldr	r0, [pc, #48]	; (800d6b4 <prvInitialiseTaskLists+0x6c>)
 800d682:	f7fe fce0 	bl	800c046 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d686:	480c      	ldr	r0, [pc, #48]	; (800d6b8 <prvInitialiseTaskLists+0x70>)
 800d688:	f7fe fcdd 	bl	800c046 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d68c:	480b      	ldr	r0, [pc, #44]	; (800d6bc <prvInitialiseTaskLists+0x74>)
 800d68e:	f7fe fcda 	bl	800c046 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d692:	4b0b      	ldr	r3, [pc, #44]	; (800d6c0 <prvInitialiseTaskLists+0x78>)
 800d694:	4a05      	ldr	r2, [pc, #20]	; (800d6ac <prvInitialiseTaskLists+0x64>)
 800d696:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d698:	4b0a      	ldr	r3, [pc, #40]	; (800d6c4 <prvInitialiseTaskLists+0x7c>)
 800d69a:	4a05      	ldr	r2, [pc, #20]	; (800d6b0 <prvInitialiseTaskLists+0x68>)
 800d69c:	601a      	str	r2, [r3, #0]
}
 800d69e:	bf00      	nop
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	20000f10 	.word	0x20000f10
 800d6ac:	20000f9c 	.word	0x20000f9c
 800d6b0:	20000fb0 	.word	0x20000fb0
 800d6b4:	20000fcc 	.word	0x20000fcc
 800d6b8:	20000fe0 	.word	0x20000fe0
 800d6bc:	20000ff8 	.word	0x20000ff8
 800d6c0:	20000fc4 	.word	0x20000fc4
 800d6c4:	20000fc8 	.word	0x20000fc8

0800d6c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6ce:	e019      	b.n	800d704 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d6d0:	f000 fc98 	bl	800e004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6d4:	4b10      	ldr	r3, [pc, #64]	; (800d718 <prvCheckTasksWaitingTermination+0x50>)
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	3304      	adds	r3, #4
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7fe fd3a 	bl	800c15a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d6e6:	4b0d      	ldr	r3, [pc, #52]	; (800d71c <prvCheckTasksWaitingTermination+0x54>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	4a0b      	ldr	r2, [pc, #44]	; (800d71c <prvCheckTasksWaitingTermination+0x54>)
 800d6ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d6f0:	4b0b      	ldr	r3, [pc, #44]	; (800d720 <prvCheckTasksWaitingTermination+0x58>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	4a0a      	ldr	r2, [pc, #40]	; (800d720 <prvCheckTasksWaitingTermination+0x58>)
 800d6f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6fa:	f000 fcb3 	bl	800e064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f810 	bl	800d724 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d704:	4b06      	ldr	r3, [pc, #24]	; (800d720 <prvCheckTasksWaitingTermination+0x58>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1e1      	bne.n	800d6d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d70c:	bf00      	nop
 800d70e:	bf00      	nop
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	20000fe0 	.word	0x20000fe0
 800d71c:	2000100c 	.word	0x2000100c
 800d720:	20000ff4 	.word	0x20000ff4

0800d724 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d732:	2b00      	cmp	r3, #0
 800d734:	d108      	bne.n	800d748 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d73a:	4618      	mov	r0, r3
 800d73c:	f000 fe50 	bl	800e3e0 <vPortFree>
				vPortFree( pxTCB );
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 fe4d 	bl	800e3e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d746:	e018      	b.n	800d77a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d103      	bne.n	800d75a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 fe44 	bl	800e3e0 <vPortFree>
	}
 800d758:	e00f      	b.n	800d77a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d760:	2b02      	cmp	r3, #2
 800d762:	d00a      	beq.n	800d77a <prvDeleteTCB+0x56>
	__asm volatile
 800d764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	60fb      	str	r3, [r7, #12]
}
 800d776:	bf00      	nop
 800d778:	e7fe      	b.n	800d778 <prvDeleteTCB+0x54>
	}
 800d77a:	bf00      	nop
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
	...

0800d784 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d784:	b480      	push	{r7}
 800d786:	b083      	sub	sp, #12
 800d788:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d78a:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <prvResetNextTaskUnblockTime+0x38>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d104      	bne.n	800d79e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d794:	4b0a      	ldr	r3, [pc, #40]	; (800d7c0 <prvResetNextTaskUnblockTime+0x3c>)
 800d796:	f04f 32ff 	mov.w	r2, #4294967295
 800d79a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d79c:	e008      	b.n	800d7b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d79e:	4b07      	ldr	r3, [pc, #28]	; (800d7bc <prvResetNextTaskUnblockTime+0x38>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	68db      	ldr	r3, [r3, #12]
 800d7a4:	68db      	ldr	r3, [r3, #12]
 800d7a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	4a04      	ldr	r2, [pc, #16]	; (800d7c0 <prvResetNextTaskUnblockTime+0x3c>)
 800d7ae:	6013      	str	r3, [r2, #0]
}
 800d7b0:	bf00      	nop
 800d7b2:	370c      	adds	r7, #12
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	20000fc4 	.word	0x20000fc4
 800d7c0:	2000102c 	.word	0x2000102c

0800d7c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d7ca:	4b0b      	ldr	r3, [pc, #44]	; (800d7f8 <xTaskGetSchedulerState+0x34>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d102      	bne.n	800d7d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	607b      	str	r3, [r7, #4]
 800d7d6:	e008      	b.n	800d7ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7d8:	4b08      	ldr	r3, [pc, #32]	; (800d7fc <xTaskGetSchedulerState+0x38>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7e0:	2302      	movs	r3, #2
 800d7e2:	607b      	str	r3, [r7, #4]
 800d7e4:	e001      	b.n	800d7ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7ea:	687b      	ldr	r3, [r7, #4]
	}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	370c      	adds	r7, #12
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f6:	4770      	bx	lr
 800d7f8:	20001018 	.word	0x20001018
 800d7fc:	20001034 	.word	0x20001034

0800d800 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d800:	b580      	push	{r7, lr}
 800d802:	b086      	sub	sp, #24
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d80c:	2300      	movs	r3, #0
 800d80e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d06e      	beq.n	800d8f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d816:	4b3a      	ldr	r3, [pc, #232]	; (800d900 <xTaskPriorityDisinherit+0x100>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	693a      	ldr	r2, [r7, #16]
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d00a      	beq.n	800d836 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d824:	f383 8811 	msr	BASEPRI, r3
 800d828:	f3bf 8f6f 	isb	sy
 800d82c:	f3bf 8f4f 	dsb	sy
 800d830:	60fb      	str	r3, [r7, #12]
}
 800d832:	bf00      	nop
 800d834:	e7fe      	b.n	800d834 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d10a      	bne.n	800d854 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	60bb      	str	r3, [r7, #8]
}
 800d850:	bf00      	nop
 800d852:	e7fe      	b.n	800d852 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d858:	1e5a      	subs	r2, r3, #1
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d866:	429a      	cmp	r2, r3
 800d868:	d044      	beq.n	800d8f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d140      	bne.n	800d8f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	3304      	adds	r3, #4
 800d876:	4618      	mov	r0, r3
 800d878:	f7fe fc6f 	bl	800c15a <uxListRemove>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d115      	bne.n	800d8ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d886:	491f      	ldr	r1, [pc, #124]	; (800d904 <xTaskPriorityDisinherit+0x104>)
 800d888:	4613      	mov	r3, r2
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	4413      	add	r3, r2
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	440b      	add	r3, r1
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d10a      	bne.n	800d8ae <xTaskPriorityDisinherit+0xae>
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89c:	2201      	movs	r2, #1
 800d89e:	fa02 f303 	lsl.w	r3, r2, r3
 800d8a2:	43da      	mvns	r2, r3
 800d8a4:	4b18      	ldr	r3, [pc, #96]	; (800d908 <xTaskPriorityDisinherit+0x108>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	4a17      	ldr	r2, [pc, #92]	; (800d908 <xTaskPriorityDisinherit+0x108>)
 800d8ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ba:	f1c3 0207 	rsb	r2, r3, #7
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	409a      	lsls	r2, r3
 800d8ca:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <xTaskPriorityDisinherit+0x108>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	4a0d      	ldr	r2, [pc, #52]	; (800d908 <xTaskPriorityDisinherit+0x108>)
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d8:	4613      	mov	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4a08      	ldr	r2, [pc, #32]	; (800d904 <xTaskPriorityDisinherit+0x104>)
 800d8e2:	441a      	add	r2, r3
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	4610      	mov	r0, r2
 800d8ec:	f7fe fbd8 	bl	800c0a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d8f4:	697b      	ldr	r3, [r7, #20]
	}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20000f0c 	.word	0x20000f0c
 800d904:	20000f10 	.word	0x20000f10
 800d908:	20001014 	.word	0x20001014

0800d90c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d91a:	f000 fb73 	bl	800e004 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d91e:	4b26      	ldr	r3, [pc, #152]	; (800d9b8 <xTaskNotifyWait+0xac>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d926:	b2db      	uxtb	r3, r3
 800d928:	2b02      	cmp	r3, #2
 800d92a:	d01a      	beq.n	800d962 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d92c:	4b22      	ldr	r3, [pc, #136]	; (800d9b8 <xTaskNotifyWait+0xac>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d932:	68fa      	ldr	r2, [r7, #12]
 800d934:	43d2      	mvns	r2, r2
 800d936:	400a      	ands	r2, r1
 800d938:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d93a:	4b1f      	ldr	r3, [pc, #124]	; (800d9b8 <xTaskNotifyWait+0xac>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00b      	beq.n	800d962 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d94a:	2101      	movs	r1, #1
 800d94c:	6838      	ldr	r0, [r7, #0]
 800d94e:	f000 f9c7 	bl	800dce0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d952:	4b1a      	ldr	r3, [pc, #104]	; (800d9bc <xTaskNotifyWait+0xb0>)
 800d954:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d958:	601a      	str	r2, [r3, #0]
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d962:	f000 fb7f 	bl	800e064 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d966:	f000 fb4d 	bl	800e004 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d004      	beq.n	800d97a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d970:	4b11      	ldr	r3, [pc, #68]	; (800d9b8 <xTaskNotifyWait+0xac>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d97a:	4b0f      	ldr	r3, [pc, #60]	; (800d9b8 <xTaskNotifyWait+0xac>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d982:	b2db      	uxtb	r3, r3
 800d984:	2b02      	cmp	r3, #2
 800d986:	d002      	beq.n	800d98e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d988:	2300      	movs	r3, #0
 800d98a:	617b      	str	r3, [r7, #20]
 800d98c:	e008      	b.n	800d9a0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d98e:	4b0a      	ldr	r3, [pc, #40]	; (800d9b8 <xTaskNotifyWait+0xac>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	43d2      	mvns	r2, r2
 800d998:	400a      	ands	r2, r1
 800d99a:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800d99c:	2301      	movs	r3, #1
 800d99e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d9a0:	4b05      	ldr	r3, [pc, #20]	; (800d9b8 <xTaskNotifyWait+0xac>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800d9aa:	f000 fb5b 	bl	800e064 <vPortExitCritical>

		return xReturn;
 800d9ae:	697b      	ldr	r3, [r7, #20]
	}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	20000f0c 	.word	0x20000f0c
 800d9bc:	e000ed04 	.word	0xe000ed04

0800d9c0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b08a      	sub	sp, #40	; 0x28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	603b      	str	r3, [r7, #0]
 800d9cc:	4613      	mov	r3, r2
 800d9ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d10a      	bne.n	800d9f0 <xTaskGenericNotify+0x30>
	__asm volatile
 800d9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9de:	f383 8811 	msr	BASEPRI, r3
 800d9e2:	f3bf 8f6f 	isb	sy
 800d9e6:	f3bf 8f4f 	dsb	sy
 800d9ea:	61bb      	str	r3, [r7, #24]
}
 800d9ec:	bf00      	nop
 800d9ee:	e7fe      	b.n	800d9ee <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d9f4:	f000 fb06 	bl	800e004 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800da06:	6a3b      	ldr	r3, [r7, #32]
 800da08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da0c:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800da0e:	6a3b      	ldr	r3, [r7, #32]
 800da10:	2202      	movs	r2, #2
 800da12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800da16:	79fb      	ldrb	r3, [r7, #7]
 800da18:	2b04      	cmp	r3, #4
 800da1a:	d828      	bhi.n	800da6e <xTaskGenericNotify+0xae>
 800da1c:	a201      	add	r2, pc, #4	; (adr r2, 800da24 <xTaskGenericNotify+0x64>)
 800da1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da22:	bf00      	nop
 800da24:	0800da8f 	.word	0x0800da8f
 800da28:	0800da39 	.word	0x0800da39
 800da2c:	0800da47 	.word	0x0800da47
 800da30:	0800da53 	.word	0x0800da53
 800da34:	0800da5b 	.word	0x0800da5b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	431a      	orrs	r2, r3
 800da40:	6a3b      	ldr	r3, [r7, #32]
 800da42:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800da44:	e026      	b.n	800da94 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da4a:	1c5a      	adds	r2, r3, #1
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800da50:	e020      	b.n	800da94 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800da52:	6a3b      	ldr	r3, [r7, #32]
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800da58:	e01c      	b.n	800da94 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800da5a:	7ffb      	ldrb	r3, [r7, #31]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d003      	beq.n	800da68 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800da60:	6a3b      	ldr	r3, [r7, #32]
 800da62:	68ba      	ldr	r2, [r7, #8]
 800da64:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800da66:	e015      	b.n	800da94 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800da68:	2300      	movs	r3, #0
 800da6a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800da6c:	e012      	b.n	800da94 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800da6e:	6a3b      	ldr	r3, [r7, #32]
 800da70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da76:	d00c      	beq.n	800da92 <xTaskGenericNotify+0xd2>
	__asm volatile
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	617b      	str	r3, [r7, #20]
}
 800da8a:	bf00      	nop
 800da8c:	e7fe      	b.n	800da8c <xTaskGenericNotify+0xcc>
					break;
 800da8e:	bf00      	nop
 800da90:	e000      	b.n	800da94 <xTaskGenericNotify+0xd4>

					break;
 800da92:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800da94:	7ffb      	ldrb	r3, [r7, #31]
 800da96:	2b01      	cmp	r3, #1
 800da98:	d139      	bne.n	800db0e <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da9a:	6a3b      	ldr	r3, [r7, #32]
 800da9c:	3304      	adds	r3, #4
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fe fb5b 	bl	800c15a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800daa4:	6a3b      	ldr	r3, [r7, #32]
 800daa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daa8:	2201      	movs	r2, #1
 800daaa:	409a      	lsls	r2, r3
 800daac:	4b1b      	ldr	r3, [pc, #108]	; (800db1c <xTaskGenericNotify+0x15c>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4313      	orrs	r3, r2
 800dab2:	4a1a      	ldr	r2, [pc, #104]	; (800db1c <xTaskGenericNotify+0x15c>)
 800dab4:	6013      	str	r3, [r2, #0]
 800dab6:	6a3b      	ldr	r3, [r7, #32]
 800dab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daba:	4613      	mov	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	4a17      	ldr	r2, [pc, #92]	; (800db20 <xTaskGenericNotify+0x160>)
 800dac4:	441a      	add	r2, r3
 800dac6:	6a3b      	ldr	r3, [r7, #32]
 800dac8:	3304      	adds	r3, #4
 800daca:	4619      	mov	r1, r3
 800dacc:	4610      	mov	r0, r2
 800dace:	f7fe fae7 	bl	800c0a0 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dad2:	6a3b      	ldr	r3, [r7, #32]
 800dad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00a      	beq.n	800daf0 <xTaskGenericNotify+0x130>
	__asm volatile
 800dada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dade:	f383 8811 	msr	BASEPRI, r3
 800dae2:	f3bf 8f6f 	isb	sy
 800dae6:	f3bf 8f4f 	dsb	sy
 800daea:	613b      	str	r3, [r7, #16]
}
 800daec:	bf00      	nop
 800daee:	e7fe      	b.n	800daee <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf4:	4b0b      	ldr	r3, [pc, #44]	; (800db24 <xTaskGenericNotify+0x164>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d907      	bls.n	800db0e <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800dafe:	4b0a      	ldr	r3, [pc, #40]	; (800db28 <xTaskGenericNotify+0x168>)
 800db00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db04:	601a      	str	r2, [r3, #0]
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800db0e:	f000 faa9 	bl	800e064 <vPortExitCritical>

		return xReturn;
 800db12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800db14:	4618      	mov	r0, r3
 800db16:	3728      	adds	r7, #40	; 0x28
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	20001014 	.word	0x20001014
 800db20:	20000f10 	.word	0x20000f10
 800db24:	20000f0c 	.word	0x20000f0c
 800db28:	e000ed04 	.word	0xe000ed04

0800db2c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08e      	sub	sp, #56	; 0x38
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	4613      	mov	r3, r2
 800db3a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800db3c:	2301      	movs	r3, #1
 800db3e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10a      	bne.n	800db5c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800db46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db4a:	f383 8811 	msr	BASEPRI, r3
 800db4e:	f3bf 8f6f 	isb	sy
 800db52:	f3bf 8f4f 	dsb	sy
 800db56:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db58:	bf00      	nop
 800db5a:	e7fe      	b.n	800db5a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db5c:	f000 fb34 	bl	800e1c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800db64:	f3ef 8211 	mrs	r2, BASEPRI
 800db68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	623a      	str	r2, [r7, #32]
 800db7a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800db7c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800db8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800db94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	2202      	movs	r2, #2
 800db9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800dba0:	79fb      	ldrb	r3, [r7, #7]
 800dba2:	2b04      	cmp	r3, #4
 800dba4:	d828      	bhi.n	800dbf8 <xTaskGenericNotifyFromISR+0xcc>
 800dba6:	a201      	add	r2, pc, #4	; (adr r2, 800dbac <xTaskGenericNotifyFromISR+0x80>)
 800dba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbac:	0800dc19 	.word	0x0800dc19
 800dbb0:	0800dbc1 	.word	0x0800dbc1
 800dbb4:	0800dbcf 	.word	0x0800dbcf
 800dbb8:	0800dbdb 	.word	0x0800dbdb
 800dbbc:	0800dbe3 	.word	0x0800dbe3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	431a      	orrs	r2, r3
 800dbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbca:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800dbcc:	e027      	b.n	800dc1e <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbd2:	1c5a      	adds	r2, r3, #1
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800dbd8:	e021      	b.n	800dc1e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800dbe0:	e01d      	b.n	800dc1e <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dbe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d003      	beq.n	800dbf2 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dbf0:	e015      	b.n	800dc1e <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800dbf6:	e012      	b.n	800dc1e <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc00:	d00c      	beq.n	800dc1c <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	61bb      	str	r3, [r7, #24]
}
 800dc14:	bf00      	nop
 800dc16:	e7fe      	b.n	800dc16 <xTaskGenericNotifyFromISR+0xea>
					break;
 800dc18:	bf00      	nop
 800dc1a:	e000      	b.n	800dc1e <xTaskGenericNotifyFromISR+0xf2>
					break;
 800dc1c:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dc1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d145      	bne.n	800dcb2 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d00a      	beq.n	800dc44 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	617b      	str	r3, [r7, #20]
}
 800dc40:	bf00      	nop
 800dc42:	e7fe      	b.n	800dc42 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc44:	4b20      	ldr	r3, [pc, #128]	; (800dcc8 <xTaskGenericNotifyFromISR+0x19c>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d11c      	bne.n	800dc86 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4e:	3304      	adds	r3, #4
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fe fa82 	bl	800c15a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	409a      	lsls	r2, r3
 800dc5e:	4b1b      	ldr	r3, [pc, #108]	; (800dccc <xTaskGenericNotifyFromISR+0x1a0>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	4a19      	ldr	r2, [pc, #100]	; (800dccc <xTaskGenericNotifyFromISR+0x1a0>)
 800dc66:	6013      	str	r3, [r2, #0]
 800dc68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4413      	add	r3, r2
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	4a16      	ldr	r2, [pc, #88]	; (800dcd0 <xTaskGenericNotifyFromISR+0x1a4>)
 800dc76:	441a      	add	r2, r3
 800dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4610      	mov	r0, r2
 800dc80:	f7fe fa0e 	bl	800c0a0 <vListInsertEnd>
 800dc84:	e005      	b.n	800dc92 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dc86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc88:	3318      	adds	r3, #24
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	4811      	ldr	r0, [pc, #68]	; (800dcd4 <xTaskGenericNotifyFromISR+0x1a8>)
 800dc8e:	f7fe fa07 	bl	800c0a0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc96:	4b10      	ldr	r3, [pc, #64]	; (800dcd8 <xTaskGenericNotifyFromISR+0x1ac>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d908      	bls.n	800dcb2 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800dca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d002      	beq.n	800dcac <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800dca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dca8:	2201      	movs	r2, #1
 800dcaa:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800dcac:	4b0b      	ldr	r3, [pc, #44]	; (800dcdc <xTaskGenericNotifyFromISR+0x1b0>)
 800dcae:	2201      	movs	r2, #1
 800dcb0:	601a      	str	r2, [r3, #0]
 800dcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	f383 8811 	msr	BASEPRI, r3
}
 800dcbc:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800dcbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3738      	adds	r7, #56	; 0x38
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	20001034 	.word	0x20001034
 800dccc:	20001014 	.word	0x20001014
 800dcd0:	20000f10 	.word	0x20000f10
 800dcd4:	20000fcc 	.word	0x20000fcc
 800dcd8:	20000f0c 	.word	0x20000f0c
 800dcdc:	20001020 	.word	0x20001020

0800dce0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dcea:	4b29      	ldr	r3, [pc, #164]	; (800dd90 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dcf0:	4b28      	ldr	r3, [pc, #160]	; (800dd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fa2f 	bl	800c15a <uxListRemove>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10b      	bne.n	800dd1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dd02:	4b24      	ldr	r3, [pc, #144]	; (800dd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd08:	2201      	movs	r2, #1
 800dd0a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd0e:	43da      	mvns	r2, r3
 800dd10:	4b21      	ldr	r3, [pc, #132]	; (800dd98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4013      	ands	r3, r2
 800dd16:	4a20      	ldr	r2, [pc, #128]	; (800dd98 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dd18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd20:	d10a      	bne.n	800dd38 <prvAddCurrentTaskToDelayedList+0x58>
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d007      	beq.n	800dd38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd28:	4b1a      	ldr	r3, [pc, #104]	; (800dd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	4619      	mov	r1, r3
 800dd30:	481a      	ldr	r0, [pc, #104]	; (800dd9c <prvAddCurrentTaskToDelayedList+0xbc>)
 800dd32:	f7fe f9b5 	bl	800c0a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dd36:	e026      	b.n	800dd86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dd40:	4b14      	ldr	r3, [pc, #80]	; (800dd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dd48:	68ba      	ldr	r2, [r7, #8]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d209      	bcs.n	800dd64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd50:	4b13      	ldr	r3, [pc, #76]	; (800dda0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	4b0f      	ldr	r3, [pc, #60]	; (800dd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3304      	adds	r3, #4
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	4610      	mov	r0, r2
 800dd5e:	f7fe f9c3 	bl	800c0e8 <vListInsert>
}
 800dd62:	e010      	b.n	800dd86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dd64:	4b0f      	ldr	r3, [pc, #60]	; (800dda4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	4b0a      	ldr	r3, [pc, #40]	; (800dd94 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	4619      	mov	r1, r3
 800dd70:	4610      	mov	r0, r2
 800dd72:	f7fe f9b9 	bl	800c0e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d202      	bcs.n	800dd86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dd80:	4a09      	ldr	r2, [pc, #36]	; (800dda8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	6013      	str	r3, [r2, #0]
}
 800dd86:	bf00      	nop
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	20001010 	.word	0x20001010
 800dd94:	20000f0c 	.word	0x20000f0c
 800dd98:	20001014 	.word	0x20001014
 800dd9c:	20000ff8 	.word	0x20000ff8
 800dda0:	20000fc8 	.word	0x20000fc8
 800dda4:	20000fc4 	.word	0x20000fc4
 800dda8:	2000102c 	.word	0x2000102c

0800ddac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ddac:	b480      	push	{r7}
 800ddae:	b085      	sub	sp, #20
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	3b04      	subs	r3, #4
 800ddbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ddc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	3b04      	subs	r3, #4
 800ddca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	f023 0201 	bic.w	r2, r3, #1
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	3b04      	subs	r3, #4
 800ddda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dddc:	4a0c      	ldr	r2, [pc, #48]	; (800de10 <pxPortInitialiseStack+0x64>)
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3b14      	subs	r3, #20
 800dde6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	3b04      	subs	r3, #4
 800ddf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f06f 0202 	mvn.w	r2, #2
 800ddfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	3b20      	subs	r3, #32
 800de00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800de02:	68fb      	ldr	r3, [r7, #12]
}
 800de04:	4618      	mov	r0, r3
 800de06:	3714      	adds	r7, #20
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	0800de15 	.word	0x0800de15

0800de14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800de1e:	4b12      	ldr	r3, [pc, #72]	; (800de68 <prvTaskExitError+0x54>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de26:	d00a      	beq.n	800de3e <prvTaskExitError+0x2a>
	__asm volatile
 800de28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2c:	f383 8811 	msr	BASEPRI, r3
 800de30:	f3bf 8f6f 	isb	sy
 800de34:	f3bf 8f4f 	dsb	sy
 800de38:	60fb      	str	r3, [r7, #12]
}
 800de3a:	bf00      	nop
 800de3c:	e7fe      	b.n	800de3c <prvTaskExitError+0x28>
	__asm volatile
 800de3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	60bb      	str	r3, [r7, #8]
}
 800de50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800de52:	bf00      	nop
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0fc      	beq.n	800de54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800de5a:	bf00      	nop
 800de5c:	bf00      	nop
 800de5e:	3714      	adds	r7, #20
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr
 800de68:	20000114 	.word	0x20000114
 800de6c:	00000000 	.word	0x00000000

0800de70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800de70:	4b07      	ldr	r3, [pc, #28]	; (800de90 <pxCurrentTCBConst2>)
 800de72:	6819      	ldr	r1, [r3, #0]
 800de74:	6808      	ldr	r0, [r1, #0]
 800de76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7a:	f380 8809 	msr	PSP, r0
 800de7e:	f3bf 8f6f 	isb	sy
 800de82:	f04f 0000 	mov.w	r0, #0
 800de86:	f380 8811 	msr	BASEPRI, r0
 800de8a:	4770      	bx	lr
 800de8c:	f3af 8000 	nop.w

0800de90 <pxCurrentTCBConst2>:
 800de90:	20000f0c 	.word	0x20000f0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de94:	bf00      	nop
 800de96:	bf00      	nop

0800de98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de98:	4808      	ldr	r0, [pc, #32]	; (800debc <prvPortStartFirstTask+0x24>)
 800de9a:	6800      	ldr	r0, [r0, #0]
 800de9c:	6800      	ldr	r0, [r0, #0]
 800de9e:	f380 8808 	msr	MSP, r0
 800dea2:	f04f 0000 	mov.w	r0, #0
 800dea6:	f380 8814 	msr	CONTROL, r0
 800deaa:	b662      	cpsie	i
 800deac:	b661      	cpsie	f
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	df00      	svc	0
 800deb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800deba:	bf00      	nop
 800debc:	e000ed08 	.word	0xe000ed08

0800dec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b086      	sub	sp, #24
 800dec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dec6:	4b46      	ldr	r3, [pc, #280]	; (800dfe0 <xPortStartScheduler+0x120>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4a46      	ldr	r2, [pc, #280]	; (800dfe4 <xPortStartScheduler+0x124>)
 800decc:	4293      	cmp	r3, r2
 800dece:	d10a      	bne.n	800dee6 <xPortStartScheduler+0x26>
	__asm volatile
 800ded0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded4:	f383 8811 	msr	BASEPRI, r3
 800ded8:	f3bf 8f6f 	isb	sy
 800dedc:	f3bf 8f4f 	dsb	sy
 800dee0:	613b      	str	r3, [r7, #16]
}
 800dee2:	bf00      	nop
 800dee4:	e7fe      	b.n	800dee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dee6:	4b3e      	ldr	r3, [pc, #248]	; (800dfe0 <xPortStartScheduler+0x120>)
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4a3f      	ldr	r2, [pc, #252]	; (800dfe8 <xPortStartScheduler+0x128>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d10a      	bne.n	800df06 <xPortStartScheduler+0x46>
	__asm volatile
 800def0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def4:	f383 8811 	msr	BASEPRI, r3
 800def8:	f3bf 8f6f 	isb	sy
 800defc:	f3bf 8f4f 	dsb	sy
 800df00:	60fb      	str	r3, [r7, #12]
}
 800df02:	bf00      	nop
 800df04:	e7fe      	b.n	800df04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800df06:	4b39      	ldr	r3, [pc, #228]	; (800dfec <xPortStartScheduler+0x12c>)
 800df08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	22ff      	movs	r2, #255	; 0xff
 800df16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800df20:	78fb      	ldrb	r3, [r7, #3]
 800df22:	b2db      	uxtb	r3, r3
 800df24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	4b31      	ldr	r3, [pc, #196]	; (800dff0 <xPortStartScheduler+0x130>)
 800df2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800df2e:	4b31      	ldr	r3, [pc, #196]	; (800dff4 <xPortStartScheduler+0x134>)
 800df30:	2207      	movs	r2, #7
 800df32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df34:	e009      	b.n	800df4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800df36:	4b2f      	ldr	r3, [pc, #188]	; (800dff4 <xPortStartScheduler+0x134>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	3b01      	subs	r3, #1
 800df3c:	4a2d      	ldr	r2, [pc, #180]	; (800dff4 <xPortStartScheduler+0x134>)
 800df3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800df40:	78fb      	ldrb	r3, [r7, #3]
 800df42:	b2db      	uxtb	r3, r3
 800df44:	005b      	lsls	r3, r3, #1
 800df46:	b2db      	uxtb	r3, r3
 800df48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800df4a:	78fb      	ldrb	r3, [r7, #3]
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df52:	2b80      	cmp	r3, #128	; 0x80
 800df54:	d0ef      	beq.n	800df36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800df56:	4b27      	ldr	r3, [pc, #156]	; (800dff4 <xPortStartScheduler+0x134>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f1c3 0307 	rsb	r3, r3, #7
 800df5e:	2b04      	cmp	r3, #4
 800df60:	d00a      	beq.n	800df78 <xPortStartScheduler+0xb8>
	__asm volatile
 800df62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df66:	f383 8811 	msr	BASEPRI, r3
 800df6a:	f3bf 8f6f 	isb	sy
 800df6e:	f3bf 8f4f 	dsb	sy
 800df72:	60bb      	str	r3, [r7, #8]
}
 800df74:	bf00      	nop
 800df76:	e7fe      	b.n	800df76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800df78:	4b1e      	ldr	r3, [pc, #120]	; (800dff4 <xPortStartScheduler+0x134>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	021b      	lsls	r3, r3, #8
 800df7e:	4a1d      	ldr	r2, [pc, #116]	; (800dff4 <xPortStartScheduler+0x134>)
 800df80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df82:	4b1c      	ldr	r3, [pc, #112]	; (800dff4 <xPortStartScheduler+0x134>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df8a:	4a1a      	ldr	r2, [pc, #104]	; (800dff4 <xPortStartScheduler+0x134>)
 800df8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	b2da      	uxtb	r2, r3
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df96:	4b18      	ldr	r3, [pc, #96]	; (800dff8 <xPortStartScheduler+0x138>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a17      	ldr	r2, [pc, #92]	; (800dff8 <xPortStartScheduler+0x138>)
 800df9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dfa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dfa2:	4b15      	ldr	r3, [pc, #84]	; (800dff8 <xPortStartScheduler+0x138>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4a14      	ldr	r2, [pc, #80]	; (800dff8 <xPortStartScheduler+0x138>)
 800dfa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dfac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dfae:	f000 f8dd 	bl	800e16c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dfb2:	4b12      	ldr	r3, [pc, #72]	; (800dffc <xPortStartScheduler+0x13c>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dfb8:	f000 f8fc 	bl	800e1b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dfbc:	4b10      	ldr	r3, [pc, #64]	; (800e000 <xPortStartScheduler+0x140>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4a0f      	ldr	r2, [pc, #60]	; (800e000 <xPortStartScheduler+0x140>)
 800dfc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dfc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dfc8:	f7ff ff66 	bl	800de98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dfcc:	f7ff f9be 	bl	800d34c <vTaskSwitchContext>
	prvTaskExitError();
 800dfd0:	f7ff ff20 	bl	800de14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dfd4:	2300      	movs	r3, #0
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3718      	adds	r7, #24
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	e000ed00 	.word	0xe000ed00
 800dfe4:	410fc271 	.word	0x410fc271
 800dfe8:	410fc270 	.word	0x410fc270
 800dfec:	e000e400 	.word	0xe000e400
 800dff0:	20001038 	.word	0x20001038
 800dff4:	2000103c 	.word	0x2000103c
 800dff8:	e000ed20 	.word	0xe000ed20
 800dffc:	20000114 	.word	0x20000114
 800e000:	e000ef34 	.word	0xe000ef34

0800e004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
	__asm volatile
 800e00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00e:	f383 8811 	msr	BASEPRI, r3
 800e012:	f3bf 8f6f 	isb	sy
 800e016:	f3bf 8f4f 	dsb	sy
 800e01a:	607b      	str	r3, [r7, #4]
}
 800e01c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e01e:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <vPortEnterCritical+0x58>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3301      	adds	r3, #1
 800e024:	4a0d      	ldr	r2, [pc, #52]	; (800e05c <vPortEnterCritical+0x58>)
 800e026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e028:	4b0c      	ldr	r3, [pc, #48]	; (800e05c <vPortEnterCritical+0x58>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d10f      	bne.n	800e050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e030:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <vPortEnterCritical+0x5c>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	b2db      	uxtb	r3, r3
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00a      	beq.n	800e050 <vPortEnterCritical+0x4c>
	__asm volatile
 800e03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03e:	f383 8811 	msr	BASEPRI, r3
 800e042:	f3bf 8f6f 	isb	sy
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	603b      	str	r3, [r7, #0]
}
 800e04c:	bf00      	nop
 800e04e:	e7fe      	b.n	800e04e <vPortEnterCritical+0x4a>
	}
}
 800e050:	bf00      	nop
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	20000114 	.word	0x20000114
 800e060:	e000ed04 	.word	0xe000ed04

0800e064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e06a:	4b12      	ldr	r3, [pc, #72]	; (800e0b4 <vPortExitCritical+0x50>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10a      	bne.n	800e088 <vPortExitCritical+0x24>
	__asm volatile
 800e072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	607b      	str	r3, [r7, #4]
}
 800e084:	bf00      	nop
 800e086:	e7fe      	b.n	800e086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e088:	4b0a      	ldr	r3, [pc, #40]	; (800e0b4 <vPortExitCritical+0x50>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3b01      	subs	r3, #1
 800e08e:	4a09      	ldr	r2, [pc, #36]	; (800e0b4 <vPortExitCritical+0x50>)
 800e090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e092:	4b08      	ldr	r3, [pc, #32]	; (800e0b4 <vPortExitCritical+0x50>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d105      	bne.n	800e0a6 <vPortExitCritical+0x42>
 800e09a:	2300      	movs	r3, #0
 800e09c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	f383 8811 	msr	BASEPRI, r3
}
 800e0a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e0a6:	bf00      	nop
 800e0a8:	370c      	adds	r7, #12
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b0:	4770      	bx	lr
 800e0b2:	bf00      	nop
 800e0b4:	20000114 	.word	0x20000114
	...

0800e0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e0c0:	f3ef 8009 	mrs	r0, PSP
 800e0c4:	f3bf 8f6f 	isb	sy
 800e0c8:	4b15      	ldr	r3, [pc, #84]	; (800e120 <pxCurrentTCBConst>)
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	f01e 0f10 	tst.w	lr, #16
 800e0d0:	bf08      	it	eq
 800e0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0da:	6010      	str	r0, [r2, #0]
 800e0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e0e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e0e4:	f380 8811 	msr	BASEPRI, r0
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	f3bf 8f6f 	isb	sy
 800e0f0:	f7ff f92c 	bl	800d34c <vTaskSwitchContext>
 800e0f4:	f04f 0000 	mov.w	r0, #0
 800e0f8:	f380 8811 	msr	BASEPRI, r0
 800e0fc:	bc09      	pop	{r0, r3}
 800e0fe:	6819      	ldr	r1, [r3, #0]
 800e100:	6808      	ldr	r0, [r1, #0]
 800e102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e106:	f01e 0f10 	tst.w	lr, #16
 800e10a:	bf08      	it	eq
 800e10c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e110:	f380 8809 	msr	PSP, r0
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	4770      	bx	lr
 800e11a:	bf00      	nop
 800e11c:	f3af 8000 	nop.w

0800e120 <pxCurrentTCBConst>:
 800e120:	20000f0c 	.word	0x20000f0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e124:	bf00      	nop
 800e126:	bf00      	nop

0800e128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b082      	sub	sp, #8
 800e12c:	af00      	add	r7, sp, #0
	__asm volatile
 800e12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e132:	f383 8811 	msr	BASEPRI, r3
 800e136:	f3bf 8f6f 	isb	sy
 800e13a:	f3bf 8f4f 	dsb	sy
 800e13e:	607b      	str	r3, [r7, #4]
}
 800e140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e142:	f7ff f84b 	bl	800d1dc <xTaskIncrementTick>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d003      	beq.n	800e154 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e14c:	4b06      	ldr	r3, [pc, #24]	; (800e168 <SysTick_Handler+0x40>)
 800e14e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	2300      	movs	r3, #0
 800e156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	f383 8811 	msr	BASEPRI, r3
}
 800e15e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e160:	bf00      	nop
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	e000ed04 	.word	0xe000ed04

0800e16c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e16c:	b480      	push	{r7}
 800e16e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e170:	4b0b      	ldr	r3, [pc, #44]	; (800e1a0 <vPortSetupTimerInterrupt+0x34>)
 800e172:	2200      	movs	r2, #0
 800e174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e176:	4b0b      	ldr	r3, [pc, #44]	; (800e1a4 <vPortSetupTimerInterrupt+0x38>)
 800e178:	2200      	movs	r2, #0
 800e17a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e17c:	4b0a      	ldr	r3, [pc, #40]	; (800e1a8 <vPortSetupTimerInterrupt+0x3c>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a0a      	ldr	r2, [pc, #40]	; (800e1ac <vPortSetupTimerInterrupt+0x40>)
 800e182:	fba2 2303 	umull	r2, r3, r2, r3
 800e186:	099b      	lsrs	r3, r3, #6
 800e188:	4a09      	ldr	r2, [pc, #36]	; (800e1b0 <vPortSetupTimerInterrupt+0x44>)
 800e18a:	3b01      	subs	r3, #1
 800e18c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e18e:	4b04      	ldr	r3, [pc, #16]	; (800e1a0 <vPortSetupTimerInterrupt+0x34>)
 800e190:	2207      	movs	r2, #7
 800e192:	601a      	str	r2, [r3, #0]
}
 800e194:	bf00      	nop
 800e196:	46bd      	mov	sp, r7
 800e198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19c:	4770      	bx	lr
 800e19e:	bf00      	nop
 800e1a0:	e000e010 	.word	0xe000e010
 800e1a4:	e000e018 	.word	0xe000e018
 800e1a8:	20000000 	.word	0x20000000
 800e1ac:	10624dd3 	.word	0x10624dd3
 800e1b0:	e000e014 	.word	0xe000e014

0800e1b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e1b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e1c4 <vPortEnableVFP+0x10>
 800e1b8:	6801      	ldr	r1, [r0, #0]
 800e1ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e1be:	6001      	str	r1, [r0, #0]
 800e1c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e1c2:	bf00      	nop
 800e1c4:	e000ed88 	.word	0xe000ed88

0800e1c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b085      	sub	sp, #20
 800e1cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1ce:	f3ef 8305 	mrs	r3, IPSR
 800e1d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2b0f      	cmp	r3, #15
 800e1d8:	d914      	bls.n	800e204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e1da:	4a17      	ldr	r2, [pc, #92]	; (800e238 <vPortValidateInterruptPriority+0x70>)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	4413      	add	r3, r2
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e1e4:	4b15      	ldr	r3, [pc, #84]	; (800e23c <vPortValidateInterruptPriority+0x74>)
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	7afa      	ldrb	r2, [r7, #11]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d20a      	bcs.n	800e204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	607b      	str	r3, [r7, #4]
}
 800e200:	bf00      	nop
 800e202:	e7fe      	b.n	800e202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e204:	4b0e      	ldr	r3, [pc, #56]	; (800e240 <vPortValidateInterruptPriority+0x78>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e20c:	4b0d      	ldr	r3, [pc, #52]	; (800e244 <vPortValidateInterruptPriority+0x7c>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	429a      	cmp	r2, r3
 800e212:	d90a      	bls.n	800e22a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e214:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e218:	f383 8811 	msr	BASEPRI, r3
 800e21c:	f3bf 8f6f 	isb	sy
 800e220:	f3bf 8f4f 	dsb	sy
 800e224:	603b      	str	r3, [r7, #0]
}
 800e226:	bf00      	nop
 800e228:	e7fe      	b.n	800e228 <vPortValidateInterruptPriority+0x60>
	}
 800e22a:	bf00      	nop
 800e22c:	3714      	adds	r7, #20
 800e22e:	46bd      	mov	sp, r7
 800e230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e234:	4770      	bx	lr
 800e236:	bf00      	nop
 800e238:	e000e3f0 	.word	0xe000e3f0
 800e23c:	20001038 	.word	0x20001038
 800e240:	e000ed0c 	.word	0xe000ed0c
 800e244:	2000103c 	.word	0x2000103c

0800e248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b08a      	sub	sp, #40	; 0x28
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e250:	2300      	movs	r3, #0
 800e252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e254:	f7fe ff18 	bl	800d088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e258:	4b5b      	ldr	r3, [pc, #364]	; (800e3c8 <pvPortMalloc+0x180>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d101      	bne.n	800e264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e260:	f000 f920 	bl	800e4a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e264:	4b59      	ldr	r3, [pc, #356]	; (800e3cc <pvPortMalloc+0x184>)
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	4013      	ands	r3, r2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	f040 8093 	bne.w	800e398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d01d      	beq.n	800e2b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e278:	2208      	movs	r2, #8
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4413      	add	r3, r2
 800e27e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f003 0307 	and.w	r3, r3, #7
 800e286:	2b00      	cmp	r3, #0
 800e288:	d014      	beq.n	800e2b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f023 0307 	bic.w	r3, r3, #7
 800e290:	3308      	adds	r3, #8
 800e292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f003 0307 	and.w	r3, r3, #7
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00a      	beq.n	800e2b4 <pvPortMalloc+0x6c>
	__asm volatile
 800e29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a2:	f383 8811 	msr	BASEPRI, r3
 800e2a6:	f3bf 8f6f 	isb	sy
 800e2aa:	f3bf 8f4f 	dsb	sy
 800e2ae:	617b      	str	r3, [r7, #20]
}
 800e2b0:	bf00      	nop
 800e2b2:	e7fe      	b.n	800e2b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d06e      	beq.n	800e398 <pvPortMalloc+0x150>
 800e2ba:	4b45      	ldr	r3, [pc, #276]	; (800e3d0 <pvPortMalloc+0x188>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	687a      	ldr	r2, [r7, #4]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d869      	bhi.n	800e398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e2c4:	4b43      	ldr	r3, [pc, #268]	; (800e3d4 <pvPortMalloc+0x18c>)
 800e2c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e2c8:	4b42      	ldr	r3, [pc, #264]	; (800e3d4 <pvPortMalloc+0x18c>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2ce:	e004      	b.n	800e2da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d903      	bls.n	800e2ec <pvPortMalloc+0xa4>
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1f1      	bne.n	800e2d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e2ec:	4b36      	ldr	r3, [pc, #216]	; (800e3c8 <pvPortMalloc+0x180>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d050      	beq.n	800e398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	2208      	movs	r2, #8
 800e2fc:	4413      	add	r3, r2
 800e2fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	685a      	ldr	r2, [r3, #4]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	1ad2      	subs	r2, r2, r3
 800e310:	2308      	movs	r3, #8
 800e312:	005b      	lsls	r3, r3, #1
 800e314:	429a      	cmp	r2, r3
 800e316:	d91f      	bls.n	800e358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4413      	add	r3, r2
 800e31e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e320:	69bb      	ldr	r3, [r7, #24]
 800e322:	f003 0307 	and.w	r3, r3, #7
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00a      	beq.n	800e340 <pvPortMalloc+0xf8>
	__asm volatile
 800e32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	613b      	str	r3, [r7, #16]
}
 800e33c:	bf00      	nop
 800e33e:	e7fe      	b.n	800e33e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	685a      	ldr	r2, [r3, #4]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	1ad2      	subs	r2, r2, r3
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e352:	69b8      	ldr	r0, [r7, #24]
 800e354:	f000 f908 	bl	800e568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e358:	4b1d      	ldr	r3, [pc, #116]	; (800e3d0 <pvPortMalloc+0x188>)
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	1ad3      	subs	r3, r2, r3
 800e362:	4a1b      	ldr	r2, [pc, #108]	; (800e3d0 <pvPortMalloc+0x188>)
 800e364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e366:	4b1a      	ldr	r3, [pc, #104]	; (800e3d0 <pvPortMalloc+0x188>)
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	4b1b      	ldr	r3, [pc, #108]	; (800e3d8 <pvPortMalloc+0x190>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d203      	bcs.n	800e37a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e372:	4b17      	ldr	r3, [pc, #92]	; (800e3d0 <pvPortMalloc+0x188>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a18      	ldr	r2, [pc, #96]	; (800e3d8 <pvPortMalloc+0x190>)
 800e378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37c:	685a      	ldr	r2, [r3, #4]
 800e37e:	4b13      	ldr	r3, [pc, #76]	; (800e3cc <pvPortMalloc+0x184>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	431a      	orrs	r2, r3
 800e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38a:	2200      	movs	r2, #0
 800e38c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e38e:	4b13      	ldr	r3, [pc, #76]	; (800e3dc <pvPortMalloc+0x194>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	3301      	adds	r3, #1
 800e394:	4a11      	ldr	r2, [pc, #68]	; (800e3dc <pvPortMalloc+0x194>)
 800e396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e398:	f7fe fe84 	bl	800d0a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	f003 0307 	and.w	r3, r3, #7
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00a      	beq.n	800e3bc <pvPortMalloc+0x174>
	__asm volatile
 800e3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	60fb      	str	r3, [r7, #12]
}
 800e3b8:	bf00      	nop
 800e3ba:	e7fe      	b.n	800e3ba <pvPortMalloc+0x172>
	return pvReturn;
 800e3bc:	69fb      	ldr	r3, [r7, #28]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3728      	adds	r7, #40	; 0x28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20004c48 	.word	0x20004c48
 800e3cc:	20004c5c 	.word	0x20004c5c
 800e3d0:	20004c4c 	.word	0x20004c4c
 800e3d4:	20004c40 	.word	0x20004c40
 800e3d8:	20004c50 	.word	0x20004c50
 800e3dc:	20004c54 	.word	0x20004c54

0800e3e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d04d      	beq.n	800e48e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e3f2:	2308      	movs	r3, #8
 800e3f4:	425b      	negs	r3, r3
 800e3f6:	697a      	ldr	r2, [r7, #20]
 800e3f8:	4413      	add	r3, r2
 800e3fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	685a      	ldr	r2, [r3, #4]
 800e404:	4b24      	ldr	r3, [pc, #144]	; (800e498 <vPortFree+0xb8>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4013      	ands	r3, r2
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d10a      	bne.n	800e424 <vPortFree+0x44>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	60fb      	str	r3, [r7, #12]
}
 800e420:	bf00      	nop
 800e422:	e7fe      	b.n	800e422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e424:	693b      	ldr	r3, [r7, #16]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00a      	beq.n	800e442 <vPortFree+0x62>
	__asm volatile
 800e42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e430:	f383 8811 	msr	BASEPRI, r3
 800e434:	f3bf 8f6f 	isb	sy
 800e438:	f3bf 8f4f 	dsb	sy
 800e43c:	60bb      	str	r3, [r7, #8]
}
 800e43e:	bf00      	nop
 800e440:	e7fe      	b.n	800e440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	685a      	ldr	r2, [r3, #4]
 800e446:	4b14      	ldr	r3, [pc, #80]	; (800e498 <vPortFree+0xb8>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4013      	ands	r3, r2
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d01e      	beq.n	800e48e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d11a      	bne.n	800e48e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	4b0e      	ldr	r3, [pc, #56]	; (800e498 <vPortFree+0xb8>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	43db      	mvns	r3, r3
 800e462:	401a      	ands	r2, r3
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e468:	f7fe fe0e 	bl	800d088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	685a      	ldr	r2, [r3, #4]
 800e470:	4b0a      	ldr	r3, [pc, #40]	; (800e49c <vPortFree+0xbc>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4413      	add	r3, r2
 800e476:	4a09      	ldr	r2, [pc, #36]	; (800e49c <vPortFree+0xbc>)
 800e478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e47a:	6938      	ldr	r0, [r7, #16]
 800e47c:	f000 f874 	bl	800e568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e480:	4b07      	ldr	r3, [pc, #28]	; (800e4a0 <vPortFree+0xc0>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	3301      	adds	r3, #1
 800e486:	4a06      	ldr	r2, [pc, #24]	; (800e4a0 <vPortFree+0xc0>)
 800e488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e48a:	f7fe fe0b 	bl	800d0a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e48e:	bf00      	nop
 800e490:	3718      	adds	r7, #24
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	20004c5c 	.word	0x20004c5c
 800e49c:	20004c4c 	.word	0x20004c4c
 800e4a0:	20004c58 	.word	0x20004c58

0800e4a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b085      	sub	sp, #20
 800e4a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e4aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e4ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e4b0:	4b27      	ldr	r3, [pc, #156]	; (800e550 <prvHeapInit+0xac>)
 800e4b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f003 0307 	and.w	r3, r3, #7
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00c      	beq.n	800e4d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3307      	adds	r3, #7
 800e4c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f023 0307 	bic.w	r3, r3, #7
 800e4ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e4cc:	68ba      	ldr	r2, [r7, #8]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	1ad3      	subs	r3, r2, r3
 800e4d2:	4a1f      	ldr	r2, [pc, #124]	; (800e550 <prvHeapInit+0xac>)
 800e4d4:	4413      	add	r3, r2
 800e4d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e4dc:	4a1d      	ldr	r2, [pc, #116]	; (800e554 <prvHeapInit+0xb0>)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e4e2:	4b1c      	ldr	r3, [pc, #112]	; (800e554 <prvHeapInit+0xb0>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	4413      	add	r3, r2
 800e4ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e4f0:	2208      	movs	r2, #8
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	1a9b      	subs	r3, r3, r2
 800e4f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f023 0307 	bic.w	r3, r3, #7
 800e4fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	4a15      	ldr	r2, [pc, #84]	; (800e558 <prvHeapInit+0xb4>)
 800e504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e506:	4b14      	ldr	r3, [pc, #80]	; (800e558 <prvHeapInit+0xb4>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2200      	movs	r2, #0
 800e50c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e50e:	4b12      	ldr	r3, [pc, #72]	; (800e558 <prvHeapInit+0xb4>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	2200      	movs	r2, #0
 800e514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	1ad2      	subs	r2, r2, r3
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e524:	4b0c      	ldr	r3, [pc, #48]	; (800e558 <prvHeapInit+0xb4>)
 800e526:	681a      	ldr	r2, [r3, #0]
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	4a0a      	ldr	r2, [pc, #40]	; (800e55c <prvHeapInit+0xb8>)
 800e532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	4a09      	ldr	r2, [pc, #36]	; (800e560 <prvHeapInit+0xbc>)
 800e53a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e53c:	4b09      	ldr	r3, [pc, #36]	; (800e564 <prvHeapInit+0xc0>)
 800e53e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e542:	601a      	str	r2, [r3, #0]
}
 800e544:	bf00      	nop
 800e546:	3714      	adds	r7, #20
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr
 800e550:	20001040 	.word	0x20001040
 800e554:	20004c40 	.word	0x20004c40
 800e558:	20004c48 	.word	0x20004c48
 800e55c:	20004c50 	.word	0x20004c50
 800e560:	20004c4c 	.word	0x20004c4c
 800e564:	20004c5c 	.word	0x20004c5c

0800e568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e570:	4b28      	ldr	r3, [pc, #160]	; (800e614 <prvInsertBlockIntoFreeList+0xac>)
 800e572:	60fb      	str	r3, [r7, #12]
 800e574:	e002      	b.n	800e57c <prvInsertBlockIntoFreeList+0x14>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	60fb      	str	r3, [r7, #12]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	687a      	ldr	r2, [r7, #4]
 800e582:	429a      	cmp	r2, r3
 800e584:	d8f7      	bhi.n	800e576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	4413      	add	r3, r2
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	429a      	cmp	r2, r3
 800e596:	d108      	bne.n	800e5aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	685a      	ldr	r2, [r3, #4]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	441a      	add	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	68ba      	ldr	r2, [r7, #8]
 800e5b4:	441a      	add	r2, r3
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d118      	bne.n	800e5f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	4b15      	ldr	r3, [pc, #84]	; (800e618 <prvInsertBlockIntoFreeList+0xb0>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d00d      	beq.n	800e5e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	441a      	add	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	681a      	ldr	r2, [r3, #0]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	601a      	str	r2, [r3, #0]
 800e5e4:	e008      	b.n	800e5f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e5e6:	4b0c      	ldr	r3, [pc, #48]	; (800e618 <prvInsertBlockIntoFreeList+0xb0>)
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	601a      	str	r2, [r3, #0]
 800e5ee:	e003      	b.n	800e5f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d002      	beq.n	800e606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e606:	bf00      	nop
 800e608:	3714      	adds	r7, #20
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	20004c40 	.word	0x20004c40
 800e618:	20004c48 	.word	0x20004c48

0800e61c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e620:	2201      	movs	r2, #1
 800e622:	4912      	ldr	r1, [pc, #72]	; (800e66c <MX_USB_DEVICE_Init+0x50>)
 800e624:	4812      	ldr	r0, [pc, #72]	; (800e670 <MX_USB_DEVICE_Init+0x54>)
 800e626:	f7fb fded 	bl	800a204 <USBD_Init>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d001      	beq.n	800e634 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e630:	f7f3 f808 	bl	8001644 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e634:	490f      	ldr	r1, [pc, #60]	; (800e674 <MX_USB_DEVICE_Init+0x58>)
 800e636:	480e      	ldr	r0, [pc, #56]	; (800e670 <MX_USB_DEVICE_Init+0x54>)
 800e638:	f7fb fe14 	bl	800a264 <USBD_RegisterClass>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d001      	beq.n	800e646 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e642:	f7f2 ffff 	bl	8001644 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e646:	490c      	ldr	r1, [pc, #48]	; (800e678 <MX_USB_DEVICE_Init+0x5c>)
 800e648:	4809      	ldr	r0, [pc, #36]	; (800e670 <MX_USB_DEVICE_Init+0x54>)
 800e64a:	f7fb fd05 	bl	800a058 <USBD_CDC_RegisterInterface>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e654:	f7f2 fff6 	bl	8001644 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e658:	4805      	ldr	r0, [pc, #20]	; (800e670 <MX_USB_DEVICE_Init+0x54>)
 800e65a:	f7fb fe39 	bl	800a2d0 <USBD_Start>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d001      	beq.n	800e668 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e664:	f7f2 ffee 	bl	8001644 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e668:	bf00      	nop
 800e66a:	bd80      	pop	{r7, pc}
 800e66c:	2000012c 	.word	0x2000012c
 800e670:	20004c60 	.word	0x20004c60
 800e674:	20000094 	.word	0x20000094
 800e678:	20000118 	.word	0x20000118

0800e67c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e680:	2200      	movs	r2, #0
 800e682:	4905      	ldr	r1, [pc, #20]	; (800e698 <CDC_Init_HS+0x1c>)
 800e684:	4805      	ldr	r0, [pc, #20]	; (800e69c <CDC_Init_HS+0x20>)
 800e686:	f7fb fd01 	bl	800a08c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e68a:	4905      	ldr	r1, [pc, #20]	; (800e6a0 <CDC_Init_HS+0x24>)
 800e68c:	4803      	ldr	r0, [pc, #12]	; (800e69c <CDC_Init_HS+0x20>)
 800e68e:	f7fb fd1f 	bl	800a0d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e692:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e694:	4618      	mov	r0, r3
 800e696:	bd80      	pop	{r7, pc}
 800e698:	2000573c 	.word	0x2000573c
 800e69c:	20004c60 	.word	0x20004c60
 800e6a0:	20004f3c 	.word	0x20004f3c

0800e6a4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e6a8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e6b4:	b480      	push	{r7}
 800e6b6:	b083      	sub	sp, #12
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	6039      	str	r1, [r7, #0]
 800e6be:	71fb      	strb	r3, [r7, #7]
 800e6c0:	4613      	mov	r3, r2
 800e6c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e6c4:	79fb      	ldrb	r3, [r7, #7]
 800e6c6:	2b23      	cmp	r3, #35	; 0x23
 800e6c8:	d84a      	bhi.n	800e760 <CDC_Control_HS+0xac>
 800e6ca:	a201      	add	r2, pc, #4	; (adr r2, 800e6d0 <CDC_Control_HS+0x1c>)
 800e6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d0:	0800e761 	.word	0x0800e761
 800e6d4:	0800e761 	.word	0x0800e761
 800e6d8:	0800e761 	.word	0x0800e761
 800e6dc:	0800e761 	.word	0x0800e761
 800e6e0:	0800e761 	.word	0x0800e761
 800e6e4:	0800e761 	.word	0x0800e761
 800e6e8:	0800e761 	.word	0x0800e761
 800e6ec:	0800e761 	.word	0x0800e761
 800e6f0:	0800e761 	.word	0x0800e761
 800e6f4:	0800e761 	.word	0x0800e761
 800e6f8:	0800e761 	.word	0x0800e761
 800e6fc:	0800e761 	.word	0x0800e761
 800e700:	0800e761 	.word	0x0800e761
 800e704:	0800e761 	.word	0x0800e761
 800e708:	0800e761 	.word	0x0800e761
 800e70c:	0800e761 	.word	0x0800e761
 800e710:	0800e761 	.word	0x0800e761
 800e714:	0800e761 	.word	0x0800e761
 800e718:	0800e761 	.word	0x0800e761
 800e71c:	0800e761 	.word	0x0800e761
 800e720:	0800e761 	.word	0x0800e761
 800e724:	0800e761 	.word	0x0800e761
 800e728:	0800e761 	.word	0x0800e761
 800e72c:	0800e761 	.word	0x0800e761
 800e730:	0800e761 	.word	0x0800e761
 800e734:	0800e761 	.word	0x0800e761
 800e738:	0800e761 	.word	0x0800e761
 800e73c:	0800e761 	.word	0x0800e761
 800e740:	0800e761 	.word	0x0800e761
 800e744:	0800e761 	.word	0x0800e761
 800e748:	0800e761 	.word	0x0800e761
 800e74c:	0800e761 	.word	0x0800e761
 800e750:	0800e761 	.word	0x0800e761
 800e754:	0800e761 	.word	0x0800e761
 800e758:	0800e761 	.word	0x0800e761
 800e75c:	0800e761 	.word	0x0800e761
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e760:	bf00      	nop
  }

  return (USBD_OK);
 800e762:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e764:	4618      	mov	r0, r3
 800e766:	370c      	adds	r7, #12
 800e768:	46bd      	mov	sp, r7
 800e76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76e:	4770      	bx	lr

0800e770 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b082      	sub	sp, #8
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e77a:	6879      	ldr	r1, [r7, #4]
 800e77c:	480a      	ldr	r0, [pc, #40]	; (800e7a8 <CDC_Receive_HS+0x38>)
 800e77e:	f7fb fca7 	bl	800a0d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e782:	4809      	ldr	r0, [pc, #36]	; (800e7a8 <CDC_Receive_HS+0x38>)
 800e784:	f7fb fd08 	bl	800a198 <USBD_CDC_ReceivePacket>
  if (*Len > 0) {
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d006      	beq.n	800e79e <CDC_Receive_HS+0x2e>
	  memcpy(RxBuff, Buf, *Len);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	461a      	mov	r2, r3
 800e796:	6879      	ldr	r1, [r7, #4]
 800e798:	4804      	ldr	r0, [pc, #16]	; (800e7ac <CDC_Receive_HS+0x3c>)
 800e79a:	f000 fcbb 	bl	800f114 <memcpy>
  }

  return (USBD_OK);
 800e79e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	20004c60 	.word	0x20004c60
 800e7ac:	2000043c 	.word	0x2000043c

0800e7b0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b084      	sub	sp, #16
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800e7c0:	4b0d      	ldr	r3, [pc, #52]	; (800e7f8 <CDC_Transmit_HS+0x48>)
 800e7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7c6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	e00b      	b.n	800e7ee <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800e7d6:	887b      	ldrh	r3, [r7, #2]
 800e7d8:	461a      	mov	r2, r3
 800e7da:	6879      	ldr	r1, [r7, #4]
 800e7dc:	4806      	ldr	r0, [pc, #24]	; (800e7f8 <CDC_Transmit_HS+0x48>)
 800e7de:	f7fb fc55 	bl	800a08c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800e7e2:	4805      	ldr	r0, [pc, #20]	; (800e7f8 <CDC_Transmit_HS+0x48>)
 800e7e4:	f7fb fc92 	bl	800a10c <USBD_CDC_TransmitPacket>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800e7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20004c60 	.word	0x20004c60

0800e7fc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e7fc:	b480      	push	{r7}
 800e7fe:	b087      	sub	sp, #28
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	4613      	mov	r3, r2
 800e808:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e80a:	2300      	movs	r3, #0
 800e80c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e80e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e812:	4618      	mov	r0, r3
 800e814:	371c      	adds	r7, #28
 800e816:	46bd      	mov	sp, r7
 800e818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81c:	4770      	bx	lr
	...

0800e820 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	4603      	mov	r3, r0
 800e828:	6039      	str	r1, [r7, #0]
 800e82a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2212      	movs	r2, #18
 800e830:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e832:	4b03      	ldr	r3, [pc, #12]	; (800e840 <USBD_HS_DeviceDescriptor+0x20>)
}
 800e834:	4618      	mov	r0, r3
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	20000148 	.word	0x20000148

0800e844 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	4603      	mov	r3, r0
 800e84c:	6039      	str	r1, [r7, #0]
 800e84e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2204      	movs	r2, #4
 800e854:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e856:	4b03      	ldr	r3, [pc, #12]	; (800e864 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e858:	4618      	mov	r0, r3
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr
 800e864:	2000015c 	.word	0x2000015c

0800e868 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	4603      	mov	r3, r0
 800e870:	6039      	str	r1, [r7, #0]
 800e872:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e874:	79fb      	ldrb	r3, [r7, #7]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d105      	bne.n	800e886 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e87a:	683a      	ldr	r2, [r7, #0]
 800e87c:	4907      	ldr	r1, [pc, #28]	; (800e89c <USBD_HS_ProductStrDescriptor+0x34>)
 800e87e:	4808      	ldr	r0, [pc, #32]	; (800e8a0 <USBD_HS_ProductStrDescriptor+0x38>)
 800e880:	f7fc fed2 	bl	800b628 <USBD_GetString>
 800e884:	e004      	b.n	800e890 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e886:	683a      	ldr	r2, [r7, #0]
 800e888:	4904      	ldr	r1, [pc, #16]	; (800e89c <USBD_HS_ProductStrDescriptor+0x34>)
 800e88a:	4805      	ldr	r0, [pc, #20]	; (800e8a0 <USBD_HS_ProductStrDescriptor+0x38>)
 800e88c:	f7fc fecc 	bl	800b628 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e890:	4b02      	ldr	r3, [pc, #8]	; (800e89c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e892:	4618      	mov	r0, r3
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	20005f3c 	.word	0x20005f3c
 800e8a0:	0800faac 	.word	0x0800faac

0800e8a4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	6039      	str	r1, [r7, #0]
 800e8ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e8b0:	683a      	ldr	r2, [r7, #0]
 800e8b2:	4904      	ldr	r1, [pc, #16]	; (800e8c4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e8b4:	4804      	ldr	r0, [pc, #16]	; (800e8c8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e8b6:	f7fc feb7 	bl	800b628 <USBD_GetString>
  return USBD_StrDesc;
 800e8ba:	4b02      	ldr	r3, [pc, #8]	; (800e8c4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	20005f3c 	.word	0x20005f3c
 800e8c8:	0800fac4 	.word	0x0800fac4

0800e8cc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	6039      	str	r1, [r7, #0]
 800e8d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	221a      	movs	r2, #26
 800e8dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e8de:	f000 f843 	bl	800e968 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e8e2:	4b02      	ldr	r3, [pc, #8]	; (800e8ec <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	20000160 	.word	0x20000160

0800e8f0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	6039      	str	r1, [r7, #0]
 800e8fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e8fc:	79fb      	ldrb	r3, [r7, #7]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d105      	bne.n	800e90e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e902:	683a      	ldr	r2, [r7, #0]
 800e904:	4907      	ldr	r1, [pc, #28]	; (800e924 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e906:	4808      	ldr	r0, [pc, #32]	; (800e928 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e908:	f7fc fe8e 	bl	800b628 <USBD_GetString>
 800e90c:	e004      	b.n	800e918 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	4904      	ldr	r1, [pc, #16]	; (800e924 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e912:	4805      	ldr	r0, [pc, #20]	; (800e928 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e914:	f7fc fe88 	bl	800b628 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e918:	4b02      	ldr	r3, [pc, #8]	; (800e924 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3708      	adds	r7, #8
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	20005f3c 	.word	0x20005f3c
 800e928:	0800fad8 	.word	0x0800fad8

0800e92c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b082      	sub	sp, #8
 800e930:	af00      	add	r7, sp, #0
 800e932:	4603      	mov	r3, r0
 800e934:	6039      	str	r1, [r7, #0]
 800e936:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e938:	79fb      	ldrb	r3, [r7, #7]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d105      	bne.n	800e94a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e93e:	683a      	ldr	r2, [r7, #0]
 800e940:	4907      	ldr	r1, [pc, #28]	; (800e960 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e942:	4808      	ldr	r0, [pc, #32]	; (800e964 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e944:	f7fc fe70 	bl	800b628 <USBD_GetString>
 800e948:	e004      	b.n	800e954 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e94a:	683a      	ldr	r2, [r7, #0]
 800e94c:	4904      	ldr	r1, [pc, #16]	; (800e960 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e94e:	4805      	ldr	r0, [pc, #20]	; (800e964 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e950:	f7fc fe6a 	bl	800b628 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e954:	4b02      	ldr	r3, [pc, #8]	; (800e960 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e956:	4618      	mov	r0, r3
 800e958:	3708      	adds	r7, #8
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	20005f3c 	.word	0x20005f3c
 800e964:	0800fae4 	.word	0x0800fae4

0800e968 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b084      	sub	sp, #16
 800e96c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e96e:	4b0f      	ldr	r3, [pc, #60]	; (800e9ac <Get_SerialNum+0x44>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e974:	4b0e      	ldr	r3, [pc, #56]	; (800e9b0 <Get_SerialNum+0x48>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e97a:	4b0e      	ldr	r3, [pc, #56]	; (800e9b4 <Get_SerialNum+0x4c>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e980:	68fa      	ldr	r2, [r7, #12]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4413      	add	r3, r2
 800e986:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d009      	beq.n	800e9a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e98e:	2208      	movs	r2, #8
 800e990:	4909      	ldr	r1, [pc, #36]	; (800e9b8 <Get_SerialNum+0x50>)
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f000 f814 	bl	800e9c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e998:	2204      	movs	r2, #4
 800e99a:	4908      	ldr	r1, [pc, #32]	; (800e9bc <Get_SerialNum+0x54>)
 800e99c:	68b8      	ldr	r0, [r7, #8]
 800e99e:	f000 f80f 	bl	800e9c0 <IntToUnicode>
  }
}
 800e9a2:	bf00      	nop
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	1fff7a10 	.word	0x1fff7a10
 800e9b0:	1fff7a14 	.word	0x1fff7a14
 800e9b4:	1fff7a18 	.word	0x1fff7a18
 800e9b8:	20000162 	.word	0x20000162
 800e9bc:	20000172 	.word	0x20000172

0800e9c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b087      	sub	sp, #28
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	60f8      	str	r0, [r7, #12]
 800e9c8:	60b9      	str	r1, [r7, #8]
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	75fb      	strb	r3, [r7, #23]
 800e9d6:	e027      	b.n	800ea28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	0f1b      	lsrs	r3, r3, #28
 800e9dc:	2b09      	cmp	r3, #9
 800e9de:	d80b      	bhi.n	800e9f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	0f1b      	lsrs	r3, r3, #28
 800e9e4:	b2da      	uxtb	r2, r3
 800e9e6:	7dfb      	ldrb	r3, [r7, #23]
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	440b      	add	r3, r1
 800e9f0:	3230      	adds	r2, #48	; 0x30
 800e9f2:	b2d2      	uxtb	r2, r2
 800e9f4:	701a      	strb	r2, [r3, #0]
 800e9f6:	e00a      	b.n	800ea0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	0f1b      	lsrs	r3, r3, #28
 800e9fc:	b2da      	uxtb	r2, r3
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ea00:	005b      	lsls	r3, r3, #1
 800ea02:	4619      	mov	r1, r3
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	440b      	add	r3, r1
 800ea08:	3237      	adds	r2, #55	; 0x37
 800ea0a:	b2d2      	uxtb	r2, r2
 800ea0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	011b      	lsls	r3, r3, #4
 800ea12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
 800ea16:	005b      	lsls	r3, r3, #1
 800ea18:	3301      	adds	r3, #1
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	2200      	movs	r2, #0
 800ea20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ea22:	7dfb      	ldrb	r3, [r7, #23]
 800ea24:	3301      	adds	r3, #1
 800ea26:	75fb      	strb	r3, [r7, #23]
 800ea28:	7dfa      	ldrb	r2, [r7, #23]
 800ea2a:	79fb      	ldrb	r3, [r7, #7]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d3d3      	bcc.n	800e9d8 <IntToUnicode+0x18>
  }
}
 800ea30:	bf00      	nop
 800ea32:	bf00      	nop
 800ea34:	371c      	adds	r7, #28
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr
	...

0800ea40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08a      	sub	sp, #40	; 0x28
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ea48:	f107 0314 	add.w	r3, r7, #20
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	601a      	str	r2, [r3, #0]
 800ea50:	605a      	str	r2, [r3, #4]
 800ea52:	609a      	str	r2, [r3, #8]
 800ea54:	60da      	str	r2, [r3, #12]
 800ea56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4a1d      	ldr	r2, [pc, #116]	; (800ead4 <HAL_PCD_MspInit+0x94>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d134      	bne.n	800eacc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ea62:	2300      	movs	r3, #0
 800ea64:	613b      	str	r3, [r7, #16]
 800ea66:	4b1c      	ldr	r3, [pc, #112]	; (800ead8 <HAL_PCD_MspInit+0x98>)
 800ea68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea6a:	4a1b      	ldr	r2, [pc, #108]	; (800ead8 <HAL_PCD_MspInit+0x98>)
 800ea6c:	f043 0302 	orr.w	r3, r3, #2
 800ea70:	6313      	str	r3, [r2, #48]	; 0x30
 800ea72:	4b19      	ldr	r3, [pc, #100]	; (800ead8 <HAL_PCD_MspInit+0x98>)
 800ea74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea76:	f003 0302 	and.w	r3, r3, #2
 800ea7a:	613b      	str	r3, [r7, #16]
 800ea7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800ea7e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ea82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea84:	2302      	movs	r3, #2
 800ea86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ea8c:	2303      	movs	r3, #3
 800ea8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ea90:	230c      	movs	r3, #12
 800ea92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ea94:	f107 0314 	add.w	r3, r7, #20
 800ea98:	4619      	mov	r1, r3
 800ea9a:	4810      	ldr	r0, [pc, #64]	; (800eadc <HAL_PCD_MspInit+0x9c>)
 800ea9c:	f7f5 faa6 	bl	8003fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	60fb      	str	r3, [r7, #12]
 800eaa4:	4b0c      	ldr	r3, [pc, #48]	; (800ead8 <HAL_PCD_MspInit+0x98>)
 800eaa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaa8:	4a0b      	ldr	r2, [pc, #44]	; (800ead8 <HAL_PCD_MspInit+0x98>)
 800eaaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800eaae:	6313      	str	r3, [r2, #48]	; 0x30
 800eab0:	4b09      	ldr	r3, [pc, #36]	; (800ead8 <HAL_PCD_MspInit+0x98>)
 800eab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eab8:	60fb      	str	r3, [r7, #12]
 800eaba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800eabc:	2200      	movs	r2, #0
 800eabe:	2105      	movs	r1, #5
 800eac0:	204d      	movs	r0, #77	; 0x4d
 800eac2:	f7f4 fe15 	bl	80036f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800eac6:	204d      	movs	r0, #77	; 0x4d
 800eac8:	f7f4 fe2e 	bl	8003728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800eacc:	bf00      	nop
 800eace:	3728      	adds	r7, #40	; 0x28
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	40040000 	.word	0x40040000
 800ead8:	40023800 	.word	0x40023800
 800eadc:	40020400 	.word	0x40020400

0800eae0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	4610      	mov	r0, r2
 800eaf8:	f7fb fc37 	bl	800a36a <USBD_LL_SetupStage>
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eb16:	78fa      	ldrb	r2, [r7, #3]
 800eb18:	6879      	ldr	r1, [r7, #4]
 800eb1a:	4613      	mov	r3, r2
 800eb1c:	00db      	lsls	r3, r3, #3
 800eb1e:	4413      	add	r3, r2
 800eb20:	009b      	lsls	r3, r3, #2
 800eb22:	440b      	add	r3, r1
 800eb24:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	78fb      	ldrb	r3, [r7, #3]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	f7fb fc71 	bl	800a414 <USBD_LL_DataOutStage>
}
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
 800eb42:	460b      	mov	r3, r1
 800eb44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eb4c:	78fa      	ldrb	r2, [r7, #3]
 800eb4e:	6879      	ldr	r1, [r7, #4]
 800eb50:	4613      	mov	r3, r2
 800eb52:	00db      	lsls	r3, r3, #3
 800eb54:	4413      	add	r3, r2
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	440b      	add	r3, r1
 800eb5a:	334c      	adds	r3, #76	; 0x4c
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	78fb      	ldrb	r3, [r7, #3]
 800eb60:	4619      	mov	r1, r3
 800eb62:	f7fb fd0a 	bl	800a57a <USBD_LL_DataInStage>
}
 800eb66:	bf00      	nop
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b082      	sub	sp, #8
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f7fb fe3e 	bl	800a7fe <USBD_LL_SOF>
}
 800eb82:	bf00      	nop
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb92:	2301      	movs	r3, #1
 800eb94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d102      	bne.n	800eba4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	73fb      	strb	r3, [r7, #15]
 800eba2:	e008      	b.n	800ebb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d102      	bne.n	800ebb2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ebac:	2301      	movs	r3, #1
 800ebae:	73fb      	strb	r3, [r7, #15]
 800ebb0:	e001      	b.n	800ebb6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ebb2:	f7f2 fd47 	bl	8001644 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebbc:	7bfa      	ldrb	r2, [r7, #15]
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fb fdde 	bl	800a782 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fb fd86 	bl	800a6de <USBD_LL_Reset>
}
 800ebd2:	bf00      	nop
 800ebd4:	3710      	adds	r7, #16
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
	...

0800ebdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fb fdd9 	bl	800a7a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	6812      	ldr	r2, [r2, #0]
 800ebfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec02:	f043 0301 	orr.w	r3, r3, #1
 800ec06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6a1b      	ldr	r3, [r3, #32]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d005      	beq.n	800ec1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ec10:	4b04      	ldr	r3, [pc, #16]	; (800ec24 <HAL_PCD_SuspendCallback+0x48>)
 800ec12:	691b      	ldr	r3, [r3, #16]
 800ec14:	4a03      	ldr	r2, [pc, #12]	; (800ec24 <HAL_PCD_SuspendCallback+0x48>)
 800ec16:	f043 0306 	orr.w	r3, r3, #6
 800ec1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ec1c:	bf00      	nop
 800ec1e:	3708      	adds	r7, #8
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}
 800ec24:	e000ed00 	.word	0xe000ed00

0800ec28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fb fdc9 	bl	800a7ce <USBD_LL_Resume>
}
 800ec3c:	bf00      	nop
 800ec3e:	3708      	adds	r7, #8
 800ec40:	46bd      	mov	sp, r7
 800ec42:	bd80      	pop	{r7, pc}

0800ec44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec56:	78fa      	ldrb	r2, [r7, #3]
 800ec58:	4611      	mov	r1, r2
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fb fe21 	bl	800a8a2 <USBD_LL_IsoOUTIncomplete>
}
 800ec60:	bf00      	nop
 800ec62:	3708      	adds	r7, #8
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	460b      	mov	r3, r1
 800ec72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec7a:	78fa      	ldrb	r2, [r7, #3]
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	4618      	mov	r0, r3
 800ec80:	f7fb fddd 	bl	800a83e <USBD_LL_IsoINIncomplete>
}
 800ec84:	bf00      	nop
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7fb fe33 	bl	800a906 <USBD_LL_DevConnected>
}
 800eca0:	bf00      	nop
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fb fe30 	bl	800a91c <USBD_LL_DevDisconnected>
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d140      	bne.n	800ed56 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ecd4:	4a22      	ldr	r2, [pc, #136]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a20      	ldr	r2, [pc, #128]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ece0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ece4:	4b1e      	ldr	r3, [pc, #120]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ece6:	4a1f      	ldr	r2, [pc, #124]	; (800ed64 <USBD_LL_Init+0xa0>)
 800ece8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800ecea:	4b1d      	ldr	r3, [pc, #116]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ecec:	2206      	movs	r2, #6
 800ecee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800ecf0:	4b1b      	ldr	r3, [pc, #108]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ecf6:	4b1a      	ldr	r3, [pc, #104]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ecfc:	4b18      	ldr	r3, [pc, #96]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ecfe:	2202      	movs	r2, #2
 800ed00:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ed02:	4b17      	ldr	r3, [pc, #92]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed04:	2200      	movs	r2, #0
 800ed06:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ed08:	4b15      	ldr	r3, [pc, #84]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ed0e:	4b14      	ldr	r3, [pc, #80]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed10:	2200      	movs	r2, #0
 800ed12:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ed14:	4b12      	ldr	r3, [pc, #72]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed16:	2200      	movs	r2, #0
 800ed18:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ed1a:	4b11      	ldr	r3, [pc, #68]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ed20:	4b0f      	ldr	r3, [pc, #60]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed22:	2200      	movs	r2, #0
 800ed24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ed26:	480e      	ldr	r0, [pc, #56]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed28:	f7f5 fdff 	bl	800492a <HAL_PCD_Init>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d001      	beq.n	800ed36 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ed32:	f7f2 fc87 	bl	8001644 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ed36:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ed3a:	4809      	ldr	r0, [pc, #36]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed3c:	f7f7 f855 	bl	8005dea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800ed40:	2280      	movs	r2, #128	; 0x80
 800ed42:	2100      	movs	r1, #0
 800ed44:	4806      	ldr	r0, [pc, #24]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed46:	f7f7 f809 	bl	8005d5c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ed4a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800ed4e:	2101      	movs	r1, #1
 800ed50:	4803      	ldr	r0, [pc, #12]	; (800ed60 <USBD_LL_Init+0x9c>)
 800ed52:	f7f7 f803 	bl	8005d5c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ed56:	2300      	movs	r3, #0
}
 800ed58:	4618      	mov	r0, r3
 800ed5a:	3708      	adds	r7, #8
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd80      	pop	{r7, pc}
 800ed60:	2000613c 	.word	0x2000613c
 800ed64:	40040000 	.word	0x40040000

0800ed68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed70:	2300      	movs	r3, #0
 800ed72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed74:	2300      	movs	r3, #0
 800ed76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7f5 fef0 	bl	8004b64 <HAL_PCD_Start>
 800ed84:	4603      	mov	r3, r0
 800ed86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed88:	7bfb      	ldrb	r3, [r7, #15]
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f000 f942 	bl	800f014 <USBD_Get_USB_Status>
 800ed90:	4603      	mov	r3, r0
 800ed92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b084      	sub	sp, #16
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	4608      	mov	r0, r1
 800eda8:	4611      	mov	r1, r2
 800edaa:	461a      	mov	r2, r3
 800edac:	4603      	mov	r3, r0
 800edae:	70fb      	strb	r3, [r7, #3]
 800edb0:	460b      	mov	r3, r1
 800edb2:	70bb      	strb	r3, [r7, #2]
 800edb4:	4613      	mov	r3, r2
 800edb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edb8:	2300      	movs	r3, #0
 800edba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edbc:	2300      	movs	r3, #0
 800edbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edc6:	78bb      	ldrb	r3, [r7, #2]
 800edc8:	883a      	ldrh	r2, [r7, #0]
 800edca:	78f9      	ldrb	r1, [r7, #3]
 800edcc:	f7f6 fbc1 	bl	8005552 <HAL_PCD_EP_Open>
 800edd0:	4603      	mov	r3, r0
 800edd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edd4:	7bfb      	ldrb	r3, [r7, #15]
 800edd6:	4618      	mov	r0, r3
 800edd8:	f000 f91c 	bl	800f014 <USBD_Get_USB_Status>
 800eddc:	4603      	mov	r3, r0
 800edde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ede0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3710      	adds	r7, #16
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	b084      	sub	sp, #16
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
 800edf2:	460b      	mov	r3, r1
 800edf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edfa:	2300      	movs	r3, #0
 800edfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee04:	78fa      	ldrb	r2, [r7, #3]
 800ee06:	4611      	mov	r1, r2
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7f6 fc0a 	bl	8005622 <HAL_PCD_EP_Close>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f000 f8fd 	bl	800f014 <USBD_Get_USB_Status>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	460b      	mov	r3, r1
 800ee32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee34:	2300      	movs	r3, #0
 800ee36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee42:	78fa      	ldrb	r2, [r7, #3]
 800ee44:	4611      	mov	r1, r2
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7f6 fce2 	bl	8005810 <HAL_PCD_EP_SetStall>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
 800ee52:	4618      	mov	r0, r3
 800ee54:	f000 f8de 	bl	800f014 <USBD_Get_USB_Status>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}

0800ee66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b084      	sub	sp, #16
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
 800ee6e:	460b      	mov	r3, r1
 800ee70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee72:	2300      	movs	r3, #0
 800ee74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee76:	2300      	movs	r3, #0
 800ee78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee80:	78fa      	ldrb	r2, [r7, #3]
 800ee82:	4611      	mov	r1, r2
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7f6 fd27 	bl	80058d8 <HAL_PCD_EP_ClrStall>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee8e:	7bfb      	ldrb	r3, [r7, #15]
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 f8bf 	bl	800f014 <USBD_Get_USB_Status>
 800ee96:	4603      	mov	r3, r0
 800ee98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	3710      	adds	r7, #16
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eea4:	b480      	push	{r7}
 800eea6:	b085      	sub	sp, #20
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
 800eeac:	460b      	mov	r3, r1
 800eeae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eeb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eeb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	da0b      	bge.n	800eed8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800eec0:	78fb      	ldrb	r3, [r7, #3]
 800eec2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eec6:	68f9      	ldr	r1, [r7, #12]
 800eec8:	4613      	mov	r3, r2
 800eeca:	00db      	lsls	r3, r3, #3
 800eecc:	4413      	add	r3, r2
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	440b      	add	r3, r1
 800eed2:	333e      	adds	r3, #62	; 0x3e
 800eed4:	781b      	ldrb	r3, [r3, #0]
 800eed6:	e00b      	b.n	800eef0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eed8:	78fb      	ldrb	r3, [r7, #3]
 800eeda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eede:	68f9      	ldr	r1, [r7, #12]
 800eee0:	4613      	mov	r3, r2
 800eee2:	00db      	lsls	r3, r3, #3
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	440b      	add	r3, r1
 800eeea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eeee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3714      	adds	r7, #20
 800eef4:	46bd      	mov	sp, r7
 800eef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefa:	4770      	bx	lr

0800eefc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	460b      	mov	r3, r1
 800ef06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ef16:	78fa      	ldrb	r2, [r7, #3]
 800ef18:	4611      	mov	r1, r2
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7f6 faf4 	bl	8005508 <HAL_PCD_SetAddress>
 800ef20:	4603      	mov	r3, r0
 800ef22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef24:	7bfb      	ldrb	r3, [r7, #15]
 800ef26:	4618      	mov	r0, r3
 800ef28:	f000 f874 	bl	800f014 <USBD_Get_USB_Status>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef30:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3710      	adds	r7, #16
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}

0800ef3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef3a:	b580      	push	{r7, lr}
 800ef3c:	b086      	sub	sp, #24
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	60f8      	str	r0, [r7, #12]
 800ef42:	607a      	str	r2, [r7, #4]
 800ef44:	603b      	str	r3, [r7, #0]
 800ef46:	460b      	mov	r3, r1
 800ef48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ef58:	7af9      	ldrb	r1, [r7, #11]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	f7f6 fc0d 	bl	800577c <HAL_PCD_EP_Transmit>
 800ef62:	4603      	mov	r3, r0
 800ef64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef66:	7dfb      	ldrb	r3, [r7, #23]
 800ef68:	4618      	mov	r0, r3
 800ef6a:	f000 f853 	bl	800f014 <USBD_Get_USB_Status>
 800ef6e:	4603      	mov	r3, r0
 800ef70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef72:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3718      	adds	r7, #24
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b086      	sub	sp, #24
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	60f8      	str	r0, [r7, #12]
 800ef84:	607a      	str	r2, [r7, #4]
 800ef86:	603b      	str	r3, [r7, #0]
 800ef88:	460b      	mov	r3, r1
 800ef8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef90:	2300      	movs	r3, #0
 800ef92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ef9a:	7af9      	ldrb	r1, [r7, #11]
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	f7f6 fb89 	bl	80056b6 <HAL_PCD_EP_Receive>
 800efa4:	4603      	mov	r3, r0
 800efa6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efa8:	7dfb      	ldrb	r3, [r7, #23]
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 f832 	bl	800f014 <USBD_Get_USB_Status>
 800efb0:	4603      	mov	r3, r0
 800efb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800efb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}

0800efbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efbe:	b580      	push	{r7, lr}
 800efc0:	b082      	sub	sp, #8
 800efc2:	af00      	add	r7, sp, #0
 800efc4:	6078      	str	r0, [r7, #4]
 800efc6:	460b      	mov	r3, r1
 800efc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800efd0:	78fa      	ldrb	r2, [r7, #3]
 800efd2:	4611      	mov	r1, r2
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7f6 fbb9 	bl	800574c <HAL_PCD_EP_GetRxCount>
 800efda:	4603      	mov	r3, r0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800efec:	4b03      	ldr	r3, [pc, #12]	; (800effc <USBD_static_malloc+0x18>)
}
 800efee:	4618      	mov	r0, r3
 800eff0:	370c      	adds	r7, #12
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
 800effa:	bf00      	nop
 800effc:	20006648 	.word	0x20006648

0800f000 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]

}
 800f008:	bf00      	nop
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f01e:	2300      	movs	r3, #0
 800f020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	2b03      	cmp	r3, #3
 800f026:	d817      	bhi.n	800f058 <USBD_Get_USB_Status+0x44>
 800f028:	a201      	add	r2, pc, #4	; (adr r2, 800f030 <USBD_Get_USB_Status+0x1c>)
 800f02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f02e:	bf00      	nop
 800f030:	0800f041 	.word	0x0800f041
 800f034:	0800f047 	.word	0x0800f047
 800f038:	0800f04d 	.word	0x0800f04d
 800f03c:	0800f053 	.word	0x0800f053
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f040:	2300      	movs	r3, #0
 800f042:	73fb      	strb	r3, [r7, #15]
    break;
 800f044:	e00b      	b.n	800f05e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f046:	2303      	movs	r3, #3
 800f048:	73fb      	strb	r3, [r7, #15]
    break;
 800f04a:	e008      	b.n	800f05e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f04c:	2301      	movs	r3, #1
 800f04e:	73fb      	strb	r3, [r7, #15]
    break;
 800f050:	e005      	b.n	800f05e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f052:	2303      	movs	r3, #3
 800f054:	73fb      	strb	r3, [r7, #15]
    break;
 800f056:	e002      	b.n	800f05e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f058:	2303      	movs	r3, #3
 800f05a:	73fb      	strb	r3, [r7, #15]
    break;
 800f05c:	bf00      	nop
  }
  return usb_status;
 800f05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3714      	adds	r7, #20
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <siprintf>:
 800f06c:	b40e      	push	{r1, r2, r3}
 800f06e:	b500      	push	{lr}
 800f070:	b09c      	sub	sp, #112	; 0x70
 800f072:	ab1d      	add	r3, sp, #116	; 0x74
 800f074:	9002      	str	r0, [sp, #8]
 800f076:	9006      	str	r0, [sp, #24]
 800f078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f07c:	4809      	ldr	r0, [pc, #36]	; (800f0a4 <siprintf+0x38>)
 800f07e:	9107      	str	r1, [sp, #28]
 800f080:	9104      	str	r1, [sp, #16]
 800f082:	4909      	ldr	r1, [pc, #36]	; (800f0a8 <siprintf+0x3c>)
 800f084:	f853 2b04 	ldr.w	r2, [r3], #4
 800f088:	9105      	str	r1, [sp, #20]
 800f08a:	6800      	ldr	r0, [r0, #0]
 800f08c:	9301      	str	r3, [sp, #4]
 800f08e:	a902      	add	r1, sp, #8
 800f090:	f000 f9a0 	bl	800f3d4 <_svfiprintf_r>
 800f094:	9b02      	ldr	r3, [sp, #8]
 800f096:	2200      	movs	r2, #0
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	b01c      	add	sp, #112	; 0x70
 800f09c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0a0:	b003      	add	sp, #12
 800f0a2:	4770      	bx	lr
 800f0a4:	200001c8 	.word	0x200001c8
 800f0a8:	ffff0208 	.word	0xffff0208

0800f0ac <memset>:
 800f0ac:	4402      	add	r2, r0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d100      	bne.n	800f0b6 <memset+0xa>
 800f0b4:	4770      	bx	lr
 800f0b6:	f803 1b01 	strb.w	r1, [r3], #1
 800f0ba:	e7f9      	b.n	800f0b0 <memset+0x4>

0800f0bc <__errno>:
 800f0bc:	4b01      	ldr	r3, [pc, #4]	; (800f0c4 <__errno+0x8>)
 800f0be:	6818      	ldr	r0, [r3, #0]
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop
 800f0c4:	200001c8 	.word	0x200001c8

0800f0c8 <__libc_init_array>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	4d0d      	ldr	r5, [pc, #52]	; (800f100 <__libc_init_array+0x38>)
 800f0cc:	4c0d      	ldr	r4, [pc, #52]	; (800f104 <__libc_init_array+0x3c>)
 800f0ce:	1b64      	subs	r4, r4, r5
 800f0d0:	10a4      	asrs	r4, r4, #2
 800f0d2:	2600      	movs	r6, #0
 800f0d4:	42a6      	cmp	r6, r4
 800f0d6:	d109      	bne.n	800f0ec <__libc_init_array+0x24>
 800f0d8:	4d0b      	ldr	r5, [pc, #44]	; (800f108 <__libc_init_array+0x40>)
 800f0da:	4c0c      	ldr	r4, [pc, #48]	; (800f10c <__libc_init_array+0x44>)
 800f0dc:	f000 fc6a 	bl	800f9b4 <_init>
 800f0e0:	1b64      	subs	r4, r4, r5
 800f0e2:	10a4      	asrs	r4, r4, #2
 800f0e4:	2600      	movs	r6, #0
 800f0e6:	42a6      	cmp	r6, r4
 800f0e8:	d105      	bne.n	800f0f6 <__libc_init_array+0x2e>
 800f0ea:	bd70      	pop	{r4, r5, r6, pc}
 800f0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0f0:	4798      	blx	r3
 800f0f2:	3601      	adds	r6, #1
 800f0f4:	e7ee      	b.n	800f0d4 <__libc_init_array+0xc>
 800f0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0fa:	4798      	blx	r3
 800f0fc:	3601      	adds	r6, #1
 800f0fe:	e7f2      	b.n	800f0e6 <__libc_init_array+0x1e>
 800f100:	08011608 	.word	0x08011608
 800f104:	08011608 	.word	0x08011608
 800f108:	08011608 	.word	0x08011608
 800f10c:	0801160c 	.word	0x0801160c

0800f110 <__retarget_lock_acquire_recursive>:
 800f110:	4770      	bx	lr

0800f112 <__retarget_lock_release_recursive>:
 800f112:	4770      	bx	lr

0800f114 <memcpy>:
 800f114:	440a      	add	r2, r1
 800f116:	4291      	cmp	r1, r2
 800f118:	f100 33ff 	add.w	r3, r0, #4294967295
 800f11c:	d100      	bne.n	800f120 <memcpy+0xc>
 800f11e:	4770      	bx	lr
 800f120:	b510      	push	{r4, lr}
 800f122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f12a:	4291      	cmp	r1, r2
 800f12c:	d1f9      	bne.n	800f122 <memcpy+0xe>
 800f12e:	bd10      	pop	{r4, pc}

0800f130 <_free_r>:
 800f130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f132:	2900      	cmp	r1, #0
 800f134:	d044      	beq.n	800f1c0 <_free_r+0x90>
 800f136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f13a:	9001      	str	r0, [sp, #4]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f1a1 0404 	sub.w	r4, r1, #4
 800f142:	bfb8      	it	lt
 800f144:	18e4      	addlt	r4, r4, r3
 800f146:	f000 f8df 	bl	800f308 <__malloc_lock>
 800f14a:	4a1e      	ldr	r2, [pc, #120]	; (800f1c4 <_free_r+0x94>)
 800f14c:	9801      	ldr	r0, [sp, #4]
 800f14e:	6813      	ldr	r3, [r2, #0]
 800f150:	b933      	cbnz	r3, 800f160 <_free_r+0x30>
 800f152:	6063      	str	r3, [r4, #4]
 800f154:	6014      	str	r4, [r2, #0]
 800f156:	b003      	add	sp, #12
 800f158:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f15c:	f000 b8da 	b.w	800f314 <__malloc_unlock>
 800f160:	42a3      	cmp	r3, r4
 800f162:	d908      	bls.n	800f176 <_free_r+0x46>
 800f164:	6825      	ldr	r5, [r4, #0]
 800f166:	1961      	adds	r1, r4, r5
 800f168:	428b      	cmp	r3, r1
 800f16a:	bf01      	itttt	eq
 800f16c:	6819      	ldreq	r1, [r3, #0]
 800f16e:	685b      	ldreq	r3, [r3, #4]
 800f170:	1949      	addeq	r1, r1, r5
 800f172:	6021      	streq	r1, [r4, #0]
 800f174:	e7ed      	b.n	800f152 <_free_r+0x22>
 800f176:	461a      	mov	r2, r3
 800f178:	685b      	ldr	r3, [r3, #4]
 800f17a:	b10b      	cbz	r3, 800f180 <_free_r+0x50>
 800f17c:	42a3      	cmp	r3, r4
 800f17e:	d9fa      	bls.n	800f176 <_free_r+0x46>
 800f180:	6811      	ldr	r1, [r2, #0]
 800f182:	1855      	adds	r5, r2, r1
 800f184:	42a5      	cmp	r5, r4
 800f186:	d10b      	bne.n	800f1a0 <_free_r+0x70>
 800f188:	6824      	ldr	r4, [r4, #0]
 800f18a:	4421      	add	r1, r4
 800f18c:	1854      	adds	r4, r2, r1
 800f18e:	42a3      	cmp	r3, r4
 800f190:	6011      	str	r1, [r2, #0]
 800f192:	d1e0      	bne.n	800f156 <_free_r+0x26>
 800f194:	681c      	ldr	r4, [r3, #0]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	6053      	str	r3, [r2, #4]
 800f19a:	440c      	add	r4, r1
 800f19c:	6014      	str	r4, [r2, #0]
 800f19e:	e7da      	b.n	800f156 <_free_r+0x26>
 800f1a0:	d902      	bls.n	800f1a8 <_free_r+0x78>
 800f1a2:	230c      	movs	r3, #12
 800f1a4:	6003      	str	r3, [r0, #0]
 800f1a6:	e7d6      	b.n	800f156 <_free_r+0x26>
 800f1a8:	6825      	ldr	r5, [r4, #0]
 800f1aa:	1961      	adds	r1, r4, r5
 800f1ac:	428b      	cmp	r3, r1
 800f1ae:	bf04      	itt	eq
 800f1b0:	6819      	ldreq	r1, [r3, #0]
 800f1b2:	685b      	ldreq	r3, [r3, #4]
 800f1b4:	6063      	str	r3, [r4, #4]
 800f1b6:	bf04      	itt	eq
 800f1b8:	1949      	addeq	r1, r1, r5
 800f1ba:	6021      	streq	r1, [r4, #0]
 800f1bc:	6054      	str	r4, [r2, #4]
 800f1be:	e7ca      	b.n	800f156 <_free_r+0x26>
 800f1c0:	b003      	add	sp, #12
 800f1c2:	bd30      	pop	{r4, r5, pc}
 800f1c4:	200069a8 	.word	0x200069a8

0800f1c8 <sbrk_aligned>:
 800f1c8:	b570      	push	{r4, r5, r6, lr}
 800f1ca:	4e0e      	ldr	r6, [pc, #56]	; (800f204 <sbrk_aligned+0x3c>)
 800f1cc:	460c      	mov	r4, r1
 800f1ce:	6831      	ldr	r1, [r6, #0]
 800f1d0:	4605      	mov	r5, r0
 800f1d2:	b911      	cbnz	r1, 800f1da <sbrk_aligned+0x12>
 800f1d4:	f000 fba6 	bl	800f924 <_sbrk_r>
 800f1d8:	6030      	str	r0, [r6, #0]
 800f1da:	4621      	mov	r1, r4
 800f1dc:	4628      	mov	r0, r5
 800f1de:	f000 fba1 	bl	800f924 <_sbrk_r>
 800f1e2:	1c43      	adds	r3, r0, #1
 800f1e4:	d00a      	beq.n	800f1fc <sbrk_aligned+0x34>
 800f1e6:	1cc4      	adds	r4, r0, #3
 800f1e8:	f024 0403 	bic.w	r4, r4, #3
 800f1ec:	42a0      	cmp	r0, r4
 800f1ee:	d007      	beq.n	800f200 <sbrk_aligned+0x38>
 800f1f0:	1a21      	subs	r1, r4, r0
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f000 fb96 	bl	800f924 <_sbrk_r>
 800f1f8:	3001      	adds	r0, #1
 800f1fa:	d101      	bne.n	800f200 <sbrk_aligned+0x38>
 800f1fc:	f04f 34ff 	mov.w	r4, #4294967295
 800f200:	4620      	mov	r0, r4
 800f202:	bd70      	pop	{r4, r5, r6, pc}
 800f204:	200069ac 	.word	0x200069ac

0800f208 <_malloc_r>:
 800f208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f20c:	1ccd      	adds	r5, r1, #3
 800f20e:	f025 0503 	bic.w	r5, r5, #3
 800f212:	3508      	adds	r5, #8
 800f214:	2d0c      	cmp	r5, #12
 800f216:	bf38      	it	cc
 800f218:	250c      	movcc	r5, #12
 800f21a:	2d00      	cmp	r5, #0
 800f21c:	4607      	mov	r7, r0
 800f21e:	db01      	blt.n	800f224 <_malloc_r+0x1c>
 800f220:	42a9      	cmp	r1, r5
 800f222:	d905      	bls.n	800f230 <_malloc_r+0x28>
 800f224:	230c      	movs	r3, #12
 800f226:	603b      	str	r3, [r7, #0]
 800f228:	2600      	movs	r6, #0
 800f22a:	4630      	mov	r0, r6
 800f22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f304 <_malloc_r+0xfc>
 800f234:	f000 f868 	bl	800f308 <__malloc_lock>
 800f238:	f8d8 3000 	ldr.w	r3, [r8]
 800f23c:	461c      	mov	r4, r3
 800f23e:	bb5c      	cbnz	r4, 800f298 <_malloc_r+0x90>
 800f240:	4629      	mov	r1, r5
 800f242:	4638      	mov	r0, r7
 800f244:	f7ff ffc0 	bl	800f1c8 <sbrk_aligned>
 800f248:	1c43      	adds	r3, r0, #1
 800f24a:	4604      	mov	r4, r0
 800f24c:	d155      	bne.n	800f2fa <_malloc_r+0xf2>
 800f24e:	f8d8 4000 	ldr.w	r4, [r8]
 800f252:	4626      	mov	r6, r4
 800f254:	2e00      	cmp	r6, #0
 800f256:	d145      	bne.n	800f2e4 <_malloc_r+0xdc>
 800f258:	2c00      	cmp	r4, #0
 800f25a:	d048      	beq.n	800f2ee <_malloc_r+0xe6>
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	4631      	mov	r1, r6
 800f260:	4638      	mov	r0, r7
 800f262:	eb04 0903 	add.w	r9, r4, r3
 800f266:	f000 fb5d 	bl	800f924 <_sbrk_r>
 800f26a:	4581      	cmp	r9, r0
 800f26c:	d13f      	bne.n	800f2ee <_malloc_r+0xe6>
 800f26e:	6821      	ldr	r1, [r4, #0]
 800f270:	1a6d      	subs	r5, r5, r1
 800f272:	4629      	mov	r1, r5
 800f274:	4638      	mov	r0, r7
 800f276:	f7ff ffa7 	bl	800f1c8 <sbrk_aligned>
 800f27a:	3001      	adds	r0, #1
 800f27c:	d037      	beq.n	800f2ee <_malloc_r+0xe6>
 800f27e:	6823      	ldr	r3, [r4, #0]
 800f280:	442b      	add	r3, r5
 800f282:	6023      	str	r3, [r4, #0]
 800f284:	f8d8 3000 	ldr.w	r3, [r8]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d038      	beq.n	800f2fe <_malloc_r+0xf6>
 800f28c:	685a      	ldr	r2, [r3, #4]
 800f28e:	42a2      	cmp	r2, r4
 800f290:	d12b      	bne.n	800f2ea <_malloc_r+0xe2>
 800f292:	2200      	movs	r2, #0
 800f294:	605a      	str	r2, [r3, #4]
 800f296:	e00f      	b.n	800f2b8 <_malloc_r+0xb0>
 800f298:	6822      	ldr	r2, [r4, #0]
 800f29a:	1b52      	subs	r2, r2, r5
 800f29c:	d41f      	bmi.n	800f2de <_malloc_r+0xd6>
 800f29e:	2a0b      	cmp	r2, #11
 800f2a0:	d917      	bls.n	800f2d2 <_malloc_r+0xca>
 800f2a2:	1961      	adds	r1, r4, r5
 800f2a4:	42a3      	cmp	r3, r4
 800f2a6:	6025      	str	r5, [r4, #0]
 800f2a8:	bf18      	it	ne
 800f2aa:	6059      	strne	r1, [r3, #4]
 800f2ac:	6863      	ldr	r3, [r4, #4]
 800f2ae:	bf08      	it	eq
 800f2b0:	f8c8 1000 	streq.w	r1, [r8]
 800f2b4:	5162      	str	r2, [r4, r5]
 800f2b6:	604b      	str	r3, [r1, #4]
 800f2b8:	4638      	mov	r0, r7
 800f2ba:	f104 060b 	add.w	r6, r4, #11
 800f2be:	f000 f829 	bl	800f314 <__malloc_unlock>
 800f2c2:	f026 0607 	bic.w	r6, r6, #7
 800f2c6:	1d23      	adds	r3, r4, #4
 800f2c8:	1af2      	subs	r2, r6, r3
 800f2ca:	d0ae      	beq.n	800f22a <_malloc_r+0x22>
 800f2cc:	1b9b      	subs	r3, r3, r6
 800f2ce:	50a3      	str	r3, [r4, r2]
 800f2d0:	e7ab      	b.n	800f22a <_malloc_r+0x22>
 800f2d2:	42a3      	cmp	r3, r4
 800f2d4:	6862      	ldr	r2, [r4, #4]
 800f2d6:	d1dd      	bne.n	800f294 <_malloc_r+0x8c>
 800f2d8:	f8c8 2000 	str.w	r2, [r8]
 800f2dc:	e7ec      	b.n	800f2b8 <_malloc_r+0xb0>
 800f2de:	4623      	mov	r3, r4
 800f2e0:	6864      	ldr	r4, [r4, #4]
 800f2e2:	e7ac      	b.n	800f23e <_malloc_r+0x36>
 800f2e4:	4634      	mov	r4, r6
 800f2e6:	6876      	ldr	r6, [r6, #4]
 800f2e8:	e7b4      	b.n	800f254 <_malloc_r+0x4c>
 800f2ea:	4613      	mov	r3, r2
 800f2ec:	e7cc      	b.n	800f288 <_malloc_r+0x80>
 800f2ee:	230c      	movs	r3, #12
 800f2f0:	603b      	str	r3, [r7, #0]
 800f2f2:	4638      	mov	r0, r7
 800f2f4:	f000 f80e 	bl	800f314 <__malloc_unlock>
 800f2f8:	e797      	b.n	800f22a <_malloc_r+0x22>
 800f2fa:	6025      	str	r5, [r4, #0]
 800f2fc:	e7dc      	b.n	800f2b8 <_malloc_r+0xb0>
 800f2fe:	605b      	str	r3, [r3, #4]
 800f300:	deff      	udf	#255	; 0xff
 800f302:	bf00      	nop
 800f304:	200069a8 	.word	0x200069a8

0800f308 <__malloc_lock>:
 800f308:	4801      	ldr	r0, [pc, #4]	; (800f310 <__malloc_lock+0x8>)
 800f30a:	f7ff bf01 	b.w	800f110 <__retarget_lock_acquire_recursive>
 800f30e:	bf00      	nop
 800f310:	200069a4 	.word	0x200069a4

0800f314 <__malloc_unlock>:
 800f314:	4801      	ldr	r0, [pc, #4]	; (800f31c <__malloc_unlock+0x8>)
 800f316:	f7ff befc 	b.w	800f112 <__retarget_lock_release_recursive>
 800f31a:	bf00      	nop
 800f31c:	200069a4 	.word	0x200069a4

0800f320 <__ssputs_r>:
 800f320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f324:	688e      	ldr	r6, [r1, #8]
 800f326:	461f      	mov	r7, r3
 800f328:	42be      	cmp	r6, r7
 800f32a:	680b      	ldr	r3, [r1, #0]
 800f32c:	4682      	mov	sl, r0
 800f32e:	460c      	mov	r4, r1
 800f330:	4690      	mov	r8, r2
 800f332:	d82c      	bhi.n	800f38e <__ssputs_r+0x6e>
 800f334:	898a      	ldrh	r2, [r1, #12]
 800f336:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f33a:	d026      	beq.n	800f38a <__ssputs_r+0x6a>
 800f33c:	6965      	ldr	r5, [r4, #20]
 800f33e:	6909      	ldr	r1, [r1, #16]
 800f340:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f344:	eba3 0901 	sub.w	r9, r3, r1
 800f348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f34c:	1c7b      	adds	r3, r7, #1
 800f34e:	444b      	add	r3, r9
 800f350:	106d      	asrs	r5, r5, #1
 800f352:	429d      	cmp	r5, r3
 800f354:	bf38      	it	cc
 800f356:	461d      	movcc	r5, r3
 800f358:	0553      	lsls	r3, r2, #21
 800f35a:	d527      	bpl.n	800f3ac <__ssputs_r+0x8c>
 800f35c:	4629      	mov	r1, r5
 800f35e:	f7ff ff53 	bl	800f208 <_malloc_r>
 800f362:	4606      	mov	r6, r0
 800f364:	b360      	cbz	r0, 800f3c0 <__ssputs_r+0xa0>
 800f366:	6921      	ldr	r1, [r4, #16]
 800f368:	464a      	mov	r2, r9
 800f36a:	f7ff fed3 	bl	800f114 <memcpy>
 800f36e:	89a3      	ldrh	r3, [r4, #12]
 800f370:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f378:	81a3      	strh	r3, [r4, #12]
 800f37a:	6126      	str	r6, [r4, #16]
 800f37c:	6165      	str	r5, [r4, #20]
 800f37e:	444e      	add	r6, r9
 800f380:	eba5 0509 	sub.w	r5, r5, r9
 800f384:	6026      	str	r6, [r4, #0]
 800f386:	60a5      	str	r5, [r4, #8]
 800f388:	463e      	mov	r6, r7
 800f38a:	42be      	cmp	r6, r7
 800f38c:	d900      	bls.n	800f390 <__ssputs_r+0x70>
 800f38e:	463e      	mov	r6, r7
 800f390:	6820      	ldr	r0, [r4, #0]
 800f392:	4632      	mov	r2, r6
 800f394:	4641      	mov	r1, r8
 800f396:	f000 faab 	bl	800f8f0 <memmove>
 800f39a:	68a3      	ldr	r3, [r4, #8]
 800f39c:	1b9b      	subs	r3, r3, r6
 800f39e:	60a3      	str	r3, [r4, #8]
 800f3a0:	6823      	ldr	r3, [r4, #0]
 800f3a2:	4433      	add	r3, r6
 800f3a4:	6023      	str	r3, [r4, #0]
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ac:	462a      	mov	r2, r5
 800f3ae:	f000 fac9 	bl	800f944 <_realloc_r>
 800f3b2:	4606      	mov	r6, r0
 800f3b4:	2800      	cmp	r0, #0
 800f3b6:	d1e0      	bne.n	800f37a <__ssputs_r+0x5a>
 800f3b8:	6921      	ldr	r1, [r4, #16]
 800f3ba:	4650      	mov	r0, sl
 800f3bc:	f7ff feb8 	bl	800f130 <_free_r>
 800f3c0:	230c      	movs	r3, #12
 800f3c2:	f8ca 3000 	str.w	r3, [sl]
 800f3c6:	89a3      	ldrh	r3, [r4, #12]
 800f3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3cc:	81a3      	strh	r3, [r4, #12]
 800f3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d2:	e7e9      	b.n	800f3a8 <__ssputs_r+0x88>

0800f3d4 <_svfiprintf_r>:
 800f3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d8:	4698      	mov	r8, r3
 800f3da:	898b      	ldrh	r3, [r1, #12]
 800f3dc:	061b      	lsls	r3, r3, #24
 800f3de:	b09d      	sub	sp, #116	; 0x74
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	460d      	mov	r5, r1
 800f3e4:	4614      	mov	r4, r2
 800f3e6:	d50e      	bpl.n	800f406 <_svfiprintf_r+0x32>
 800f3e8:	690b      	ldr	r3, [r1, #16]
 800f3ea:	b963      	cbnz	r3, 800f406 <_svfiprintf_r+0x32>
 800f3ec:	2140      	movs	r1, #64	; 0x40
 800f3ee:	f7ff ff0b 	bl	800f208 <_malloc_r>
 800f3f2:	6028      	str	r0, [r5, #0]
 800f3f4:	6128      	str	r0, [r5, #16]
 800f3f6:	b920      	cbnz	r0, 800f402 <_svfiprintf_r+0x2e>
 800f3f8:	230c      	movs	r3, #12
 800f3fa:	603b      	str	r3, [r7, #0]
 800f3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f400:	e0d0      	b.n	800f5a4 <_svfiprintf_r+0x1d0>
 800f402:	2340      	movs	r3, #64	; 0x40
 800f404:	616b      	str	r3, [r5, #20]
 800f406:	2300      	movs	r3, #0
 800f408:	9309      	str	r3, [sp, #36]	; 0x24
 800f40a:	2320      	movs	r3, #32
 800f40c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f410:	f8cd 800c 	str.w	r8, [sp, #12]
 800f414:	2330      	movs	r3, #48	; 0x30
 800f416:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f5bc <_svfiprintf_r+0x1e8>
 800f41a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f41e:	f04f 0901 	mov.w	r9, #1
 800f422:	4623      	mov	r3, r4
 800f424:	469a      	mov	sl, r3
 800f426:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f42a:	b10a      	cbz	r2, 800f430 <_svfiprintf_r+0x5c>
 800f42c:	2a25      	cmp	r2, #37	; 0x25
 800f42e:	d1f9      	bne.n	800f424 <_svfiprintf_r+0x50>
 800f430:	ebba 0b04 	subs.w	fp, sl, r4
 800f434:	d00b      	beq.n	800f44e <_svfiprintf_r+0x7a>
 800f436:	465b      	mov	r3, fp
 800f438:	4622      	mov	r2, r4
 800f43a:	4629      	mov	r1, r5
 800f43c:	4638      	mov	r0, r7
 800f43e:	f7ff ff6f 	bl	800f320 <__ssputs_r>
 800f442:	3001      	adds	r0, #1
 800f444:	f000 80a9 	beq.w	800f59a <_svfiprintf_r+0x1c6>
 800f448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f44a:	445a      	add	r2, fp
 800f44c:	9209      	str	r2, [sp, #36]	; 0x24
 800f44e:	f89a 3000 	ldrb.w	r3, [sl]
 800f452:	2b00      	cmp	r3, #0
 800f454:	f000 80a1 	beq.w	800f59a <_svfiprintf_r+0x1c6>
 800f458:	2300      	movs	r3, #0
 800f45a:	f04f 32ff 	mov.w	r2, #4294967295
 800f45e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f462:	f10a 0a01 	add.w	sl, sl, #1
 800f466:	9304      	str	r3, [sp, #16]
 800f468:	9307      	str	r3, [sp, #28]
 800f46a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f46e:	931a      	str	r3, [sp, #104]	; 0x68
 800f470:	4654      	mov	r4, sl
 800f472:	2205      	movs	r2, #5
 800f474:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f478:	4850      	ldr	r0, [pc, #320]	; (800f5bc <_svfiprintf_r+0x1e8>)
 800f47a:	f7f0 fec1 	bl	8000200 <memchr>
 800f47e:	9a04      	ldr	r2, [sp, #16]
 800f480:	b9d8      	cbnz	r0, 800f4ba <_svfiprintf_r+0xe6>
 800f482:	06d0      	lsls	r0, r2, #27
 800f484:	bf44      	itt	mi
 800f486:	2320      	movmi	r3, #32
 800f488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f48c:	0711      	lsls	r1, r2, #28
 800f48e:	bf44      	itt	mi
 800f490:	232b      	movmi	r3, #43	; 0x2b
 800f492:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f496:	f89a 3000 	ldrb.w	r3, [sl]
 800f49a:	2b2a      	cmp	r3, #42	; 0x2a
 800f49c:	d015      	beq.n	800f4ca <_svfiprintf_r+0xf6>
 800f49e:	9a07      	ldr	r2, [sp, #28]
 800f4a0:	4654      	mov	r4, sl
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	f04f 0c0a 	mov.w	ip, #10
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4ae:	3b30      	subs	r3, #48	; 0x30
 800f4b0:	2b09      	cmp	r3, #9
 800f4b2:	d94d      	bls.n	800f550 <_svfiprintf_r+0x17c>
 800f4b4:	b1b0      	cbz	r0, 800f4e4 <_svfiprintf_r+0x110>
 800f4b6:	9207      	str	r2, [sp, #28]
 800f4b8:	e014      	b.n	800f4e4 <_svfiprintf_r+0x110>
 800f4ba:	eba0 0308 	sub.w	r3, r0, r8
 800f4be:	fa09 f303 	lsl.w	r3, r9, r3
 800f4c2:	4313      	orrs	r3, r2
 800f4c4:	9304      	str	r3, [sp, #16]
 800f4c6:	46a2      	mov	sl, r4
 800f4c8:	e7d2      	b.n	800f470 <_svfiprintf_r+0x9c>
 800f4ca:	9b03      	ldr	r3, [sp, #12]
 800f4cc:	1d19      	adds	r1, r3, #4
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	9103      	str	r1, [sp, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	bfbb      	ittet	lt
 800f4d6:	425b      	neglt	r3, r3
 800f4d8:	f042 0202 	orrlt.w	r2, r2, #2
 800f4dc:	9307      	strge	r3, [sp, #28]
 800f4de:	9307      	strlt	r3, [sp, #28]
 800f4e0:	bfb8      	it	lt
 800f4e2:	9204      	strlt	r2, [sp, #16]
 800f4e4:	7823      	ldrb	r3, [r4, #0]
 800f4e6:	2b2e      	cmp	r3, #46	; 0x2e
 800f4e8:	d10c      	bne.n	800f504 <_svfiprintf_r+0x130>
 800f4ea:	7863      	ldrb	r3, [r4, #1]
 800f4ec:	2b2a      	cmp	r3, #42	; 0x2a
 800f4ee:	d134      	bne.n	800f55a <_svfiprintf_r+0x186>
 800f4f0:	9b03      	ldr	r3, [sp, #12]
 800f4f2:	1d1a      	adds	r2, r3, #4
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	9203      	str	r2, [sp, #12]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	bfb8      	it	lt
 800f4fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f500:	3402      	adds	r4, #2
 800f502:	9305      	str	r3, [sp, #20]
 800f504:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f5cc <_svfiprintf_r+0x1f8>
 800f508:	7821      	ldrb	r1, [r4, #0]
 800f50a:	2203      	movs	r2, #3
 800f50c:	4650      	mov	r0, sl
 800f50e:	f7f0 fe77 	bl	8000200 <memchr>
 800f512:	b138      	cbz	r0, 800f524 <_svfiprintf_r+0x150>
 800f514:	9b04      	ldr	r3, [sp, #16]
 800f516:	eba0 000a 	sub.w	r0, r0, sl
 800f51a:	2240      	movs	r2, #64	; 0x40
 800f51c:	4082      	lsls	r2, r0
 800f51e:	4313      	orrs	r3, r2
 800f520:	3401      	adds	r4, #1
 800f522:	9304      	str	r3, [sp, #16]
 800f524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f528:	4825      	ldr	r0, [pc, #148]	; (800f5c0 <_svfiprintf_r+0x1ec>)
 800f52a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f52e:	2206      	movs	r2, #6
 800f530:	f7f0 fe66 	bl	8000200 <memchr>
 800f534:	2800      	cmp	r0, #0
 800f536:	d038      	beq.n	800f5aa <_svfiprintf_r+0x1d6>
 800f538:	4b22      	ldr	r3, [pc, #136]	; (800f5c4 <_svfiprintf_r+0x1f0>)
 800f53a:	bb1b      	cbnz	r3, 800f584 <_svfiprintf_r+0x1b0>
 800f53c:	9b03      	ldr	r3, [sp, #12]
 800f53e:	3307      	adds	r3, #7
 800f540:	f023 0307 	bic.w	r3, r3, #7
 800f544:	3308      	adds	r3, #8
 800f546:	9303      	str	r3, [sp, #12]
 800f548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f54a:	4433      	add	r3, r6
 800f54c:	9309      	str	r3, [sp, #36]	; 0x24
 800f54e:	e768      	b.n	800f422 <_svfiprintf_r+0x4e>
 800f550:	fb0c 3202 	mla	r2, ip, r2, r3
 800f554:	460c      	mov	r4, r1
 800f556:	2001      	movs	r0, #1
 800f558:	e7a6      	b.n	800f4a8 <_svfiprintf_r+0xd4>
 800f55a:	2300      	movs	r3, #0
 800f55c:	3401      	adds	r4, #1
 800f55e:	9305      	str	r3, [sp, #20]
 800f560:	4619      	mov	r1, r3
 800f562:	f04f 0c0a 	mov.w	ip, #10
 800f566:	4620      	mov	r0, r4
 800f568:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f56c:	3a30      	subs	r2, #48	; 0x30
 800f56e:	2a09      	cmp	r2, #9
 800f570:	d903      	bls.n	800f57a <_svfiprintf_r+0x1a6>
 800f572:	2b00      	cmp	r3, #0
 800f574:	d0c6      	beq.n	800f504 <_svfiprintf_r+0x130>
 800f576:	9105      	str	r1, [sp, #20]
 800f578:	e7c4      	b.n	800f504 <_svfiprintf_r+0x130>
 800f57a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f57e:	4604      	mov	r4, r0
 800f580:	2301      	movs	r3, #1
 800f582:	e7f0      	b.n	800f566 <_svfiprintf_r+0x192>
 800f584:	ab03      	add	r3, sp, #12
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	462a      	mov	r2, r5
 800f58a:	4b0f      	ldr	r3, [pc, #60]	; (800f5c8 <_svfiprintf_r+0x1f4>)
 800f58c:	a904      	add	r1, sp, #16
 800f58e:	4638      	mov	r0, r7
 800f590:	f3af 8000 	nop.w
 800f594:	1c42      	adds	r2, r0, #1
 800f596:	4606      	mov	r6, r0
 800f598:	d1d6      	bne.n	800f548 <_svfiprintf_r+0x174>
 800f59a:	89ab      	ldrh	r3, [r5, #12]
 800f59c:	065b      	lsls	r3, r3, #25
 800f59e:	f53f af2d 	bmi.w	800f3fc <_svfiprintf_r+0x28>
 800f5a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f5a4:	b01d      	add	sp, #116	; 0x74
 800f5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5aa:	ab03      	add	r3, sp, #12
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	462a      	mov	r2, r5
 800f5b0:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <_svfiprintf_r+0x1f4>)
 800f5b2:	a904      	add	r1, sp, #16
 800f5b4:	4638      	mov	r0, r7
 800f5b6:	f000 f879 	bl	800f6ac <_printf_i>
 800f5ba:	e7eb      	b.n	800f594 <_svfiprintf_r+0x1c0>
 800f5bc:	080115cc 	.word	0x080115cc
 800f5c0:	080115d6 	.word	0x080115d6
 800f5c4:	00000000 	.word	0x00000000
 800f5c8:	0800f321 	.word	0x0800f321
 800f5cc:	080115d2 	.word	0x080115d2

0800f5d0 <_printf_common>:
 800f5d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5d4:	4616      	mov	r6, r2
 800f5d6:	4699      	mov	r9, r3
 800f5d8:	688a      	ldr	r2, [r1, #8]
 800f5da:	690b      	ldr	r3, [r1, #16]
 800f5dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	bfb8      	it	lt
 800f5e4:	4613      	movlt	r3, r2
 800f5e6:	6033      	str	r3, [r6, #0]
 800f5e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5ec:	4607      	mov	r7, r0
 800f5ee:	460c      	mov	r4, r1
 800f5f0:	b10a      	cbz	r2, 800f5f6 <_printf_common+0x26>
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	6033      	str	r3, [r6, #0]
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	0699      	lsls	r1, r3, #26
 800f5fa:	bf42      	ittt	mi
 800f5fc:	6833      	ldrmi	r3, [r6, #0]
 800f5fe:	3302      	addmi	r3, #2
 800f600:	6033      	strmi	r3, [r6, #0]
 800f602:	6825      	ldr	r5, [r4, #0]
 800f604:	f015 0506 	ands.w	r5, r5, #6
 800f608:	d106      	bne.n	800f618 <_printf_common+0x48>
 800f60a:	f104 0a19 	add.w	sl, r4, #25
 800f60e:	68e3      	ldr	r3, [r4, #12]
 800f610:	6832      	ldr	r2, [r6, #0]
 800f612:	1a9b      	subs	r3, r3, r2
 800f614:	42ab      	cmp	r3, r5
 800f616:	dc26      	bgt.n	800f666 <_printf_common+0x96>
 800f618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f61c:	1e13      	subs	r3, r2, #0
 800f61e:	6822      	ldr	r2, [r4, #0]
 800f620:	bf18      	it	ne
 800f622:	2301      	movne	r3, #1
 800f624:	0692      	lsls	r2, r2, #26
 800f626:	d42b      	bmi.n	800f680 <_printf_common+0xb0>
 800f628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f62c:	4649      	mov	r1, r9
 800f62e:	4638      	mov	r0, r7
 800f630:	47c0      	blx	r8
 800f632:	3001      	adds	r0, #1
 800f634:	d01e      	beq.n	800f674 <_printf_common+0xa4>
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	6922      	ldr	r2, [r4, #16]
 800f63a:	f003 0306 	and.w	r3, r3, #6
 800f63e:	2b04      	cmp	r3, #4
 800f640:	bf02      	ittt	eq
 800f642:	68e5      	ldreq	r5, [r4, #12]
 800f644:	6833      	ldreq	r3, [r6, #0]
 800f646:	1aed      	subeq	r5, r5, r3
 800f648:	68a3      	ldr	r3, [r4, #8]
 800f64a:	bf0c      	ite	eq
 800f64c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f650:	2500      	movne	r5, #0
 800f652:	4293      	cmp	r3, r2
 800f654:	bfc4      	itt	gt
 800f656:	1a9b      	subgt	r3, r3, r2
 800f658:	18ed      	addgt	r5, r5, r3
 800f65a:	2600      	movs	r6, #0
 800f65c:	341a      	adds	r4, #26
 800f65e:	42b5      	cmp	r5, r6
 800f660:	d11a      	bne.n	800f698 <_printf_common+0xc8>
 800f662:	2000      	movs	r0, #0
 800f664:	e008      	b.n	800f678 <_printf_common+0xa8>
 800f666:	2301      	movs	r3, #1
 800f668:	4652      	mov	r2, sl
 800f66a:	4649      	mov	r1, r9
 800f66c:	4638      	mov	r0, r7
 800f66e:	47c0      	blx	r8
 800f670:	3001      	adds	r0, #1
 800f672:	d103      	bne.n	800f67c <_printf_common+0xac>
 800f674:	f04f 30ff 	mov.w	r0, #4294967295
 800f678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f67c:	3501      	adds	r5, #1
 800f67e:	e7c6      	b.n	800f60e <_printf_common+0x3e>
 800f680:	18e1      	adds	r1, r4, r3
 800f682:	1c5a      	adds	r2, r3, #1
 800f684:	2030      	movs	r0, #48	; 0x30
 800f686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f68a:	4422      	add	r2, r4
 800f68c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f694:	3302      	adds	r3, #2
 800f696:	e7c7      	b.n	800f628 <_printf_common+0x58>
 800f698:	2301      	movs	r3, #1
 800f69a:	4622      	mov	r2, r4
 800f69c:	4649      	mov	r1, r9
 800f69e:	4638      	mov	r0, r7
 800f6a0:	47c0      	blx	r8
 800f6a2:	3001      	adds	r0, #1
 800f6a4:	d0e6      	beq.n	800f674 <_printf_common+0xa4>
 800f6a6:	3601      	adds	r6, #1
 800f6a8:	e7d9      	b.n	800f65e <_printf_common+0x8e>
	...

0800f6ac <_printf_i>:
 800f6ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b0:	7e0f      	ldrb	r7, [r1, #24]
 800f6b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f6b4:	2f78      	cmp	r7, #120	; 0x78
 800f6b6:	4691      	mov	r9, r2
 800f6b8:	4680      	mov	r8, r0
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	469a      	mov	sl, r3
 800f6be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6c2:	d807      	bhi.n	800f6d4 <_printf_i+0x28>
 800f6c4:	2f62      	cmp	r7, #98	; 0x62
 800f6c6:	d80a      	bhi.n	800f6de <_printf_i+0x32>
 800f6c8:	2f00      	cmp	r7, #0
 800f6ca:	f000 80d4 	beq.w	800f876 <_printf_i+0x1ca>
 800f6ce:	2f58      	cmp	r7, #88	; 0x58
 800f6d0:	f000 80c0 	beq.w	800f854 <_printf_i+0x1a8>
 800f6d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6dc:	e03a      	b.n	800f754 <_printf_i+0xa8>
 800f6de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6e2:	2b15      	cmp	r3, #21
 800f6e4:	d8f6      	bhi.n	800f6d4 <_printf_i+0x28>
 800f6e6:	a101      	add	r1, pc, #4	; (adr r1, 800f6ec <_printf_i+0x40>)
 800f6e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6ec:	0800f745 	.word	0x0800f745
 800f6f0:	0800f759 	.word	0x0800f759
 800f6f4:	0800f6d5 	.word	0x0800f6d5
 800f6f8:	0800f6d5 	.word	0x0800f6d5
 800f6fc:	0800f6d5 	.word	0x0800f6d5
 800f700:	0800f6d5 	.word	0x0800f6d5
 800f704:	0800f759 	.word	0x0800f759
 800f708:	0800f6d5 	.word	0x0800f6d5
 800f70c:	0800f6d5 	.word	0x0800f6d5
 800f710:	0800f6d5 	.word	0x0800f6d5
 800f714:	0800f6d5 	.word	0x0800f6d5
 800f718:	0800f85d 	.word	0x0800f85d
 800f71c:	0800f785 	.word	0x0800f785
 800f720:	0800f817 	.word	0x0800f817
 800f724:	0800f6d5 	.word	0x0800f6d5
 800f728:	0800f6d5 	.word	0x0800f6d5
 800f72c:	0800f87f 	.word	0x0800f87f
 800f730:	0800f6d5 	.word	0x0800f6d5
 800f734:	0800f785 	.word	0x0800f785
 800f738:	0800f6d5 	.word	0x0800f6d5
 800f73c:	0800f6d5 	.word	0x0800f6d5
 800f740:	0800f81f 	.word	0x0800f81f
 800f744:	682b      	ldr	r3, [r5, #0]
 800f746:	1d1a      	adds	r2, r3, #4
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	602a      	str	r2, [r5, #0]
 800f74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f754:	2301      	movs	r3, #1
 800f756:	e09f      	b.n	800f898 <_printf_i+0x1ec>
 800f758:	6820      	ldr	r0, [r4, #0]
 800f75a:	682b      	ldr	r3, [r5, #0]
 800f75c:	0607      	lsls	r7, r0, #24
 800f75e:	f103 0104 	add.w	r1, r3, #4
 800f762:	6029      	str	r1, [r5, #0]
 800f764:	d501      	bpl.n	800f76a <_printf_i+0xbe>
 800f766:	681e      	ldr	r6, [r3, #0]
 800f768:	e003      	b.n	800f772 <_printf_i+0xc6>
 800f76a:	0646      	lsls	r6, r0, #25
 800f76c:	d5fb      	bpl.n	800f766 <_printf_i+0xba>
 800f76e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f772:	2e00      	cmp	r6, #0
 800f774:	da03      	bge.n	800f77e <_printf_i+0xd2>
 800f776:	232d      	movs	r3, #45	; 0x2d
 800f778:	4276      	negs	r6, r6
 800f77a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f77e:	485a      	ldr	r0, [pc, #360]	; (800f8e8 <_printf_i+0x23c>)
 800f780:	230a      	movs	r3, #10
 800f782:	e012      	b.n	800f7aa <_printf_i+0xfe>
 800f784:	682b      	ldr	r3, [r5, #0]
 800f786:	6820      	ldr	r0, [r4, #0]
 800f788:	1d19      	adds	r1, r3, #4
 800f78a:	6029      	str	r1, [r5, #0]
 800f78c:	0605      	lsls	r5, r0, #24
 800f78e:	d501      	bpl.n	800f794 <_printf_i+0xe8>
 800f790:	681e      	ldr	r6, [r3, #0]
 800f792:	e002      	b.n	800f79a <_printf_i+0xee>
 800f794:	0641      	lsls	r1, r0, #25
 800f796:	d5fb      	bpl.n	800f790 <_printf_i+0xe4>
 800f798:	881e      	ldrh	r6, [r3, #0]
 800f79a:	4853      	ldr	r0, [pc, #332]	; (800f8e8 <_printf_i+0x23c>)
 800f79c:	2f6f      	cmp	r7, #111	; 0x6f
 800f79e:	bf0c      	ite	eq
 800f7a0:	2308      	moveq	r3, #8
 800f7a2:	230a      	movne	r3, #10
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f7aa:	6865      	ldr	r5, [r4, #4]
 800f7ac:	60a5      	str	r5, [r4, #8]
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	bfa2      	ittt	ge
 800f7b2:	6821      	ldrge	r1, [r4, #0]
 800f7b4:	f021 0104 	bicge.w	r1, r1, #4
 800f7b8:	6021      	strge	r1, [r4, #0]
 800f7ba:	b90e      	cbnz	r6, 800f7c0 <_printf_i+0x114>
 800f7bc:	2d00      	cmp	r5, #0
 800f7be:	d04b      	beq.n	800f858 <_printf_i+0x1ac>
 800f7c0:	4615      	mov	r5, r2
 800f7c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7c6:	fb03 6711 	mls	r7, r3, r1, r6
 800f7ca:	5dc7      	ldrb	r7, [r0, r7]
 800f7cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7d0:	4637      	mov	r7, r6
 800f7d2:	42bb      	cmp	r3, r7
 800f7d4:	460e      	mov	r6, r1
 800f7d6:	d9f4      	bls.n	800f7c2 <_printf_i+0x116>
 800f7d8:	2b08      	cmp	r3, #8
 800f7da:	d10b      	bne.n	800f7f4 <_printf_i+0x148>
 800f7dc:	6823      	ldr	r3, [r4, #0]
 800f7de:	07de      	lsls	r6, r3, #31
 800f7e0:	d508      	bpl.n	800f7f4 <_printf_i+0x148>
 800f7e2:	6923      	ldr	r3, [r4, #16]
 800f7e4:	6861      	ldr	r1, [r4, #4]
 800f7e6:	4299      	cmp	r1, r3
 800f7e8:	bfde      	ittt	le
 800f7ea:	2330      	movle	r3, #48	; 0x30
 800f7ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f7f4:	1b52      	subs	r2, r2, r5
 800f7f6:	6122      	str	r2, [r4, #16]
 800f7f8:	f8cd a000 	str.w	sl, [sp]
 800f7fc:	464b      	mov	r3, r9
 800f7fe:	aa03      	add	r2, sp, #12
 800f800:	4621      	mov	r1, r4
 800f802:	4640      	mov	r0, r8
 800f804:	f7ff fee4 	bl	800f5d0 <_printf_common>
 800f808:	3001      	adds	r0, #1
 800f80a:	d14a      	bne.n	800f8a2 <_printf_i+0x1f6>
 800f80c:	f04f 30ff 	mov.w	r0, #4294967295
 800f810:	b004      	add	sp, #16
 800f812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	f043 0320 	orr.w	r3, r3, #32
 800f81c:	6023      	str	r3, [r4, #0]
 800f81e:	4833      	ldr	r0, [pc, #204]	; (800f8ec <_printf_i+0x240>)
 800f820:	2778      	movs	r7, #120	; 0x78
 800f822:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f826:	6823      	ldr	r3, [r4, #0]
 800f828:	6829      	ldr	r1, [r5, #0]
 800f82a:	061f      	lsls	r7, r3, #24
 800f82c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f830:	d402      	bmi.n	800f838 <_printf_i+0x18c>
 800f832:	065f      	lsls	r7, r3, #25
 800f834:	bf48      	it	mi
 800f836:	b2b6      	uxthmi	r6, r6
 800f838:	07df      	lsls	r7, r3, #31
 800f83a:	bf48      	it	mi
 800f83c:	f043 0320 	orrmi.w	r3, r3, #32
 800f840:	6029      	str	r1, [r5, #0]
 800f842:	bf48      	it	mi
 800f844:	6023      	strmi	r3, [r4, #0]
 800f846:	b91e      	cbnz	r6, 800f850 <_printf_i+0x1a4>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	f023 0320 	bic.w	r3, r3, #32
 800f84e:	6023      	str	r3, [r4, #0]
 800f850:	2310      	movs	r3, #16
 800f852:	e7a7      	b.n	800f7a4 <_printf_i+0xf8>
 800f854:	4824      	ldr	r0, [pc, #144]	; (800f8e8 <_printf_i+0x23c>)
 800f856:	e7e4      	b.n	800f822 <_printf_i+0x176>
 800f858:	4615      	mov	r5, r2
 800f85a:	e7bd      	b.n	800f7d8 <_printf_i+0x12c>
 800f85c:	682b      	ldr	r3, [r5, #0]
 800f85e:	6826      	ldr	r6, [r4, #0]
 800f860:	6961      	ldr	r1, [r4, #20]
 800f862:	1d18      	adds	r0, r3, #4
 800f864:	6028      	str	r0, [r5, #0]
 800f866:	0635      	lsls	r5, r6, #24
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	d501      	bpl.n	800f870 <_printf_i+0x1c4>
 800f86c:	6019      	str	r1, [r3, #0]
 800f86e:	e002      	b.n	800f876 <_printf_i+0x1ca>
 800f870:	0670      	lsls	r0, r6, #25
 800f872:	d5fb      	bpl.n	800f86c <_printf_i+0x1c0>
 800f874:	8019      	strh	r1, [r3, #0]
 800f876:	2300      	movs	r3, #0
 800f878:	6123      	str	r3, [r4, #16]
 800f87a:	4615      	mov	r5, r2
 800f87c:	e7bc      	b.n	800f7f8 <_printf_i+0x14c>
 800f87e:	682b      	ldr	r3, [r5, #0]
 800f880:	1d1a      	adds	r2, r3, #4
 800f882:	602a      	str	r2, [r5, #0]
 800f884:	681d      	ldr	r5, [r3, #0]
 800f886:	6862      	ldr	r2, [r4, #4]
 800f888:	2100      	movs	r1, #0
 800f88a:	4628      	mov	r0, r5
 800f88c:	f7f0 fcb8 	bl	8000200 <memchr>
 800f890:	b108      	cbz	r0, 800f896 <_printf_i+0x1ea>
 800f892:	1b40      	subs	r0, r0, r5
 800f894:	6060      	str	r0, [r4, #4]
 800f896:	6863      	ldr	r3, [r4, #4]
 800f898:	6123      	str	r3, [r4, #16]
 800f89a:	2300      	movs	r3, #0
 800f89c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8a0:	e7aa      	b.n	800f7f8 <_printf_i+0x14c>
 800f8a2:	6923      	ldr	r3, [r4, #16]
 800f8a4:	462a      	mov	r2, r5
 800f8a6:	4649      	mov	r1, r9
 800f8a8:	4640      	mov	r0, r8
 800f8aa:	47d0      	blx	sl
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	d0ad      	beq.n	800f80c <_printf_i+0x160>
 800f8b0:	6823      	ldr	r3, [r4, #0]
 800f8b2:	079b      	lsls	r3, r3, #30
 800f8b4:	d413      	bmi.n	800f8de <_printf_i+0x232>
 800f8b6:	68e0      	ldr	r0, [r4, #12]
 800f8b8:	9b03      	ldr	r3, [sp, #12]
 800f8ba:	4298      	cmp	r0, r3
 800f8bc:	bfb8      	it	lt
 800f8be:	4618      	movlt	r0, r3
 800f8c0:	e7a6      	b.n	800f810 <_printf_i+0x164>
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	4649      	mov	r1, r9
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	47d0      	blx	sl
 800f8cc:	3001      	adds	r0, #1
 800f8ce:	d09d      	beq.n	800f80c <_printf_i+0x160>
 800f8d0:	3501      	adds	r5, #1
 800f8d2:	68e3      	ldr	r3, [r4, #12]
 800f8d4:	9903      	ldr	r1, [sp, #12]
 800f8d6:	1a5b      	subs	r3, r3, r1
 800f8d8:	42ab      	cmp	r3, r5
 800f8da:	dcf2      	bgt.n	800f8c2 <_printf_i+0x216>
 800f8dc:	e7eb      	b.n	800f8b6 <_printf_i+0x20a>
 800f8de:	2500      	movs	r5, #0
 800f8e0:	f104 0619 	add.w	r6, r4, #25
 800f8e4:	e7f5      	b.n	800f8d2 <_printf_i+0x226>
 800f8e6:	bf00      	nop
 800f8e8:	080115dd 	.word	0x080115dd
 800f8ec:	080115ee 	.word	0x080115ee

0800f8f0 <memmove>:
 800f8f0:	4288      	cmp	r0, r1
 800f8f2:	b510      	push	{r4, lr}
 800f8f4:	eb01 0402 	add.w	r4, r1, r2
 800f8f8:	d902      	bls.n	800f900 <memmove+0x10>
 800f8fa:	4284      	cmp	r4, r0
 800f8fc:	4623      	mov	r3, r4
 800f8fe:	d807      	bhi.n	800f910 <memmove+0x20>
 800f900:	1e43      	subs	r3, r0, #1
 800f902:	42a1      	cmp	r1, r4
 800f904:	d008      	beq.n	800f918 <memmove+0x28>
 800f906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f90a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f90e:	e7f8      	b.n	800f902 <memmove+0x12>
 800f910:	4402      	add	r2, r0
 800f912:	4601      	mov	r1, r0
 800f914:	428a      	cmp	r2, r1
 800f916:	d100      	bne.n	800f91a <memmove+0x2a>
 800f918:	bd10      	pop	{r4, pc}
 800f91a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f91e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f922:	e7f7      	b.n	800f914 <memmove+0x24>

0800f924 <_sbrk_r>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4d06      	ldr	r5, [pc, #24]	; (800f940 <_sbrk_r+0x1c>)
 800f928:	2300      	movs	r3, #0
 800f92a:	4604      	mov	r4, r0
 800f92c:	4608      	mov	r0, r1
 800f92e:	602b      	str	r3, [r5, #0]
 800f930:	f7f1 ff60 	bl	80017f4 <_sbrk>
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	d102      	bne.n	800f93e <_sbrk_r+0x1a>
 800f938:	682b      	ldr	r3, [r5, #0]
 800f93a:	b103      	cbz	r3, 800f93e <_sbrk_r+0x1a>
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	bd38      	pop	{r3, r4, r5, pc}
 800f940:	200069a0 	.word	0x200069a0

0800f944 <_realloc_r>:
 800f944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f948:	4680      	mov	r8, r0
 800f94a:	4614      	mov	r4, r2
 800f94c:	460e      	mov	r6, r1
 800f94e:	b921      	cbnz	r1, 800f95a <_realloc_r+0x16>
 800f950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f954:	4611      	mov	r1, r2
 800f956:	f7ff bc57 	b.w	800f208 <_malloc_r>
 800f95a:	b92a      	cbnz	r2, 800f968 <_realloc_r+0x24>
 800f95c:	f7ff fbe8 	bl	800f130 <_free_r>
 800f960:	4625      	mov	r5, r4
 800f962:	4628      	mov	r0, r5
 800f964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f968:	f000 f81b 	bl	800f9a2 <_malloc_usable_size_r>
 800f96c:	4284      	cmp	r4, r0
 800f96e:	4607      	mov	r7, r0
 800f970:	d802      	bhi.n	800f978 <_realloc_r+0x34>
 800f972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f976:	d812      	bhi.n	800f99e <_realloc_r+0x5a>
 800f978:	4621      	mov	r1, r4
 800f97a:	4640      	mov	r0, r8
 800f97c:	f7ff fc44 	bl	800f208 <_malloc_r>
 800f980:	4605      	mov	r5, r0
 800f982:	2800      	cmp	r0, #0
 800f984:	d0ed      	beq.n	800f962 <_realloc_r+0x1e>
 800f986:	42bc      	cmp	r4, r7
 800f988:	4622      	mov	r2, r4
 800f98a:	4631      	mov	r1, r6
 800f98c:	bf28      	it	cs
 800f98e:	463a      	movcs	r2, r7
 800f990:	f7ff fbc0 	bl	800f114 <memcpy>
 800f994:	4631      	mov	r1, r6
 800f996:	4640      	mov	r0, r8
 800f998:	f7ff fbca 	bl	800f130 <_free_r>
 800f99c:	e7e1      	b.n	800f962 <_realloc_r+0x1e>
 800f99e:	4635      	mov	r5, r6
 800f9a0:	e7df      	b.n	800f962 <_realloc_r+0x1e>

0800f9a2 <_malloc_usable_size_r>:
 800f9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9a6:	1f18      	subs	r0, r3, #4
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	bfbc      	itt	lt
 800f9ac:	580b      	ldrlt	r3, [r1, r0]
 800f9ae:	18c0      	addlt	r0, r0, r3
 800f9b0:	4770      	bx	lr
	...

0800f9b4 <_init>:
 800f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b6:	bf00      	nop
 800f9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ba:	bc08      	pop	{r3}
 800f9bc:	469e      	mov	lr, r3
 800f9be:	4770      	bx	lr

0800f9c0 <_fini>:
 800f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c2:	bf00      	nop
 800f9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9c6:	bc08      	pop	{r3}
 800f9c8:	469e      	mov	lr, r3
 800f9ca:	4770      	bx	lr
